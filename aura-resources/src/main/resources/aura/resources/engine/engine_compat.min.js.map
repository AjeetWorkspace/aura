{"version":3,"file":"engine_compat.min.js","sources":["../src/framework/language.ts","../src/framework/class-list.ts","../src/framework/context.ts","../src/framework/utils.ts","../src/framework/services.ts","../src/framework/hook.ts","../src/framework/api.ts","../src/framework/membrane.ts","../src/framework/xproxy.ts","../src/framework/template.ts","../src/framework/defer.ts","../src/framework/invoker.ts","../src/framework/watcher.ts","../src/framework/properties.ts","../src/framework/piercing.ts","../src/framework/component.ts","../src/framework/root.ts","../src/framework/html-element.ts","../src/framework/def.ts","../src/framework/vm.ts","../src/framework/modules/component-init.ts","../src/framework/modules/component-props.ts","../src/framework/modules/component-attrs.ts","../src/framework/modules/component-events.ts","../src/framework/modules/component-classes.ts","../src/framework/modules/component-slotset.ts","../src/framework/modules/component-children.ts","../src/framework/modules/props.ts","../src/3rdparty/snabbdom/is.ts","../src/3rdparty/snabbdom/htmldomapi.ts","../src/3rdparty/snabbdom/snabbdom.ts","../src/framework/modules/attrs.ts","../src/framework/modules/styles.ts","../src/framework/modules/classes.ts","../src/framework/modules/events.ts","../src/framework/modules/uid.ts","../src/framework/upgrade.ts","../src/framework/dom.ts","../src/framework/compat.ts","../src/framework/patch.ts"],"sourcesContent":["const {\n    freeze,\n    seal,\n    keys,\n    create,\n    assign,\n    defineProperty,\n    getPrototypeOf,\n    setPrototypeOf,\n    getOwnPropertyDescriptor,\n    getOwnPropertyNames,\n    defineProperties,\n    getOwnPropertySymbols,\n    hasOwnProperty,\n    preventExtensions,\n    isExtensible,\n} = Object;\nconst isArray = Array.isArray;\nconst {\n    filter: ArrayFilter,\n    slice: ArraySlice,\n    splice: ArraySplice,\n    indexOf: ArrayIndexOf,\n    push: ArrayPush,\n    map: ArrayMap,\n    forEach,\n} = Array.prototype;\n\nexport {\n    freeze,\n    seal,\n    keys,\n    create,\n    assign,\n    defineProperty,\n    defineProperties,\n    getPrototypeOf,\n    setPrototypeOf,\n    getOwnPropertyDescriptor,\n    getOwnPropertyNames,\n    getOwnPropertySymbols,\n    hasOwnProperty,\n    preventExtensions,\n    isExtensible,\n    ArraySlice,\n    ArraySplice,\n    ArrayFilter,\n    ArrayMap,\n    isArray,\n    ArrayIndexOf,\n    ArrayPush,\n    forEach,\n}\n\nexport function isUndefined(obj: any): boolean {\n    return obj === undefined;\n}\n\nexport function isNull(obj: any): boolean {\n    return obj === null;\n}\n\nexport function isTrue(obj: any): boolean {\n    return obj === true;\n}\n\nexport function isFunction(obj: any): boolean {\n    return typeof obj === 'function';\n}\nexport function isObject(obj: any): boolean {\n    return typeof obj === 'object';\n}\n\nexport function isString(obj: any): boolean {\n    return typeof obj === 'string';\n}\n\nexport function isNumber(obj: any): boolean {\n    return typeof obj === 'number';\n}\n\nexport function isPromise(obj: any): boolean {\n    return typeof obj === 'object' && obj === Promise.resolve(obj);\n}\n\nconst OtS = {}.toString;\nexport function toString(obj: any): string {\n    if (obj && typeof obj === 'object' && !obj.toString) {\n        return OtS.call(obj);\n    }\n    return obj + '';\n}\n\nexport function bind(fn: Function, ctx: Object): Function {\n    function boundFn(a: any): any {\n        const l = arguments.length\n        return l\n            ? l > 1\n                ? fn.apply(ctx, arguments)\n                : fn.call(ctx, a)\n            : fn.call(ctx)\n    }\n    return boundFn;\n}\n","import assert from \"./assert\";\nimport {\n    getOwnPropertyNames,\n    defineProperty,\n    isUndefined,\n    forEach,\n} from \"./language\";\n\nimport { ViewModelReflection } from \"./html-element\";\n\nfunction getLinkedElement(classList: ClassList): HTMLElement {\n    return classList[ViewModelReflection].vnode.elm;\n}\n\n// This needs some more work. ClassList is a weird DOM api because it\n// is a TokenList, but not an Array. For now, we are just implementing\n// the simplest one.\n// https://www.w3.org/TR/dom/#domtokenlist\nexport function ClassList(vm: VM): DOMTokenList {\n    assert.vm(vm);\n    defineProperty(this, ViewModelReflection, {\n        value: vm,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n    });\n}\n\nClassList.prototype = {\n    add() {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        const elm = getLinkedElement(this);\n        // Add specified class values. If these classes already exist in attribute of the element, then they are ignored.\n        forEach.call(arguments, (className: String) => {\n            className = className + '';\n            if (!cmpClasses[className]) {\n                cmpClasses[className] = true;\n                // this is not only an optimization, it is also needed to avoid adding the same\n                // class twice when the initial diffing algo kicks in without an old vm to track\n                // what was already added to the DOM.\n                if (vm.idx) {\n                    // we intentionally make a sync mutation here and also keep track of the mutation\n                    // for a possible rehydration later on without having to rehydrate just now.\n                    elm.classList.add(className);\n                }\n            }\n        });\n    },\n    remove() {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        const elm = getLinkedElement(this);\n        // Remove specified class values.\n        forEach.call(arguments, (className: String) => {\n            className = className + '';\n            if (cmpClasses[className]) {\n                cmpClasses[className] = false;\n                // this is not only an optimization, it is also needed to avoid removing the same\n                // class twice when the initial diffing algo kicks in without an old vm to track\n                // what was already added to the DOM.\n                if (vm.idx) {\n                    // we intentionally make a sync mutation here when needed and also keep track of the mutation\n                    // for a possible rehydration later on without having to rehydrate just now.\n                    const ownerClass = vm.vnode.data.class;\n                    // This is only needed if the owner is not forcing that class to be present in case of conflicts.\n                    if (isUndefined(ownerClass) || !ownerClass[className]) {\n                        elm.classList.remove(className);\n                    }\n                }\n            }\n        });\n    },\n    item(index: Number): string | void {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        // Return class value by index in collection.\n        return getOwnPropertyNames(cmpClasses)\n            .filter((className: string): boolean => cmpClasses[className + ''])[index] || null;\n    },\n    toggle(className: String, force: any): boolean {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        // When only one argument is present: Toggle class value; i.e., if class exists then remove it and return false, if not, then add it and return true.\n        // When a second argument is present: If the second argument evaluates to true, add specified class value, and if it evaluates to false, remove it.\n        if (arguments.length > 1) {\n            if (force) {\n                this.add(className);\n            } else if (!force) {\n                this.remove(className);\n            }\n            return !!force;\n        }\n        if (cmpClasses[className]) {\n            this.remove(className);\n            return false;\n        }\n        this.add(className);\n        return true;\n    },\n    contains(className: String): boolean {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        // Checks if specified class value exists in class attribute of the element.\n        return !!cmpClasses[className];\n    },\n    toString(): string {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        return getOwnPropertyNames(cmpClasses).filter((className: string): boolean => cmpClasses[className + '']).join(' ');\n    }\n};\n","const topLevelContextSymbol = Symbol('Top Level Context');\n\nexport let currentContext = {};\n\ncurrentContext[topLevelContextSymbol] = true;\n\nexport function establishContext(ctx: Object) {\n    currentContext = ctx;\n}\n","import assert from \"./assert\";\nimport { create, seal, ArrayPush, freeze, isFunction } from \"./language\";\n\nlet nextTickCallbackQueue: Array<Callback> = [];\nconst SPACE_CHAR = 32;\n\nexport let EmptyObject = seal(create(null));\n\nfunction flushCallbackQueue() {\n    assert.invariant(nextTickCallbackQueue.length, `If callbackQueue is scheduled, it is because there must be at least one callback on this pending queue instead of ${nextTickCallbackQueue}.`);\n    const callbacks: Array<Callback> = nextTickCallbackQueue;\n    nextTickCallbackQueue = []; // reset to a new queue\n    for (let i = 0, len = callbacks.length; i < len; i += 1) {\n        callbacks[i]();\n    }\n}\n\nexport function addCallbackToNextTick(callback: Callback) {\n    assert.isTrue(isFunction(callback), `addCallbackToNextTick() can only accept a function callback as first argument instead of ${callback}`);\n    if (nextTickCallbackQueue.length === 0) {\n        Promise.resolve().then(flushCallbackQueue);\n    }\n    // TODO: eventually, we might want to have priority when inserting callbacks\n    ArrayPush.call(nextTickCallbackQueue, callback);\n}\n\nconst CAMEL_REGEX = /-([a-z])/g;\nconst attrNameToPropNameMap = create(null);\n\nexport function getPropNameFromAttrName(attrName: string): string {\n    let propName = attrNameToPropNameMap[attrName];\n    if (!propName) {\n        propName = attrName.replace(CAMEL_REGEX, (g: string): string => g[1].toUpperCase());\n        attrNameToPropNameMap[attrName] = propName;\n    }\n    return propName;\n}\n\nconst CAPS_REGEX = /[A-Z]/g;\nimport {\n    HTMLPropertyNamesWithLowercasedReflectiveAttributes,\n} from \"./dom\";\n\n/**\n * This dictionary contains the mapping between property names\n * and the corresponding attribute name. This helps to trigger observable attributes.\n */\nconst propNameToAttributeNameMap = {\n    // these are exceptions to the rule that cannot be inferred via `CAPS_REGEX`\n    className: 'class',\n    htmlFor: 'for',\n};\n// Few more exceptions where the attribute name matches the property in lowercase.\nHTMLPropertyNamesWithLowercasedReflectiveAttributes.forEach((propName: string) => {\n    propNameToAttributeNameMap[propName] = propName.toLowerCase();\n});\n\nexport function getAttrNameFromPropName(propName: string): string {\n    let attrName = propNameToAttributeNameMap[propName];\n    if (!attrName) {\n        attrName = propName.replace(CAPS_REGEX, (match: string): string => '-' + match.toLowerCase());\n        propNameToAttributeNameMap[propName] = attrName;\n    }\n    return attrName;\n}\n\nexport function toAttributeValue(raw: any): string | null {\n    // normalizing attrs from compiler into HTML global attributes\n    if (raw === true) {\n        raw = '';\n    } else if (raw === false) {\n        raw = null;\n    }\n    return raw !== null ? raw + '' : null;\n}\n\nexport function noop() {}\n\nconst classNameToClassMap = create(null);\n\nexport function getMapFromClassName(className: string): HashTable<boolean> {\n    let map = classNameToClassMap[className];\n    if (map) {\n        return map;\n    }\n    map = {};\n    let start = 0;\n    let i, len = className.length;\n    for (i = 0; i < len; i++) {\n        if (className.charCodeAt(i) === SPACE_CHAR) {\n            if (i > start) {\n                map[className.slice(start, i)] = true;\n            }\n            start = i + 1;\n        }\n    }\n\n    if (i > start) {\n        map[className.slice(start, i)] = true;\n    }\n    classNameToClassMap[className] = map;\n    assert.block(() => {\n        // just to make sure that this object never changes as part of the diffing algo\n        freeze(map);\n    });\n    return map;\n}\n","import assert from \"./assert\";\nimport { isUndefined, isObject, isArray, create } from \"./language\";\n\nconst hooks = ['wiring', 'rehydrated', 'connected', 'disconnected', 'piercing'];\n\n/* eslint-disable */\nimport { Replicable } from \"./membrane\";\nexport type ServiceCallback = (component: Component, data: VNodeData, def: ComponentDef, context: HashTable<any>) => void;\nexport type MembranePiercingCallback = (component: Component, data: VNodeData, def: ComponentDef, context: HashTable<any>, target: Replicable, key: Symbol | string, value: any, callback: (newValue?: any) => void) => void;\nexport type ServiceDef = { wiring?: ServiceCallback; connected?: ServiceCallback; disconnected?: ServiceCallback; rehydrated?: ServiceCallback; piercing?: MembranePiercingCallback; [key: string]: ServiceCallback | MembranePiercingCallback | undefined; };\n/* eslint-enable */\n\nexport const Services: {\n  wiring?: ServiceCallback[];\n  connected?: ServiceCallback[];\n  disconnected?: ServiceCallback[];\n  rehydrated?: ServiceCallback[];\n  piercing?: MembranePiercingCallback[];\n  [key: string]: ServiceCallback[] | MembranePiercingCallback[] | undefined;\n} = create(null);\n\nexport function register(service: ServiceDef) {\n    assert.isTrue(isObject(service), `Invalid service declaration, ${service}: service must be an object`);\n    for (let i = 0; i < hooks.length; ++i) {\n        const hookName = hooks[i];\n        if (hookName in service) {\n            let l = Services[hookName];\n            if (isUndefined(l)) {\n                Services[hookName] = l = [];\n            }\n\n            l.push(service[hookName]);\n        }\n    }\n}\n\nexport function invokeServiceHook(vm: VM, cbs: Array<ServiceCallback>) {\n    assert.vm(vm);\n    assert.isTrue(isArray(cbs) && cbs.length > 0, `Optimize invokeServiceHook() to be invoked only when needed`);\n    const { component, vnode: { data }, def, context } = vm;\n    for (let i = 0, len = cbs.length; i < len; ++i) {\n        cbs[i].call(undefined, component, data, def, context);\n    }\n}\n","import assert from \"./assert\";\nimport { invokeComponentMethod } from \"./invoker\";\nimport { clearListeners } from \"./component\";\nimport { rehydrate, addInsertionIndex, removeInsertionIndex } from \"./vm\";\nimport { addCallbackToNextTick, noop } from \"./utils\";\nimport { invokeServiceHook, Services } from \"./services\";\n\nfunction insert(vnode: ComponentVNode) {\n    assert.vnode(vnode);\n    const { vm } = vnode;\n    assert.vm(vm);\n    assert.isFalse(vm.idx, `${vm} is already inserted.`);\n    addInsertionIndex(vm);\n    const { isDirty, component: { connectedCallback } } = vm;\n    if (isDirty) {\n        // this code path guarantess that when patching the custom element for the first time,\n        // the body is computed only after the element is in the DOM, otherwise the hooks\n        // for any children's vnode are not going to be useful.\n        rehydrate(vm);\n    }\n    const { connected } = Services;\n    if (connected) {\n        addCallbackToNextTick((): void => invokeServiceHook(vm, connected));\n    }\n    if (connectedCallback && connectedCallback !== noop) {\n        addCallbackToNextTick((): void => invokeComponentMethod(vm, 'connectedCallback'));\n    }\n    console.log(`\"${vm}\" was inserted.`);\n}\n\nfunction destroy(vnode: ComponentVNode) {\n    assert.vnode(vnode);\n    const { vm } = vnode;\n    assert.vm(vm);\n    assert.isTrue(vm.idx, `${vm} is not inserted.`);\n    removeInsertionIndex(vm);\n    // just in case it comes back, with this we guarantee re-rendering it\n    vm.isDirty = true;\n    const { disconnected } = Services;\n    const { component: { disconnectedCallback } } = vm;\n    clearListeners(vm);\n    if (disconnected) {\n        addCallbackToNextTick((): void => invokeServiceHook(vm, disconnected));\n    }\n    if (disconnectedCallback && disconnectedCallback !== noop) {\n        addCallbackToNextTick((): void => invokeComponentMethod(vm, 'disconnectedCallback'));\n    }\n    console.log(`\"${vm}\" was destroyed.`);\n}\n\nfunction postpatch(oldVnode: VNode, vnode: ComponentVNode) {\n    assert.vnode(vnode);\n    assert.vm(vnode.vm);\n    if (vnode.vm.idx === 0) {\n        // when inserting a root element, or when reusing a DOM element for a new\n        // component instance, the insert() hook is never called because the element\n        // was already in the DOM before creating the instance, and diffing the\n        // vnode, for that, we wait until the patching process has finished, and we\n        // use the postpatch() hook to trigger the connectedCallback logic.\n        insert(vnode);\n        // Note: we don't have to worry about destroy() hook being called before this\n        // one because they never happen in the same patching mechanism, only one\n        // of them is called. In the case of the insert() hook, we use the value of `idx`\n        // to dedupe the calls since they both can happen in the same patching process.\n    }\n}\n\nexport const lifeCycleHooks = {\n    insert,\n    destroy,\n    postpatch,\n}\n","import assert from \"./assert\";\nimport { lifeCycleHooks as hook } from \"./hook\";\nimport { isArray, create, isUndefined, isFunction, isObject, isString, toString, ArrayPush } from \"./language\";\nimport { vmBeingRendered, invokeComponentCallback } from \"./invoker\";\nimport { getMapFromClassName } from \"./utils\";\n\nconst CHAR_S = 115;\nconst CHAR_V = 118;\nconst CHAR_G = 103;\nconst EmptyData = create(null);\nconst NamespaceAttributeForSVG = 'http://www.w3.org/2000/svg';\n\nfunction addNS(data: any, children: Array<VNode> | undefined, sel: string | undefined) {\n    data.ns = NamespaceAttributeForSVG;\n    if (isUndefined(children) || sel === 'foreignObject') {\n        return;\n    }\n    const len = children.length;\n    for (let i = 0; i < len; ++i) {\n        const child = children[i];\n        let { data } = child;\n        if (data !== undefined) {\n            const grandChildren: Array<VNode> = child.children;\n            addNS(data, grandChildren, child.sel);\n        }\n    }\n}\n\n// [v]node node\nexport function v(sel: string | undefined, data: VNodeData | undefined, children: Array<VNode | string> | undefined, text?: string | number | undefined, elm?: Element | Text | undefined, Ctor?: Class<Component>): VNode {\n    data = data || EmptyData;\n    let { key } = data;\n    // Try to identify the owner, but for root elements and other special cases, we\n    // can just fallback to 0 which means top level creation.\n    const uid = vmBeingRendered ? vmBeingRendered.uid : 0;\n    const vnode: VNode = { sel, data, children, text, elm, key, Ctor, uid };\n    assert.block(function devModeCheck() {\n        // adding toString to all vnodes for debuggability\n        vnode.toString = (): string => `[object:vnode ${sel}]`;\n    });\n    return vnode;\n}\n\n// [h]tml node\nexport function h(sel: string, data: VNodeData, children: Array<any>): VNode {\n    assert.isTrue(isString(sel), `h() 1st argument sel must be a string.`);\n    assert.isTrue(isObject(data), `h() 2nd argument data must be an object.`);\n    assert.isTrue(isArray(children), `h() 3rd argument children must be an array.`);\n    // checking reserved internal data properties\n    assert.invariant(data.class === undefined, `vnode.data.class should be undefined when calling h().`);\n    const { classMap, className, style, styleMap } = data;\n    assert.isFalse(className && classMap, `vnode.data.className and vnode.data.classMap ambiguous declaration.`);\n    data.class = classMap || (className && getMapFromClassName(className));\n    assert.isFalse(styleMap && style, `vnode.data.styleMap and vnode.data.style ambiguous declaration.`);\n    assert.block(function devModeCheck () {\n        if (style && !isString(style)) {\n            assert.logWarning(`Invalid 'style' attribute passed to <${sel}> should be a string value, and will be ignored.`);\n        }\n    });\n    data.style = styleMap || (style && style + '');\n    assert.block(function devModeCheck() {\n        children.forEach((vnode) => {\n            if (vnode === null) {\n                return;\n            }\n            assert.vnode(vnode);\n        });\n    });\n    if (sel.length === 3 && sel.charCodeAt(0) === CHAR_S && sel.charCodeAt(1) === CHAR_V && sel.charCodeAt(2) === CHAR_G) {\n        addNS(data, children, sel);\n    }\n    return v(sel, data, children);\n}\n\n// [c]ustom element node\nexport function c(sel: string, Ctor: Class<Component>, data: VNodeData): VNode {\n    // The compiler produce AMD modules that do not support circular dependencies\n    // We need to create an indirection to circumvent those cases.\n    // We could potentially move this check to the definition\n    if (Ctor.__circular__) {\n        Ctor = Ctor();\n    }\n\n    assert.isTrue(isString(sel), `c() 1st argument sel must be a string.`);\n    assert.isTrue(isFunction(Ctor), `c() 2nd argument Ctor must be a function.`);\n    assert.isTrue(isObject(data), `c() 3nd argument data must be an object.`);\n        // checking reserved internal data properties\n    assert.invariant(data.class === undefined, `vnode.data.class should be undefined when calling c().`);\n    const { key, slotset, styleMap, style, attrs, on, className, classMap, props: _props } = data;\n    assert.isTrue(arguments.length < 4, `Compiler Issue: Custom elements expect up to 3 arguments, received ${arguments.length} instead.`);\n    data = { hook, key, slotset, attrs, on, _props };\n    assert.isFalse(className && classMap, `vnode.data.className and vnode.data.classMap ambiguous declaration.`);\n    data.class = classMap || (className && getMapFromClassName(className));\n    assert.isFalse(styleMap && style, `vnode.data.styleMap and vnode.data.style ambiguous declaration.`);\n    assert.block(function devModeCheck () {\n        if (style && !isString(style)) {\n            assert.logWarning(`Invalid 'style' attribute passed to <${sel}> should be a string value, and will be ignored.`);\n        }\n    });\n    data.style = styleMap || (style && style + '');\n    return v(sel, data, [], undefined, undefined, Ctor);\n}\n\n// [i]terable node\nexport function i(items: Array<any>, factory: Function): Array<VNode> {\n    const len = (items && items.length) || 0; // supporting arrays and objects alike\n    const last = len ? (len - 1) : 0;\n    const list: Array<VNode> = [];\n    for (let i = 0; i < len; i += 1) {\n        const vnode = factory(items[i], i, i === 0, i === last);\n        if (isArray(vnode)) {\n            ArrayPush.apply(list, vnode);\n        } else {\n            ArrayPush.call(list, vnode);\n        }\n        assert.block(function devModeCheck() {\n            const vnodes = isArray(vnode) ? vnode : [vnode];\n            vnodes.forEach((vnode: VNode | any) => {\n                if (vnode && isObject(vnode) && vnode.sel && vnode.Ctor && isUndefined(vnode.key)) {\n                    // TODO - it'd be nice to log the owner component rather than the iteration children\n                    assert.logWarning(`Missing \"key\" attribute in iteration with child \"${toString(vnode.Ctor.name)}\", index ${i} of ${len}. Instead set a unique \"key\" attribute value on all iteration children so internal state can be preserved during rehydration.`);\n                }\n            });\n        });\n    }\n    return list;\n}\n\n/**\n * [f]lattening\n */\nexport function f(items: Array<any>): Array<any> {\n    assert.isTrue(isArray(items), 'flattening api can only work with arrays.');\n    const len = items.length;\n    const flattened: Array<VNode|null|number|string> = [];\n    for (let i = 0; i < len; i += 1) {\n        const item = items[i];\n        if (isArray(item)) {\n            ArrayPush.apply(flattened, item);\n        } else {\n            ArrayPush.call(flattened, item);\n        }\n    }\n    return flattened;\n}\n\n// [t]ext node\nexport function t(value: string | number): VNode {\n    return v(undefined, undefined, undefined, value);\n}\n\n// [d]ynamic value to produce a text vnode\nexport function d(value: any): VNode | null {\n    if (value === undefined || value === null) {\n        return null;\n    }\n    return v(undefined, undefined, undefined, value);\n}\n\n// [b]ind function\nexport function b(fn: EventListener): EventListener {\n    assert.vm(vmBeingRendered);\n    function handler(event: Event) {\n        // TODO: only if the event is `composed` it can be dispatched\n        invokeComponentCallback(handler.vm, handler.fn, handler.vm.component, [event]);\n    }\n    handler.vm = vmBeingRendered;\n    handler.fn = fn;\n    return handler;\n}\n","import assert from \"./assert\";\nimport { ArrayMap, isArray, isNull } from \"./language\";\nimport { XProxy } from \"./xproxy\";\n\n/*eslint-disable*/\nexport type ReplicableFunction = (...args: Array<any>) => any;\nexport type Replicable = Object | ReplicableFunction;\n\nexport type ReplicaFunction = (...args: Array<any>) => Replica | String | Number | Boolean | null | undefined;\nexport type Replica = Object | ReplicaFunction;\n\nexport interface MembraneHandler {\n    get(membrane: Membrane, target: Replicable, key: string | Symbol): any;\n    set(membrane: Membrane, target: Replicable, key: string | Symbol, newValue: any): boolean;\n    deleteProperty(membrane: Membrane, target: Replicable, key: string | Symbol): boolean;\n    apply(membrane: Membrane, targetFn: ReplicableFunction, thisArg: any, argumentsList: Array<any>): any;\n    construct(membrane: Membrane, targetFn: ReplicableFunction, argumentsList: Array<any>, newTarget: any): any;\n}\n/*eslint-enable*/\n\nexport const TargetSlot = Symbol();\nexport const MembraneSlot = Symbol();\n\nfunction isReplicable(value: any): boolean {\n    const type = typeof value;\n    return value && (type === 'object' || type === 'function');\n}\n\nexport function getReplica(membrane: Membrane, value: Replicable | any): Replica | any {\n    if (isNull(value)) {\n        return value;\n    }\n    value = unwrap(value);\n    if (!isReplicable(value)) {\n        return value;\n    }\n    assert.isTrue(membrane instanceof Membrane, `getReplica() first argument must be a membrane.`);\n    let { cells } = membrane;\n    const r = cells.get(value);\n    if (r) {\n        return r;\n    }\n    const replica: Replica = new XProxy(value, (membrane as ProxyHandler<Replicable>)); // eslint-disable-line no-undef\n    cells.set(value, replica);\n    return replica;\n}\n\nexport class Membrane {\n    handler: MembraneHandler; // eslint-disable-line no-undef\n    cells: WeakMap<Replicable, Replica>; // eslint-disable-line no-undef\n    constructor(handler: MembraneHandler) {\n        this.handler = handler;\n        this.cells = new WeakMap();\n    }\n    get(target: Replicable, key: string | Symbol): any {\n        if (key === TargetSlot) {\n            return target;\n        } else if (key === MembraneSlot) {\n            return this;\n        }\n        return this.handler.get(this, target, key);\n    }\n    set(target: Replicable, key: string | Symbol, newValue: any): boolean {\n        return this.handler.set(this, target, key, newValue);\n    }\n    deleteProperty(target: Replicable, key: string | Symbol): boolean {\n        if (key === TargetSlot) {\n            return false;\n        }\n        return this.handler.deleteProperty(this, target, key);\n    }\n    apply(target: ReplicableFunction, thisArg: any, argumentsList: Array<any>): any {\n        thisArg = unwrap(thisArg);\n        argumentsList = unwrap(argumentsList);\n        if (isArray(argumentsList)) {\n            argumentsList = ArrayMap.call(argumentsList, unwrap);\n        }\n        return this.handler.apply(this, target, thisArg, argumentsList);\n    }\n    construct(target: ReplicableFunction, argumentsList: Array<any>, newTarget: any): any {\n        argumentsList = unwrap(argumentsList);\n        if (isArray(argumentsList)) {\n            argumentsList = ArrayMap.call(argumentsList, unwrap);\n        }\n        return this.handler.construct(this, target, argumentsList, newTarget);\n    }\n}\n\nexport function unwrap(replicaOrAny: Replica | any): Replicable | any {\n    return (replicaOrAny && replicaOrAny[TargetSlot]) || replicaOrAny;\n}\n","import compat from \"./compat\";\nimport assert from \"./assert\";\nimport { unwrap, MembraneSlot, TargetSlot } from \"./membrane\";\nimport { isObject, isFunction, ArraySlice, create, getPrototypeOf, setPrototypeOf, isArray, keys, getOwnPropertyNames, assign, hasOwnProperty } from \"./language\";\n\n/*eslint-disable*/\nimport { ReplicableFunction, Replicable, Replica, Membrane } from \"./membrane\";\n\ntype RevokeFn = () => void;\n\ninterface RevocableProxy<T> {\n    proxy: T;\n    revoke: RevokeFn;\n}\n\ninterface CompatProxyHandler<T extends object> {\n    get(target: T, p: PropertyKey, receiver: any): any;\n    set(target: T, p: PropertyKey, value: any, receiver: any): boolean;\n    apply(target: T, thisArg: any, argArray?: any): any;\n    construct(target: T, argArray: any, newTarget?: any): object;\n}\n\ninterface CompatProxyConstructor {\n    revocable<T extends object>(target: T, handler: CompatProxyHandler<T>): RevocableProxy<T>;\n    new <T extends object>(target: T, handler: CompatProxyHandler<T>): T;\n}\n/*eslint-enable*/\n\nfunction getLinkedMembrane(replicaOrAny: Replica | any): Membrane | undefined {\n    const target = unwrap(replicaOrAny);\n    if (target !== replicaOrAny) {\n        return (replicaOrAny as Replica)[MembraneSlot];\n    }\n}\n\nlet lastRevokeFn: RevokeFn;\n\nconst ProxyCompat: CompatProxyConstructor = function Proxy(target: Replicable, handler: CompatProxyHandler<Replicable>): Replica {\n    const targetIsFunction = isFunction(target);\n    const targetIsArray = isArray(target);\n    assert.invariant(isObject(target) || targetIsFunction, `Cannot create proxy with a non-object as target`);\n    assert.invariant(isObject(handler), `new Proxy expects the second argument to a CompatProxyHandler`);\n    const { get, set, apply, construct } = handler;\n    assert.invariant(isFunction(get) && isFunction(set) && isFunction(apply) && isFunction(construct), `CompatProxyHandler requires get, set, apply and construct traps to be defined.`);\n\n    // Construct revoke function, and set lastRevokeFn so that Proxy.revocable can steal it.\n    // The caller might get the wrong revoke function if a user replaces or wraps XProxy\n    // to call itself, but that seems unlikely especially when using the polyfill.\n    let throwRevoked = function (trap: string) {}; // eslint-disable-line no-unused-vars\n    lastRevokeFn = function () {\n        throwRevoked = function (trap: string) {\n            throw new TypeError(`Cannot perform '${trap}' on a proxy that has been revoked`);\n        };\n    };\n\n    // Define proxy as Object, or Function (if either it's callable, or apply is set).\n    let proxy = this; // reusing the already created object, eventually the prototype will be resetted\n    if (targetIsFunction) {\n        proxy = function Proxy() {\n            const usingNew = (this && this.constructor === proxy);\n            const args = ArraySlice.call(arguments);\n            throwRevoked(usingNew ? 'construct' : 'apply');\n\n            if (usingNew) {\n                return construct.call(handler, target, args, this);\n            } else {\n                return apply.call(handler, target, this, args);\n            }\n        };\n    }\n\n    function linkProperty(target: Replicable, handler: CompatProxyHandler<Replicable>, key: string | Symbol, enumerable: boolean) {\n        // arrays are usually mutable, but objects are not... normally, in compat mode they will use the accessor keys\n        // instead of interacting with the object directly, but if they bypass that for some reason, having the right\n        // value for configurable helps to detect those early errors.\n        const configurable = targetIsArray;\n        const desc = {\n            enumerable,\n            configurable,\n            get: () => {\n                throwRevoked('get');\n                return get.call(handler, target, key);\n            },\n            set: (value: any): any => {\n                throwRevoked('set');\n                const result = set.call(handler, target, key, value);\n                if (result === false) {\n                    throw new TypeError(`'set' on proxy: trap returned falsish for property '${key}'`);\n                }\n            },\n        };\n        Object.defineProperty(proxy, key, desc);\n    }\n\n    // Clone enumerable properties\n    for (let key in target) {\n        linkProperty(target, handler, key, true);\n    }\n\n    // Set the prototype, or clone all prototype methods (always required if a getter is provided).\n    const proto = getPrototypeOf(target);\n    setPrototypeOf(proxy, proto);\n\n    if (targetIsArray) {\n        linkProperty(target, handler, 'length', false);\n    }\n\n    linkProperty(target, handler, MembraneSlot, false);\n    linkProperty(target, handler, TargetSlot, false);\n\n    return proxy;\n};\n\nProxyCompat.revocable = function (target: Replicable, handler: CompatProxyHandler<Replicable>): RevocableProxy<any> {\n    const p = new XProxy(target, handler);\n    return {\n        proxy: p,\n        revoke: lastRevokeFn,\n    };\n};\n\nfunction getKeyCompat(replicaOrAny: Replica | any, key: any): any {\n    const membrane = getLinkedMembrane(replicaOrAny);\n    return membrane ? membrane.get(unwrap(replicaOrAny), key) : replicaOrAny[key];\n}\n\nfunction callKeyCompat(replicaOrAny: Replica | any, key: any, ...args: any[]): any {\n    const membrane = getLinkedMembrane(replicaOrAny);\n    const context = membrane ? unwrap(replicaOrAny) : replicaOrAny;\n    const fn = membrane ? membrane.get(context, key) : replicaOrAny[key];\n    return fn.apply(replicaOrAny, args);\n}\n\nfunction setKeyCompat(replicaOrAny: Replica | any, key: string | Symbol, newValue: any, originalReturnValue?: any): any {\n    const membrane = getLinkedMembrane(replicaOrAny);\n    if (membrane) {\n        membrane.set(unwrap(replicaOrAny), key, newValue);\n    } else {\n        // non-proxified assignment\n        replicaOrAny[key] = newValue;\n    }\n    return arguments.length === 4 ? originalReturnValue : newValue;\n}\n\nfunction deleteKeyCompat(replicaOrAny: Replica | any, key: string | Symbol) {\n    const membrane = getLinkedMembrane(replicaOrAny);\n    if (membrane) {\n        membrane.deleteProperty(unwrap(replicaOrAny), key);\n        return;\n    }\n    // non-profixied delete\n    delete replicaOrAny[key];\n}\n\nfunction inKeyCompat(replicaOrAny: Replica | any, key: string | Symbol): boolean {\n    const membrane = getLinkedMembrane(replicaOrAny);\n    if (membrane) {\n        return membrane.has(unwrap(replicaOrAny), key);\n    }\n    return key in replicaOrAny;\n}\n\nfunction iterableKeyCompat(replicaOrAny: Replica | any): any[] {\n    const membrane = getLinkedMembrane(replicaOrAny);\n    const target = membrane ? unwrap(replicaOrAny) : replicaOrAny;\n    const keyedObj = create(null);\n    for (let i in target) {\n        keyedObj[i] = void 0;\n    }\n    return keyedObj;\n}\n\n// transpilation\n// 1. member expressions e.g.: `obj.x.y.z` => `getKey(obj, 'x', 'y', 'z')`\n// 2. assignment of member expressions e.g.: `obj.x.y.z = 1;` => `setKey(getKey(obj, 'x', 'y'), 'z', 1)`\n// 3. delete operator e.g.: `delete obj.x.y.z` => `deleteKey(getKey(obj, 'x', 'y'), 'z')`\n// 4. in operator e.g.: `\"z\" in obj.x.y` => `inKey(getKey(obj, 'x', 'y'), 'z')`\n// 5. for in operator `for (let i in obj)` => `for (let i in iterableKey(obj))`\n\n// patches\n// [*] Object.prototype.hasOwnProperty should be patched as a general rule\n// [ ] Object.propertyIsEnumerable should be patched\n// [*] Array.isArray\n\nfunction compatIsArray(replicaOrAny: Replica | any): boolean {\n    return isArray(unwrap(replicaOrAny));\n}\n\nfunction compatKeys(replicaOrAny: Replica | any): Array<string | Symbol> {\n    return keys(unwrap(replicaOrAny));\n}\n\nfunction compatGetOwnPropertyNames(replicaOrAny: Replica | any): Array<string> {\n    return getOwnPropertyNames(unwrap(replicaOrAny));\n}\n\nfunction compatHasOwnProperty(key: string | Symbol): boolean {\n    const replicaOrAny: Replica | any = this;\n    return hasOwnProperty.call(unwrap(replicaOrAny), key);\n}\n\nfunction compatAssign(replicaOrAny: Replica | any): Replica | any {\n    if (replicaOrAny == null) { // TypeError if undefined or null\n      throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    const to = Object(unwrap(replicaOrAny));\n\n    for (var index = 1; index < arguments.length; index++) {\n        const nextSource = arguments[index];\n\n        if (nextSource != null) { // Skip over if undefined or null\n            const iterator = unwrap(nextSource);\n            for (let nextKey in iterator) {\n                // Avoid bugs when hasOwnProperty is shadowed\n                if (hasOwnProperty.call(iterator, nextKey)) {\n                    setKey(to, nextKey, getKey(nextSource, nextKey));\n                }\n            }\n        }\n    }\n    return to;\n}\n\n// trap `preventExtensions` can be covered by a patched version of:\n// [ ] Object.preventExtensions()\n// [ ] Reflect.preventExtensions()\n\n// trap `getOwnPropertyDescriptor` can be covered by a patched version of:\n// [ ] Object.getOwnPropertyDescriptor()\n// [ ] Reflect.getOwnPropertyDescriptor()\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler/defineProperty\n// trap `defineProperty` can be covered by a patched version of:\n// [ ] Object.defineProperty()\n// [ ] Reflect.defineProperty()\n\n\n// trap `deleteProperty` can be covered by the transpilation and the patched version of:\n// [ ] Reflect.deleteProperty()\n\n// trap `ownKeys` can be covered by a patched version of:\n// [*] Object.getOwnPropertyNames()\n// [ ] Object.getOwnPropertySymbols()\n// [*] Object.keys()\n// [ ] Reflect.ownKeys()\n\n// trap `isExtensible` can be covered by a patched version of:\n// [ ] Object.isExtensible()\n// [ ] Reflect.isExtensible()\n\n// trap `setPrototypeOf` can be covered by a patched version of:\n// [ ] Object.setPrototypeOf()\n// [ ] Reflect.setPrototypeOf()\n\nexport let XProxy: CompatProxyConstructor = typeof Proxy !== \"undefined\" ? Proxy : undefined;\nexport let getKey;\nexport let callKey;\nexport let setKey;\nexport let deleteKey;\nexport let inKey;\nexport let iterableKey;\n\n// enable/disable is meant to be used by our test infrastructure only\nexport function enableCompatMode() {\n    XProxy = ProxyCompat;\n    getKey = getKeyCompat;\n    callKey = callKeyCompat;\n    setKey = setKeyCompat;\n    deleteKey = deleteKeyCompat;\n    inKey = inKeyCompat;\n    iterableKey = iterableKeyCompat;\n    Array.isArray = compatIsArray;\n    assign(Object, {\n        keys: compatKeys,\n        getOwnPropertyNames: compatGetOwnPropertyNames,\n        assign: compatAssign,\n    })\n    assign(Object.prototype, {\n        hasOwnProperty: compatHasOwnProperty,\n    })\n}\n\nexport function disableCompatMode() {\n    XProxy = Proxy;\n    getKey = setKey = deleteKey = inKey = iterableKey = undefined;\n    Array.isArray = isArray;\n    assign(Object, {\n        keys,\n        getOwnPropertyNames,\n        assign,\n    });\n    assign(Object.prototype, {\n        hasOwnProperty,\n    })\n}\n\n// initialization\ncompat(() => {\n    enableCompatMode();\n});\n","import assert from \"./assert\";\nimport * as api from \"./api\";\nimport { isArray, isFunction, isObject, create, ArrayIndexOf, toString, hasOwnProperty } from \"./language\";\nimport { XProxy } from \"./xproxy\";\n\nconst EmptySlots: Slotset = create(null);\n\nfunction getSlotsetValue(slotset: Slotset, slotName: string): Array<VNode> {\n    assert.isTrue(isObject(slotset), `Invalid slotset value ${toString(slotset)}`);\n    // TODO: mark slotName as reactive\n    return slotset && slotset[slotName];\n}\n\nconst slotsetProxyHandler: ProxyHandler<Slotset> = {\n    get: (slotset: Slotset, key: string): any => getSlotsetValue(slotset, key),\n    set: (): boolean => {\n        assert.logError(`$slotset object cannot be mutated from template.`);\n        return false;\n    },\n    deleteProperty: (): boolean => {\n        assert.logError(`$slotset object cannot be mutated from template.`);\n        return false;\n    },\n    apply(/*target: any, thisArg: any, argArray?: any*/) {\n        assert.fail(`invalid call invocation from slotset`);\n    },\n    construct(/*target: any, argArray: any, newTarget?: any*/) {\n        assert.fail(`invalid construction invocation from slotset`);\n    },\n};\n\nfunction validateSlots(vm: VM, html: any) {\n    let { cmpSlots = EmptySlots } = vm;\n    const { slots = [] } = html;\n    for (let slotName in cmpSlots) {\n        if (ArrayIndexOf.call(slots, slotName) === -1) {\n            // TODO: this should never really happen because the compiler should always validate\n            console.warn(`Ignoring unknown provided slot name \"${slotName}\" in ${vm}. This is probably a typo on the slot attribute.`);\n        }\n    }\n}\n\nfunction validateFields(vm: VM, html: any) {\n    let { component } = vm;\n    // validating identifiers used by template that should be provided by the component\n    const { ids = [] } = html;\n    ids.forEach((propName: string) => {\n        if (!(propName in component)) {\n            console.warn(`The template rendered by ${vm} references \\`this.${propName}\\`, which is not declared. This is likely a typo in the template.`);\n        } else if (hasOwnProperty.call(component, propName)) {\n            assert.fail(`${component}'s template is accessing \\`this.${toString(propName)}\\` directly, which is considered a private field. Instead access it via a getter or make it reactive by moving it to \\`this.state.${toString(propName)}\\`.`);\n        }\n    });\n}\n\n\nfunction validateTemplate(vm: VM, html: any) {\n    validateSlots(vm, html);\n    validateFields(vm, html);\n}\n\nexport function evaluateTemplate(vm: VM, html: any): Array<VNode|null> {\n    assert.vm(vm);\n    assert.isTrue(isFunction(html), `evaluateTemplate() second argument must be a function instead of ${html}`);\n    // TODO: add identity to the html functions\n    let { component, context, cmpSlots = EmptySlots, cmpTemplate } = vm;\n    // reset the cache momizer for template when needed\n    if (html !== cmpTemplate) {\n        context.tplCache = create(null);\n        vm.cmpTemplate = html;\n        assert.block(function devModeCheck() {\n            validateTemplate(vm, html);\n        });\n    }\n    assert.isTrue(isObject(context.tplCache), `vm.context.tplCache must be an object associated to ${cmpTemplate}.`);\n    const { proxy: slotset, revoke: slotsetRevoke } = XProxy.revocable(cmpSlots, slotsetProxyHandler);\n    let vnodes = html.call(undefined, api, component, slotset, context.tplCache);\n    assert.invariant(isArray(vnodes), `Compiler should produce html functions that always return an array.`);\n    slotsetRevoke();\n    return vnodes;\n}\n","import assert from \"./assert\";\nimport { isFunction, isUndefined, isPromise } from \"./language\";\nimport { evaluateTemplate } from \"./template\";\nimport { rehydrate } from \"./vm\";\n\nfunction attemptToEvaluateResolvedTemplate(vm: VM, html: Template | undefined, originalPromise: Promise<Template | undefined>) {\n    let { context } = vm;\n    if (originalPromise !== context.tplPromise) {\n        // resolution of an old promise that is not longer relevant, ignoring it.\n        return;\n    }\n    if (isFunction(html)) {\n        context.tplResolvedValue = html;\n        assert.block(function devModeCheck() {\n            if (html === vm.cmpTemplate) {\n                assert.logError(`component ${vm.component} is returning a new promise everytime the render() method is invoked, even though the promise resolves to the same template ${html}. You should cache the promise outside of the render method, and return the same promise everytime, otherwise you will incurr in some performance penalty.`);\n            }\n        });\n        // forcing the vm to be dirty so it can render its content.\n        vm.isDirty = true;\n        rehydrate(vm);\n    } else if (!isUndefined(html)) {\n        assert.fail(`The template rendered by ${vm} must return an imported template tag (e.g.: \\`import html from \"./mytemplate.html\"\\`) or undefined, instead, it has returned ${html}.`);\n    }\n    // if the promise resolves to `undefined`, do nothing...\n}\n\nexport function deferredTemplate(vm: VM, html: Promise<Template | undefined>): Array<VNode> {\n    assert.vm(vm);\n    assert.isTrue(isPromise(html), `deferredTemplate() second argument must be a promise instead of ${html}`);\n    let { context } = vm;\n    const { tplResolvedValue, tplPromise } = context;\n    if (html !== tplPromise) {\n        context.tplPromise = html;\n        context.tplResolvedValue = undefined;\n        html.then((fn) => attemptToEvaluateResolvedTemplate(vm, fn, html));\n    } else if (tplResolvedValue) {\n        // if multiple invokes to render() return the same promise, we can rehydrate using the\n        // underlaying resolved value of that promise.\n        return evaluateTemplate(vm, tplResolvedValue);\n    }\n    return [];\n}\n","import assert from \"./assert\";\nimport {\n    currentContext,\n    establishContext,\n} from \"./context\";\nimport { evaluateTemplate } from \"./template\";\nimport { deferredTemplate } from \"./defer\";\nimport { isUndefined, isFunction, isPromise } from \"./language\";\n\nexport let isRendering: boolean = false;\nexport let vmBeingRendered: VM|null = null;\n\nexport function invokeComponentCallback(vm: VM, fn: () => any, fnCtx: any, args?: Array<any>): any {\n    const { context } = vm;\n    const ctx = currentContext;\n    establishContext(context);\n    let result, error;\n    try {\n        // TODO: membrane proxy for all args that are objects\n        result = fn.apply(fnCtx, args);\n    } catch (e) {\n        error = e;\n    }\n    establishContext(ctx);\n    if (error) {\n        throw error; // rethrowing the original error after restoring the context\n    }\n    return result;\n}\n\nexport function invokeComponentMethod(vm: VM, methodName: string, args?: Array<any>): any {\n    const { component } = vm;\n    return invokeComponentCallback(vm, component[methodName], component, args);\n}\n\nexport function invokeComponentConstructor(vm: VM, Ctor: Class<Component>): Component {\n    const { context } = vm;\n    const ctx = currentContext;\n    establishContext(context);\n    let component, error;\n    try {\n        component = new Ctor();\n    } catch (e) {\n        error = e;\n    }\n    establishContext(ctx);\n    if (error) {\n        throw error; // rethrowing the original error after restoring the context\n    }\n    return component;\n}\n\nexport function invokeComponentRenderMethod(vm: VM): Array<VNode> {\n    const { component, context } = vm;\n    const ctx = currentContext;\n    establishContext(context);\n    const isRenderingInception = isRendering;\n    const vmBeingRenderedInception = vmBeingRendered;\n    isRendering = true;\n    vmBeingRendered = vm;\n    let result, error;\n    try {\n        const html = component.render();\n        if (isFunction(html)) {\n            result = evaluateTemplate(vm, html);\n        } else if (isPromise(html)) {\n            result = deferredTemplate(vm, html);\n        } else if (!isUndefined(html)) {\n            assert.fail(`The template rendered by ${vm} must return an imported template tag (e.g.: \\`import html from \"./mytemplate.html\"\\`) or undefined, instead, it has returned ${html}.`);\n        }\n    } catch (e) {\n        error = e;\n    }\n    isRendering = isRenderingInception;\n    vmBeingRendered = vmBeingRenderedInception;\n    establishContext(ctx);\n    if (error) {\n        throw error; // rethrowing the original error after restoring the context\n    }\n    return result || [];\n}\n\nexport function invokeComponentAttributeChangedCallback(vm: VM, attrName: string, oldValue: any, newValue: any) {\n    const { component, context } = vm;\n    const { attributeChangedCallback } = component;\n    if (isUndefined(attributeChangedCallback)) {\n        return;\n    }\n    const ctx = currentContext;\n    establishContext(context);\n    let error;\n    try {\n        component.attributeChangedCallback(attrName, oldValue, newValue);\n    } catch (e) {\n        error = e;\n    }\n    establishContext(ctx);\n    if (error) {\n        throw error; // rethrowing the original error after restoring the context\n    }\n}\n","import assert from \"./assert\";\nimport { scheduleRehydration } from \"./vm\";\nimport { markComponentAsDirty } from \"./component\";\nimport { isUndefined, toString, create, ArrayIndexOf, ArrayPush } from \"./language\";\n\nconst TargetToReactiveRecordMap: Map<Object, ReactiveRecord> = new WeakMap();\n\nexport function notifyListeners(target: Object, key: string | Symbol) {\n    const reactiveRecord = TargetToReactiveRecordMap.get(target);\n    if (reactiveRecord) {\n        const value = reactiveRecord[key];\n        if (value) {\n            const len = value.length;\n            for (let i = 0; i < len; i += 1) {\n                const vm = value[i];\n                assert.vm(vm);\n                console.log(`Marking ${vm} as dirty: property \"${toString(key)}\" of ${toString(target)} was set to a new value.`);\n                if (!vm.isDirty) {\n                    markComponentAsDirty(vm);\n                    console.log(`Scheduling ${vm} for rehydration due to mutation.`);\n                    scheduleRehydration(vm);\n                }\n            }\n        }\n    }\n}\n\nexport function subscribeToSetHook(vm: VM, target: Object, key: string | Symbol) {\n    assert.vm(vm);\n    let reactiveRecord: ReactiveRecord = TargetToReactiveRecordMap.get(target);\n    if (isUndefined(reactiveRecord)) {\n        const newRecord: ReactiveRecord = create(null);\n        reactiveRecord = newRecord;\n        TargetToReactiveRecordMap.set(target, newRecord);\n    }\n    let value = reactiveRecord[key];\n    if (isUndefined(value)) {\n        value = [];\n        reactiveRecord[key] = value;\n    }\n    if (ArrayIndexOf.call(value, vm) === -1) {\n        ArrayPush.call(value, vm);\n        // we keep track of the sets that vm is listening from to be able to do some clean up later on\n        ArrayPush.call(vm.deps, value);\n    }\n}\n","import assert from \"./assert\";\nimport {\n    subscribeToSetHook,\n    notifyListeners,\n} from \"./watcher\";\nimport {\n    isRendering,\n    vmBeingRendered,\n} from \"./invoker\";\nimport { toString, isArray, isObject, isNull } from \"./language\";\nimport { XProxy } from \"./xproxy\";\nimport { TargetSlot, MembraneSlot, unwrap } from \"./membrane\";\n\n/*eslint-disable*/\nimport { Replicable, Replica } from \"./membrane\";\n/*eslint-enable*/\n\nconst ReplicableToReplicaMap: WeakMap<Replicable, Replica> = new WeakMap();\n\nfunction propertyGetter(target: Object, key: string | Symbol): any {\n    if (key === TargetSlot) {\n        return target;\n    } else if (key === MembraneSlot) {\n        return propertyProxyHandler;\n    }\n    const value = target[key];\n    if (isRendering && vmBeingRendered) {\n        subscribeToSetHook(vmBeingRendered, target, key);\n    }\n    return (value && isObject(value)) ? getPropertyProxy(value) : value;\n}\n\nfunction propertySetter(target: Object, key: string | Symbol, value: any): boolean {\n    if (isRendering) {\n        assert.logError(`Setting property \"${toString(key)}\" of ${toString(target)} during the rendering process of ${vmBeingRendered} is invalid. The render phase must have no side effects on the state of any component.`);\n        return false;\n    }\n    const oldValue = target[key];\n    if (oldValue !== value) {\n        target[key] = value;\n        notifyListeners(target, key);\n    } else if (key === 'length' && isArray(target)) {\n        // fix for issue #236: push will add the new index, and by the time length\n        // is updated, the internal length is already equal to the new length value\n        // therefore, the oldValue is equal to the value. This is the forking logic\n        // to support this use case.\n        notifyListeners(target, key);\n    }\n    return true;\n}\n\nfunction propertyDelete(target: Object, key: string | Symbol): boolean {\n    delete target[key];\n    notifyListeners(target, key);\n    return true;\n}\n\nconst propertyProxyHandler: ProxyHandler<Replicable> = {\n    get: propertyGetter,\n    set: propertySetter,\n    deleteProperty: propertyDelete,\n    apply(target: any/*, thisArg: any, argArray?: any*/) {\n        assert.fail(`invalid call invocation for property proxy ${target}`);\n    },\n    construct(target: any/*, argArray: any, newTarget?: any*/) {\n        assert.fail(`invalid construction invocation for property proxy ${target}`);\n    },\n};\n\nexport function getPropertyProxy(value: Replicable | any): Replica | any {\n    assert.isTrue(isObject(value), \"perf-optimization: avoid calling this method for non-object value.\");\n\n    // TODO: Provide a holistic way to deal with built-ins, right now we just care ignore Date\n    if (isNull(value) || value.constructor === Date) {\n        return value;\n    }\n\n    value = unwrap(value);\n\n    assert.block(function devModeCheck() {\n        const isNode = value instanceof Node;\n        assert.invariant(!isNode, `Do not store references to DOM Nodes. Instead use \\`this.querySelector()\\` and \\`this.querySelectorAll()\\` to find the nodes when needed.`);\n    });\n\n    let proxy = ReplicableToReplicaMap.get(value);\n    if (proxy) {\n        return proxy;\n    }\n    proxy = new XProxy(value, propertyProxyHandler);\n    ReplicableToReplicaMap.set(value, proxy);\n    return proxy;\n}\n","import assert from \"./assert\";\nimport { OwnerKey } from \"./vm\";\nimport { Services } from \"./services\";\nimport { getReplica, Membrane } from \"./membrane\";\n\n/* eslint-disable */\nimport { Replicable, ReplicableFunction, MembraneHandler } from \"./membrane\";\n/* eslint-enable */\n\nfunction piercingHook(membrane: Membrane, target: Replicable, key: string | Symbol, value: any): any {\n    const { handler: { vm } } = membrane;\n    assert.vm(vm);\n    const { piercing } = Services;\n    if (piercing) {\n        const { component, vnode: { data }, def, context } = vm;\n        let result = value;\n        let next = true;\n        const callback = (newValue?: any) => {\n            next = false;\n            result = newValue;\n        };\n        for (let i = 0, len = piercing.length; next && i < len; ++i) {\n            piercing[i].call(undefined, component, data, def, context, target, key, value, callback);\n        }\n        return result === value ? getReplica(membrane, result) : result;\n    }\n}\n\nexport class PiercingMembraneHandler implements MembraneHandler {\n    vm: VM; // eslint-disable-line no-undef\n    constructor(vm: VM) {\n        assert.vm(vm);\n        this.vm = vm;\n    }\n    get(membrane: Membrane, target: Replicable, key: string | Symbol): any {\n        if (key === OwnerKey) {\n            return undefined;\n        }\n        let value = target[key];\n        return piercingHook(membrane, target, key, value);\n    }\n    set(membrane: Membrane, target: Replicable, key: string, newValue: any): boolean {\n        target[key] = newValue;\n        return true;\n    }\n    deleteProperty(membrane: Membrane, target: Replicable, key: string | Symbol): boolean {\n        delete target[key];\n        return true;\n    }\n    apply(membrane: Membrane, targetFn: ReplicableFunction, thisArg: any, argumentsList: Array<any>): any {\n        return getReplica(membrane, targetFn.apply(thisArg, argumentsList));\n    }\n    construct(membrane: Membrane, targetFn: ReplicableFunction, argumentsList: Array<any>, newTarget: any): any {\n        assert.isTrue(newTarget, `construct handler expects a 3rd argument with a newly created object that will be ignored in favor of the wrapped constructor.`);\n        return getReplica(membrane, new targetFn(...argumentsList));\n    }\n}\n\nexport function pierce(vm: VM, value: Replicable | any): any {\n    assert.vm(vm);\n    let { membrane } = vm;\n    if (!membrane) {\n        const handler = new PiercingMembraneHandler(vm);\n        membrane = new Membrane(handler);\n        vm.membrane = membrane;\n    }\n    return getReplica(membrane, value);\n}\n","import assert from \"./assert\";\nimport {\n    invokeComponentConstructor,\n    invokeComponentRenderMethod,\n    isRendering,\n    vmBeingRendered,\n    invokeComponentAttributeChangedCallback,\n    invokeComponentMethod,\n    invokeComponentCallback,\n} from \"./invoker\";\nimport { notifyListeners } from \"./watcher\";\nimport { isArray, isUndefined, create, toString, ArrayPush, ArrayIndexOf, ArraySplice, isObject, defineProperties } from \"./language\";\nimport { addCallbackToNextTick, getAttrNameFromPropName, noop } from \"./utils\";\nimport { getPropertyProxy } from \"./properties\";\nimport { invokeServiceHook, Services } from \"./services\";\nimport { pierce } from \"./piercing\";\n\nexport let vmBeingConstructed: VM | null = null;\n\nexport function isBeingConstructed(vm: VM): boolean {\n    assert.vm(vm);\n    return vmBeingConstructed === vm;\n}\n\nexport function createComponent(vm: VM, Ctor: Class<Component>) {\n    assert.vm(vm);\n    // create the component instance\n    const vmBeingConstructedInception = vmBeingConstructed;\n    vmBeingConstructed = vm;\n    const component = invokeComponentConstructor(vm, Ctor);\n    vmBeingConstructed = vmBeingConstructedInception;\n    assert.isTrue(vm.component === component, `Invalid construction for ${vm}, maybe you are missing the call to super() on classes extending Element.`);\n}\n\nexport function linkComponent(vm: VM) {\n    assert.vm(vm);\n    const {\n        vnode: { elm },\n        component,\n        def: { methods: publicMethodsConfig, props: publicProps }\n    } = vm;\n    const descriptors: PropertyDescriptorMap = {};\n    // expose public methods as props on the Element\n    for (let key in publicMethodsConfig) {\n        const getter = (function (component: Component, key: string, ...args: any[]): any {\n            return component[key].apply(component, args);\n        }).bind(undefined, component, key);\n        descriptors[key] = {\n            get: () => getter\n        };\n    }\n    for (let key in publicProps) {\n        let {\n            getter,\n        } = publicProps[key];\n        if (isUndefined(getter)) {\n            // default getter\n            getter = (function runGetter(vm: VM, key: string): any {\n                return this[key];\n            }).bind(component, vm, key);\n        } else {\n            // original getter\n            getter = getter.bind(component);\n        }\n\n        const setter = (function runSetter(vm: VM, key: string, value: any): any {\n            if (vm.vnode.isRoot) {\n                // logic for setting new properties of the element directly from the DOM\n                // will only be allowed for root elements created via createElement()\n                // proxifying before storing it is a must for public props\n                value = isObject(value) ? getPropertyProxy(value) : value;\n                updateComponentProp(vm, key, value);\n            } else {\n                assert.logError(`Invalid attempt to set property ${key} from ${vm} to a new value. This property was decorated with @api, and can only be changed via the template.`);\n            }\n        }).bind(component, vm, key);\n\n        descriptors[key] = {\n            get: getter,\n            set: setter,\n        };\n    }\n    defineProperties(elm, descriptors);\n    // wiring service\n    const { def: { wire } } = vm;\n    if (wire) {\n        const { wiring } = Services;\n        if (wiring) {\n            invokeServiceHook(vm, wiring);\n        }\n    }\n}\n\nexport function clearListeners(vm: VM) {\n    assert.vm(vm);\n    const { deps } = vm;\n    const len = deps.length;\n    if (len) {\n        for (let i = 0; i < len; i += 1) {\n            const set = deps[i];\n            const pos = ArrayIndexOf.call(deps[i], vm);\n            assert.invariant(pos > -1, `when clearing up deps, the vm must be part of the collection.`);\n            ArraySplice.call(set, pos, 1);\n        }\n        deps.length = 0;\n    }\n}\n\nexport function updateComponentProp(vm: VM, propName: string, newValue: any) {\n    assert.vm(vm);\n    const { cmpProps, def: { props: publicProps, observedAttrs } } = vm;\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of ${vm}.${propName}`);\n    const propDef: PropDef = publicProps[propName];\n    if (isUndefined(propDef)) {\n        // TODO: this should never really happen because the compiler should always validate\n        console.warn(`Ignoring unknown public property ${propName} of ${vm}. This is likely a typo on the corresponding attribute \"${getAttrNameFromPropName(propName)}\".`);\n        return;\n    }\n    assert.isFalse(propDef.getter && !propDef.setter, `Invalid attempt to set a new value for property ${propName} of ${vm} that does not has a setter.`);\n    const { setter } = propDef;\n    if (setter) {\n        setter.call(vm.component, newValue);\n        return;\n    }\n    let oldValue = cmpProps[propName];\n    if (oldValue !== newValue) {\n        assert.block(function devModeCheck() {\n            if (isObject(newValue)) {\n                assert.invariant(getPropertyProxy(newValue) === newValue, `updateComponentProp() should always received proxified object values instead of ${newValue} in ${vm}.`);\n            }\n        });\n        cmpProps[propName] = newValue;\n        const attrName = getAttrNameFromPropName(propName);\n        if (attrName in observedAttrs) {\n            invokeComponentAttributeChangedCallback(vm, attrName, oldValue, newValue);\n        }\n        notifyListeners(cmpProps, propName);\n    }\n}\n\nexport function resetComponentProp(vm: VM, propName: string) {\n    assert.vm(vm);\n    const { cmpProps, def: { props: publicPropsConfig, observedAttrs } } = vm;\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of ${vm}.${propName}`);\n    const propDef: PropDef = publicPropsConfig[propName];\n    if (isUndefined(propDef)) {\n        // not need to log the error here because we will do it on updateComponentProp()\n        return;\n    }\n    let newValue = undefined;\n    const { setter } = propDef;\n    if (setter) {\n        setter.call(vm.component, newValue);\n        return;\n    }\n    let oldValue = cmpProps[propName];\n    if (oldValue !== newValue) {\n        cmpProps[propName] = newValue;\n        const attrName = getAttrNameFromPropName(propName);\n        if (attrName in observedAttrs) {\n            invokeComponentAttributeChangedCallback(vm, attrName, oldValue, newValue);\n        }\n        notifyListeners(cmpProps, propName);\n    }\n}\n\nexport function createComponentListener(): EventListener {\n    return function handler(event: Event) {\n        dispatchComponentEvent(handler.vm, event);\n    }\n}\n\nexport function addComponentEventListener(vm: VM, eventName: string, newHandler: EventListener) {\n    assert.vm(vm);\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of ${vm} by adding a new event listener for \"${eventName}\".`);\n    let { cmpEvents, cmpListener } = vm;\n    if (isUndefined(cmpEvents)) {\n        // this piece of code must be in sync with modules/component-events\n        vm.cmpEvents = cmpEvents = create(null);\n        vm.cmpListener = cmpListener = createComponentListener();\n        cmpListener.vm = vm;\n    }\n    if (isUndefined(cmpEvents[eventName])) {\n        cmpEvents[eventName] = [];\n        // this is not only an optimization, it is also needed to avoid adding the same\n        // listener twice when the initial diffing algo kicks in without an old vm to track\n        // what was already added to the DOM.\n        if (!vm.isDirty) {\n            // if the element is already in the DOM and rendered, we intentionally make a sync mutation\n            // here and also keep track of the mutation for a possible rehydration later on without having\n            // to rehydrate just now.\n            const { vnode: { elm } } = vm;\n            elm.addEventListener(eventName, cmpListener, false);\n        }\n    }\n    assert.block(function devModeCheck() {\n        if (cmpEvents[eventName] && ArrayIndexOf.call(cmpEvents[eventName], newHandler) !== -1) {\n            assert.logWarning(`${vm} has duplicate listeners for event \"${eventName}\". Instead add the event listener in the connectedCallback() hook.`);\n        }\n    });\n    ArrayPush.call(cmpEvents[eventName], newHandler);\n}\n\nexport function removeComponentEventListener(vm: VM, eventName: string, oldHandler: EventListener) {\n    assert.vm(vm);\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of ${vm} by removing an event listener for \"${eventName}\".`);\n    const { cmpEvents } = vm;\n    if (cmpEvents) {\n        const handlers = cmpEvents[eventName];\n        const pos = handlers && ArrayIndexOf.call(handlers, oldHandler);\n        if (handlers && pos > -1) {\n            ArraySplice.call(cmpEvents[eventName], pos, 1);\n            return;\n        }\n    }\n    assert.block(function devModeCheck() {\n        assert.logWarning(`Did not find event listener ${oldHandler} for event \"${eventName}\" on ${vm}. Instead only remove an event listener once.`);\n    });\n}\n\nexport function dispatchComponentEvent(vm: VM, event: Event): boolean {\n    assert.vm(vm);\n    assert.invariant(event instanceof Event, `dispatchComponentEvent() must receive an event instead of ${event}`);\n    const { cmpEvents, component } = vm;\n    const { type } = event;\n    assert.invariant(cmpEvents && cmpEvents[type] && cmpEvents[type].length, `dispatchComponentEvent() should only be invoked if there is at least one listener in queue for ${type} on ${vm}.`);\n    const handlers = cmpEvents[type];\n    let uninterrupted = true;\n    const { stopImmediatePropagation } = event;\n    event.stopImmediatePropagation = function() {\n        uninterrupted = false;\n        stopImmediatePropagation.call(this);\n    }\n    const e = pierce(vm, event);\n    for (let i = 0, len = handlers.length; uninterrupted && i < len; i += 1) {\n        // TODO: only if the event is `composed` it can be dispatched\n        invokeComponentCallback(vm, handlers[i], component, [e]);\n    }\n    // restoring original methods\n    event.stopImmediatePropagation = stopImmediatePropagation;\n}\n\nexport function addComponentSlot(vm: VM, slotName: string, newValue: Array<VNode>) {\n    assert.vm(vm);\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of slot ${slotName} in ${vm}`);\n    assert.isTrue(isArray(newValue) && newValue.length > 0, `Slots can only be set to a non-empty array, instead received ${toString(newValue)} for slot ${slotName} in ${vm}.`)\n    let { cmpSlots } = vm;\n    let oldValue = cmpSlots && cmpSlots[slotName];\n    // TODO: hot-slots names are those slots used during the last rendering cycle, and only if\n    // one of those is changed, the vm should be marked as dirty.\n\n    // TODO: Issue #133\n    if (!isArray(newValue)) {\n        newValue = undefined;\n    }\n    if (oldValue !== newValue) {\n        if (isUndefined(cmpSlots)) {\n            vm.cmpSlots = cmpSlots = create(null);\n        }\n        cmpSlots[slotName] = newValue;\n        console.log(`Marking ${vm} as dirty: a new value for slot \"${slotName}\" was added.`);\n        if (!vm.isDirty) {\n            markComponentAsDirty(vm);\n        }\n    }\n}\n\nexport function removeComponentSlot(vm: VM, slotName: string) {\n    assert.vm(vm);\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of slot ${slotName} in ${vm}`);\n    // TODO: hot-slots names are those slots used during the last rendering cycle, and only if\n    // one of those is changed, the vm should be marked as dirty.\n    const { cmpSlots } = vm;\n    if (cmpSlots && cmpSlots[slotName]) {\n        cmpSlots[slotName] = undefined; // delete will de-opt the cmpSlots, better to set it to undefined\n        console.log(`Marking ${vm} as dirty: the value of slot \"${slotName}\" was removed.`);\n        if (!vm.isDirty) {\n            markComponentAsDirty(vm);\n        }\n    }\n}\n\nexport function renderComponent(vm: VM) {\n    assert.vm(vm);\n    assert.invariant(vm.isDirty, `${vm} is not dirty.`);\n    console.log(`${vm} is being updated.`);\n    clearListeners(vm);\n    const vnodes = invokeComponentRenderMethod(vm);\n    vm.isDirty = false;\n    vm.fragment = vnodes;\n    assert.invariant(isArray(vnodes), `${vm}.render() should always return an array of vnodes instead of ${vnodes}`);\n    const { component: { renderedCallback } } = vm;\n    if (renderedCallback && renderedCallback !== noop) {\n        addCallbackToNextTick((): void => invokeComponentMethod(vm, 'renderedCallback'));\n    }\n    const { rehydrated } = Services;\n    if (rehydrated) {\n        addCallbackToNextTick((): void => invokeServiceHook(vm, rehydrated));\n    }\n}\n\nexport function markComponentAsDirty(vm: VM) {\n    assert.vm(vm);\n    assert.isFalse(vm.isDirty, `markComponentAsDirty() for ${vm} should not be called when the componet is already dirty.`);\n    assert.isFalse(isRendering, `markComponentAsDirty() for ${vm} cannot be called during rendering of ${vmBeingRendered}.`);\n    vm.isDirty = true;\n}\n","import assert from \"./assert\";\nimport { ViewModelReflection } from \"./html-element\";\nimport { ArrayFilter, defineProperty } from \"./language\";\nimport { isBeingConstructed } from \"./component\";\nimport { OwnerKey, isNodeOwnedByVM } from \"./vm\";\nimport { register } from \"./services\";\nimport { pierce } from \"./piercing\";\n\nconst { querySelector, querySelectorAll } = Element.prototype;\n\nfunction getLinkedElement(root: Root): HTMLElement {\n    return root[ViewModelReflection].vnode.elm;\n}\n\nexport function shadowRootQuerySelector (shadowRoot: ShadowRoot, selector: string): MembraneObject | null {\n    const vm = shadowRoot[ViewModelReflection];\n    assert.isFalse(isBeingConstructed(vm), `this.root.querySelector() cannot be called during the construction of the custom element for ${this} because no content has been rendered yet.`);\n    const elm = getLinkedElement(shadowRoot);\n    return pierce(vm, elm).querySelector(selector);\n}\n\nexport function shadowRootQuerySelectorAll (shadowRoot: ShadowRoot, selector: string): MembraneObject {\n    const vm = shadowRoot[ViewModelReflection];\n    assert.isFalse(isBeingConstructed(vm), `this.root.querySelectorAll() cannot be called during the construction of the custom element for ${this} because no content has been rendered yet.`);\n    const elm = getLinkedElement(shadowRoot);\n    return pierce(vm, elm).querySelectorAll(selector);\n}\n\nexport function Root(vm: VM): ShadowRoot {\n    assert.vm(vm);\n    defineProperty(this, ViewModelReflection, {\n        value: vm,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n    });\n}\n\nRoot.prototype = {\n    get mode(): string {\n        return 'closed';\n    },\n    get host(): Component {\n        return this[ViewModelReflection].component;\n    },\n    querySelector(selector: string): MembraneObject | null {\n        const node = shadowRootQuerySelector(this, selector);\n        assert.block(() => {\n            const vm = this[ViewModelReflection];\n            if (!node && vm.component.querySelector(selector)) {\n                assert.logWarning(`this.root.querySelector() can only return elements from the template declaration of ${vm.component}. It seems that you are looking for elements that were passed via slots, in which case you should use this.querySelector() instead.`);\n            }\n        });\n        return node;\n    },\n    querySelectorAll(selector: string): MembraneObject {\n        const nodeList = shadowRootQuerySelectorAll(this, selector);\n        assert.block(() => {\n            const vm = this[ViewModelReflection];\n            if (nodeList.length === 0 && vm.component.querySelectorAll(selector).length) {\n                assert.logWarning(`this.root.querySelectorAll() can only return elements from template declaration of ${vm.component}. It seems that you are looking for elements that were passed via slots, in which case you should use this.querySelectorAll() instead.`);\n            }\n        });\n        return nodeList;\n    },\n    toString(): string {\n        const vm = this[ViewModelReflection];\n        return `Current ShadowRoot for ${vm.component}`;\n    }\n};\n\nfunction getFirstMatch(vm: VM, elm: Element, selector: string): Node | null {\n    const nodeList = querySelectorAll.call(elm, selector);\n    // search for all, and find the first node that is owned by the VM in question.\n    for (let i = 0, len = nodeList.length; i < len; i += 1) {\n        if (isNodeOwnedByVM(vm, nodeList[i])) {\n            return pierce(vm, nodeList[i]);\n        }\n    }\n    return null;\n}\n\nfunction getAllMatches(vm: VM, elm: Element, selector: string): NodeList {\n    const nodeList = querySelectorAll.call(elm, selector);\n    const filteredNodes = ArrayFilter.call(nodeList, (node: Node): boolean => isNodeOwnedByVM(vm, node));\n    return pierce(vm , filteredNodes);\n}\n\nfunction isParentNodeKeyword(key: string | Symbol): boolean {\n    return (key === 'parentNode' || key === 'parentElement');\n}\n\n// Registering a service to enforce the shadowDOM semantics via the Raptor membrane implementation\nregister({\n    piercing(component: Component, data: VNodeData, def: ComponentDef, context: HashTable<any>, target: Replicable, key: Symbol | string, value: any, callback: (value?: any) => void) {\n        const vm: VM = component[ViewModelReflection];\n        const { elm } = (vm.vnode as ComponentVNode); // eslint-disable-line no-undef\n        if (value) {\n            if (value === querySelector) {\n                // TODO: it is possible that they invoke the querySelector() function via call or apply to set a new context, what should\n                // we do in that case? Right now this is essentially a bound function, but the original is not.\n                return callback((selector: string): Node | null => getFirstMatch(vm, target, selector));\n            }\n            if (value === querySelectorAll) {\n                // TODO: it is possible that they invoke the querySelectorAll() function via call or apply to set a new context, what should\n                // we do in that case? Right now this is essentially a bound function, but the original is not.\n                return callback((selector: string): NodeList => getAllMatches(vm, target, selector));\n            }\n            if (isParentNodeKeyword(key)) {\n                if (value === elm) {\n                    // walking up via parent chain might end up in the shadow root element\n                    return callback(component.root);\n                } else if (target[OwnerKey] !== value[OwnerKey]) {\n                    // cutting out access to something outside of the shadow of the current target (usually slots)\n                    return callback();\n                }\n            }\n            if (value === elm) {\n                // prevent access to the original Host element\n                return callback(component);\n            }\n        }\n    }\n});\n","import assert from \"./assert\";\nimport { ClassList } from \"./class-list\";\nimport { Root, shadowRootQuerySelector, shadowRootQuerySelectorAll } from \"./root\";\nimport { vmBeingConstructed, isBeingConstructed, addComponentEventListener, removeComponentEventListener } from \"./component\";\nimport { ArrayFilter, isArray, freeze, seal, defineProperty, getOwnPropertyNames, isUndefined, isObject, create } from \"./language\";\nimport { getPropertyProxy } from \"./properties\";\nimport { GlobalHTMLProperties } from \"./dom\";\nimport { getPropNameFromAttrName, noop, toAttributeValue } from \"./utils\";\nimport { isRendering, vmBeingRendered } from \"./invoker\";\nimport { subscribeToSetHook, notifyListeners } from \"./watcher\";\nimport { wasNodePassedIntoVM } from \"./vm\";\nimport { pierce } from \"./piercing\";\n\nexport const ViewModelReflection = Symbol('internal');\n\nfunction getLinkedElement(cmp: ComponentElement): HTMLElement {\n    return cmp[ViewModelReflection].vnode.elm;\n}\n\nfunction querySelectorAllFromComponent(cmp: ComponentElement, selectors: string): NodeList {\n    const elm = getLinkedElement(cmp);\n    return elm.querySelectorAll(selectors);\n}\n\nexport function createPublicPropertyDescriptor(propName: string, originalPropertyDescriptor?: PropertyDescriptor): PropertyDescriptor {\n    function getter(): any {\n        const vm: VM = this[ViewModelReflection];\n        assert.vm(vm);\n        const { propName, origGetter } = getter;\n        if (isBeingConstructed(vm)) {\n            assert.logError(`${vm} constructor should not read the value of property \"${propName}\". The owner component has not yet set the value. Instead use the constructor to set default values for properties.`);\n            return;\n        }\n        if (origGetter) {\n            return origGetter.call(vm.component);\n        }\n        const { cmpProps } = vm;\n        if (isRendering) {\n            // this is needed because the proxy used by template is not sufficient\n            // for public props accessed from within a getter in the component.\n            subscribeToSetHook(vmBeingRendered, cmpProps, propName);\n        }\n        return cmpProps[propName];\n    }\n    getter.propName = propName;\n    getter.origGetter = originalPropertyDescriptor && originalPropertyDescriptor.get;\n\n    function setter(value: any) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        const { propName, origSetter } = setter;\n        if (!isBeingConstructed(vm)) {\n            assert.logError(`${vm} can only set a new value for property \"${propName}\" during construction.`);\n            return;\n        }\n        if (origSetter) {\n            origSetter.call(vm.component, value);\n            return;\n        }\n        const { cmpProps } = vm;\n        // proxifying before storing it is a must for public props\n        cmpProps[propName] = isObject(value) ? getPropertyProxy(value) : value;\n    }\n    setter.propName = propName;\n    setter.origSetter = originalPropertyDescriptor && originalPropertyDescriptor.set;\n\n    const descriptor: PropertyDescriptor = {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true,\n    };\n    return descriptor;\n}\n\n\nexport function createWiredPropertyDescriptor(propName: string): PropertyDescriptor {\n    function getter(): HashTable<any> {\n        const vm: VM = this[ViewModelReflection];\n        assert.vm(vm);\n        let { cmpWired } = vm;\n        if (isUndefined(cmpWired)) {\n            cmpWired = vm.cmpWired = getPropertyProxy(create(null)); // lazy creation of the value\n        }\n        let value = cmpWired[propName];\n        if (isRendering) {\n            // this is needed because the proxy used by template is not sufficient\n            // for public props accessed from within a getter in the component.\n            subscribeToSetHook(vmBeingRendered, cmpWired, propName);\n        }\n        return value;\n    }\n    function setter(value: any) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        if (!value || !isObject(value)) {\n            assert.logError(`${vm} failed to set new value into property \"${propName}\". It can only be set to an object.`);\n            return;\n        }\n        let { cmpWired } = vm;\n        if (isUndefined(cmpWired)) {\n            cmpWired = vm.cmpWired = getPropertyProxy(create(null)); // lazy creation of the value\n        }\n        cmpWired[propName] = isObject(value) ? getPropertyProxy(value) : value;\n        notifyListeners(cmpWired, propName);\n    }\n    const descriptor: PropertyDescriptor = {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true,\n    };\n    return descriptor;\n}\n\n// This should be as performant as possible, while any initialization should be done lazily\nfunction ComponentElement(): ComponentElement {\n    assert.vm(vmBeingConstructed, `Invalid construction.`);\n    assert.vnode(vmBeingConstructed.vnode, `Invalid construction.`);\n    const vnode = vmBeingConstructed.vnode;\n    assert.invariant(vnode.elm instanceof HTMLElement, `Component creation requires a DOM element to be associated to ${vnode}.`);\n    vmBeingConstructed.component = this;\n    this[ViewModelReflection] = vmBeingConstructed;\n}\n\nComponentElement.prototype = {\n    // Raptor.Element APIs\n    renderedCallback: noop,\n    render: noop,\n\n    // Web Component - The Good Parts\n    connectedCallback: noop,\n    disconnectedCallback: noop,\n\n    // HTML Element - The Good Parts\n    dispatchEvent(event: Event): boolean {\n        const elm = getLinkedElement(this);\n        assert.isFalse(isBeingConstructed(this[ViewModelReflection]), `this.dispatchEvent() should not be called during the construction of the custom element for ${this} because no one is listening for the event ${event} just yet.`);\n        // custom elements will rely on the DOM dispatchEvent mechanism\n        return elm.dispatchEvent(event);\n    },\n    addEventListener(type: string, listener: EventListener) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        assert.block(function devModeCheck() {\n            if (arguments.length > 2) {\n                // TODO: can we synthetically implement `passive` and `once`? Capture is probably ok not supporting it.\n                assert.logWarning(`this.addEventListener() on ${vm} does not support more than 2 arguments. Options to make the listener passive, once or capture are not allowed at the top level of the component's fragment.`);\n            }\n        });\n        addComponentEventListener(vm, type, listener);\n    },\n    removeEventListener(type: string, listener: EventListener) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        assert.block(function devModeCheck() {\n            if (arguments.length > 2) {\n                assert.logWarning(`this.removeEventListener() on ${vm} does not support more than 2 arguments. Options to make the listener passive or capture are not allowed at the top level of the component's fragment.`);\n            }\n        });\n        removeComponentEventListener(vm, type, listener);\n    },\n    getAttribute(attrName: string): string | null {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        const { vnode: { data: { attrs } } } = vm;\n        if (!attrName) {\n            if (arguments.length === 0) {\n                throw new TypeError(`Failed to execute \\`getAttribute\\` on ${vm}: 1 argument is required, got 0.`);\n            }\n            return null;\n        }\n        // logging errors for experimentals and special attributes\n        assert.block(function devModeCheck() {\n            const propName = getPropNameFromAttrName(attrName);\n            const { def: { props: publicPropsConfig } } = vm;\n            if (publicPropsConfig[propName]) {\n                throw new ReferenceError(`Attribute \"${attrName}\" corresponds to public property ${propName} from ${vm}. Instead use \\`this.${propName}\\`. Only use \\`getAttribute()\\` to access global HTML attributes.`);\n            } else if (GlobalHTMLProperties[propName] && GlobalHTMLProperties[propName].attribute) {\n                const { error, experimental } = GlobalHTMLProperties[propName];\n                if (error) {\n                    console.error(error);\n                } else if (experimental) {\n                    console.error(`Attribute \\`${attrName}\\` is an experimental attribute that is not standardized or supported by all browsers. Property \"${propName}\" and attribute \"${attrName}\" are ignored.`);\n                }\n            }\n        });\n        // normalizing attrs from compiler into HTML global attributes\n        let raw = attrs && attrName in attrs ? attrs[attrName] : null;\n        return toAttributeValue(raw);\n    },\n    getBoundingClientRect(): DOMRect {\n        const elm = getLinkedElement(this);\n        assert.isFalse(isBeingConstructed(this[ViewModelReflection]), `this.getBoundingClientRect() should not be called during the construction of the custom element for ${this} because the element is not yet in the DOM, instead, you can use it in one of the available life-cycle hooks.`);\n        return elm.getBoundingClientRect();\n    },\n    querySelector(selectors: string): Node | null {\n        const vm = this[ViewModelReflection];\n        assert.isFalse(isBeingConstructed(vm), `this.querySelector() cannot be called during the construction of the custom element for ${this} because no children has been added to this element yet.`);\n        const nodeList = querySelectorAllFromComponent(this, selectors);\n        for (let i = 0, len = nodeList.length; i < len; i += 1) {\n            if (wasNodePassedIntoVM(vm, nodeList[i])) {\n                // TODO: locker service might need to return a membrane proxy\n                return pierce(vm, nodeList[i]);\n            }\n        }\n        assert.block(() => {\n            if (shadowRootQuerySelector(this.root, selectors)) {\n                assert.logWarning(`this.querySelector() can only return elements that were passed into ${vm.component} via slots. It seems that you are looking for elements from your template declaration, in which case you should use this.root.querySelector() instead.`);\n            }\n        });\n\n        return null;\n    },\n    querySelectorAll(selectors: string): NodeList {\n        const vm = this[ViewModelReflection];\n        assert.isFalse(isBeingConstructed(vm), `this.querySelectorAll() cannot be called during the construction of the custom element for ${this} because no children has been added to this element yet.`);\n        const nodeList = querySelectorAllFromComponent(this, selectors);\n        // TODO: locker service might need to do something here\n        const filteredNodes = ArrayFilter.call(nodeList, (node: Node): boolean => wasNodePassedIntoVM(vm, node));\n        assert.block(() => {\n            if (filteredNodes.length === 0 && shadowRootQuerySelectorAll(this.root, selectors).length) {\n                assert.logWarning(`this.querySelectorAll() can only return elements that were passed into ${vm.component} via slots. It seems that you are looking for elements from your template declaration, in which case you should use this.root.querySelectorAll() instead.`);\n            }\n        });\n        return pierce(vm, filteredNodes);\n    },\n    get tagName(): string {\n        const elm = getLinkedElement(this);\n        return elm.tagName + ''; // avoiding side-channeling\n    },\n    get tabIndex(): number {\n        const elm = getLinkedElement(this);\n        return elm.tabIndex;\n    },\n    set tabIndex(value: number) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        assert.isFalse(isRendering, `Setting property \"tabIndex\" of ${toString(value)} during the rendering process of ${vmBeingRendered} is invalid. The render phase must have no side effects on the state of any component.`);\n\n        if (isBeingConstructed(vm)) {\n            assert.fail(`Setting property \"tabIndex\" during the construction process of ${vm} is invalid.`);\n            return;\n        }\n\n        const elm = getLinkedElement(this);\n        elm.tabIndex = value;\n    },\n    get classList(): DOMTokenList {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        let { classListObj } = vm;\n        // lazy creation of the ClassList Object the first time it is accessed.\n        if (isUndefined(classListObj)) {\n            vm.cmpClasses = {};\n            classListObj = new ClassList(vm);\n            vm.classListObj = classListObj;\n        }\n        return classListObj;\n    },\n    get root(): ShadowRoot {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        let { cmpRoot } = vm;\n        // lazy creation of the ShadowRoot Object the first time it is accessed.\n        if (isUndefined(cmpRoot)) {\n            cmpRoot = new Root(vm);\n            vm.cmpRoot = cmpRoot;\n        }\n        return cmpRoot;\n    },\n    get state(): HashTable<any> {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        let { cmpState } = vm;\n        if (isUndefined(cmpState)) {\n            cmpState = vm.cmpState = getPropertyProxy(create(null)); // lazy creation of the cmpState\n        }\n        return cmpState;\n    },\n    set state(newState: HashTable<any>) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        if (!newState || !isObject(newState) || isArray(newState)) {\n            assert.logError(`${vm} failed to set new state to ${newState}. \\`this.state\\` can only be set to an object.`);\n            return;\n        }\n        vm.cmpState = getPropertyProxy(newState); // lazy creation of the cmpState\n    },\n    toString(): string {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        const { vnode: { sel, data: { attrs } } } = vm;\n        const is = attrs && attrs.is;\n        return `<${sel}${ is ? ' is=\"${is}' : '' }>`;\n    },\n}\n\n// Global HTML Attributes\nassert.block(function devModeCheck() {\n\n    getOwnPropertyNames(GlobalHTMLProperties).forEach((propName: string) => {\n        if (propName in ComponentElement.prototype) {\n            return; // no need to redefine something that we are already exposing\n        }\n        defineProperty(ComponentElement.prototype, propName, {\n            get: function () {\n                const vm = this[ViewModelReflection];\n                assert.vm(vm);\n                const { error, attribute, readOnly, experimental } = GlobalHTMLProperties[propName];\n                const msg = [];\n                msg.push(`Accessing the global HTML property \"${propName}\" in ${vm} is disabled.`);\n                if (error) {\n                    msg.push(error);\n                } else {\n                    if (experimental) {\n                        msg.push(`This is an experimental property that is not standardized or supported by all browsers. Property \"${propName}\" and attribute \"${attribute}\" are ignored.`);\n                    }\n                    if (readOnly) {\n                        // TODO - need to improve this message\n                        msg.push(`Property is read-only.`);\n                    }\n                    if (attribute) {\n                        msg.push(`\"Instead access it via the reflective attribute \"${attribute}\" with one of these techniques:`);\n                        msg.push(`  * Use \\`this.getAttribute(\"${attribute}\")\\` to access the attribute value. This option is best suited for accessing the value in a getter during the rendering process.`);\n                        msg.push(`  * Declare \\`static observedAttributes = [\"${attribute}\"]\\` and use \\`attributeChangedCallback(attrName, oldValue, newValue)\\` to get a notification each time the attribute changes. This option is best suited for reactive programming, eg. fetching new data each time the attribute is updated.`);\n                    }\n                }\n                console.log(msg.join('\\n'));\n                return; // explicit undefined\n            },\n            enumerable: false,\n        })\n    });\n\n});\n\nfreeze(ComponentElement);\nseal(ComponentElement.prototype);\n\nexport { ComponentElement as Element };\n","/**\n * This module is responsible for producing the ComponentDef object that is always\n * accessible via `vm.def`. This is lazily created during the creation of the first\n * instance of a component class, and shared across all instances.\n *\n * This structure can be used to synthetically create proxies, and understand the\n * shape of a component. It is also used internally to apply extra optimizations.\n */\n\nimport assert from \"./assert\";\nimport {\n    assign,\n    freeze,\n    create,\n    ArrayIndexOf,\n    toString,\n    ArrayPush,\n    defineProperty,\n    getOwnPropertyDescriptor,\n    getOwnPropertyNames,\n    getPrototypeOf,\n    isString,\n    isFunction,\n    isUndefined,\n    isObject,\n} from \"./language\";\nimport { GlobalHTMLProperties } from \"./dom\";\nimport { Element, createPublicPropertyDescriptor, createWiredPropertyDescriptor } from \"./html-element\";\nimport { EmptyObject } from \"./utils\";\n\nconst CtorToDefMap: Map<any, ComponentDef> = new WeakMap();\n\nconst COMPUTED_GETTER_MASK = 1;\nconst COMPUTED_SETTER_MASK = 2;\n\nfunction isElementComponent(Ctor: any, protoSet?: Array<any>): boolean {\n    protoSet = protoSet || [];\n    if (!Ctor || ArrayIndexOf.call(protoSet, Ctor) >= 0) {\n        return false; // null, undefined, or circular prototype definition\n    }\n    const proto = getPrototypeOf(Ctor);\n    if (proto === Element) {\n        return true;\n    }\n    getComponentDef(proto); // ensuring that the prototype chain is already expanded\n    ArrayPush.call(protoSet, Ctor);\n    return isElementComponent(proto, protoSet);\n}\n\nfunction createComponentDef(Ctor: Class<Component>): ComponentDef {\n    assert.isTrue(isElementComponent(Ctor), `${Ctor} is not a valid component, or does not extends Element from \"engine\". You probably forgot to add the extend clause on the class declaration.`);\n    const name: string = Ctor.name;\n    assert.isTrue(name && isString(name), `${toString(Ctor)} should have a \"name\" property with string value, but found ${name}.`);\n    assert.isTrue(Ctor.constructor, `Missing ${name}.constructor, ${name} should have a \"constructor\" property.`);\n    let props = getPublicPropertiesHash(Ctor);\n    let methods = getPublicMethodsHash(Ctor);\n    let observedAttrs = getObservedAttributesHash(Ctor);\n    let wire = getWireHash(Ctor);\n\n    const proto = Ctor.prototype;\n    for (let propName in props) {\n        const propDef = props[propName];\n        // initializing getters and setters for each public prop on the target prototype\n        const descriptor = getOwnPropertyDescriptor(proto, propName);\n        const isComputed = descriptor && (isFunction(descriptor.get) || isFunction(descriptor.set));\n        assert.invariant(!descriptor || isComputed, `Invalid ${name}.prototype.${propName} definition, it cannot be a prototype definition if it is a public property. Instead use the constructor to define it.`);\n        const { config } = propDef;\n        if (COMPUTED_GETTER_MASK & config) {\n            assert.isTrue(isObject(descriptor) && isFunction(descriptor.get), `Missing getter for property ${propName} decorated with @api in ${name}`);\n            propDef.getter = descriptor.get;\n        }\n        if (COMPUTED_SETTER_MASK & config) {\n            assert.isTrue(isObject(descriptor) && isFunction(descriptor.set), `Missing setter for property ${propName} decorated with @api in ${name}`);\n            propDef.setter = descriptor.set;\n        }\n        defineProperty(proto, propName, createPublicPropertyDescriptor(propName, descriptor));\n    }\n\n    if (wire) {\n        for (let propName in wire) {\n            const descriptor = getOwnPropertyDescriptor(proto, propName);\n            // for decorated methods we need to do nothing\n            if (isUndefined(wire[propName].method)) {\n                // initializing getters and setters for each public prop on the target prototype\n                const isComputed = descriptor && (isFunction(descriptor.get) || isFunction(descriptor.set));\n                assert.invariant(!descriptor || isComputed, `Invalid ${name}.prototype.${propName} definition, it cannot be a prototype definition if it is a property decorated with the @wire decorator.`);\n                defineProperty(proto, propName, createWiredPropertyDescriptor(propName));\n            }\n        }\n    }\n\n    const superProto = getPrototypeOf(Ctor);\n    if (superProto !== Element) {\n        const superDef = getComponentDef(superProto);\n        props = assign(create(null), superDef.props, props);\n        methods = assign(create(null), superDef.methods, methods);\n        wire = (superDef.wire || wire) ? assign(create(null), superDef.wire, wire) : undefined;\n    }\n\n    const def: ComponentDef = {\n        name,\n        wire,\n        props,\n        methods,\n        observedAttrs,\n    };\n    assert.block(function devModeCheck() {\n        freeze(Ctor.prototype);\n        freeze(wire);\n        freeze(props);\n        freeze(methods);\n        freeze(observedAttrs);\n        for (let key in def) {\n            defineProperty(def, key, {\n                configurable: false,\n                writable: false,\n            });\n        }\n    });\n    return def;\n}\n\nfunction getWireHash(target: Object): HashTable<WireDef> | undefined {\n    const wire: HashTable = target.wire;\n    if (!wire || !getOwnPropertyNames(wire).length) {\n        return;\n    }\n\n    assert.block(function devModeCheck() {\n        // TODO: check that anything in `wire` is correctly defined in the prototype\n    });\n    return assign(create(null), wire);\n}\n\nfunction getPublicPropertiesHash(target: Object): HashTable<PropDef> {\n    const props: HashTable = target.publicProps;\n    if (!props || !getOwnPropertyNames(props).length) {\n        return EmptyObject;\n    }\n    return getOwnPropertyNames(props).reduce((propsHash: HashTable<PropDef>, propName: string): HashTable<PropDef> => {\n        assert.block(function devModeCheck() {\n            if (GlobalHTMLProperties[propName] && GlobalHTMLProperties[propName].attribute) {\n                const { error, attribute, experimental } = GlobalHTMLProperties[propName];\n                const msg = [];\n                if (error) {\n                    msg.push(error);\n                } else if (experimental) {\n                    msg.push(`\"${propName}\" is an experimental property that is not standardized or supported by all browsers. Property \"${propName}\" and attribute \"${attribute}\" are ignored.`);\n                } else {\n                    msg.push(`\"${propName}\" is a global HTML property. Instead access it via the reflective attribute \"${attribute}\" with one of these techniques:`);\n                    msg.push(`  * Use \\`this.getAttribute(\"${attribute}\")\\` to access the attribute value. This option is best suited for accessing the value in a getter during the rendering process.`);\n                    msg.push(`  * Declare \\`static observedAttributes = [\"${attribute}\"]\\` and use \\`attributeChangedCallback(attrName, oldValue, newValue)\\` to get a notification each time the attribute changes. This option is best suited for reactive programming, eg. fetching new data each time the attribute is updated.`);\n                }\n                console.error(msg.join('\\n'));\n            }\n        });\n\n        propsHash[propName] = assign({ config: 0 }, props[propName]);\n        return propsHash;\n    }, create(null));\n}\n\nfunction getPublicMethodsHash(target: Object): HashTable<number> {\n    const publicMethods = target.publicMethods;\n    if (!publicMethods || !publicMethods.length) {\n        return EmptyObject;\n    }\n    return publicMethods.reduce((methodsHash: HashTable<number>, methodName: string): HashTable => {\n        methodsHash[methodName] = 1;\n        assert.block(function devModeCheck() {\n            assert.isTrue(isFunction(target.prototype[methodName]), `Component \"${target.name}\" should have a method \\`${methodName}\\` instead of ${target.prototype[methodName]}.`);\n            freeze(target.prototype[methodName]);\n        });\n        return methodsHash;\n    }, create(null));\n}\n\nfunction getObservedAttributesHash(target: Object): HashTable<number> {\n    const observedAttributes = target.observedAttributes;\n    if (!observedAttributes || !observedAttributes.length) {\n        return EmptyObject;\n    }\n    return observedAttributes.reduce((observedAttributes: HashTable<number>, attrName: string): HashTable => {\n        observedAttributes[attrName] = 1;\n        return observedAttributes;\n    }, create(null));\n}\n\nexport function getComponentDef(Ctor: Class<Component>): ComponentDef {\n    let def = CtorToDefMap.get(Ctor);\n    if (def) {\n        return def;\n    }\n    def = createComponentDef(Ctor);\n    CtorToDefMap.set(Ctor, def);\n    return def;\n}\n","import assert from \"./assert\";\nimport { getComponentDef } from \"./def\";\nimport { createComponent, linkComponent } from \"./component\";\nimport { patch } from \"./patch\";\nimport { assign, isArray, toString, ArrayPush, isUndefined, keys } from \"./language\";\nimport { addCallbackToNextTick } from \"./utils\";\n\nlet idx: number = 0;\nlet uid: number = 0;\n\nexport const OwnerKey = Symbol('key');\n\nexport function addInsertionIndex(vm: VM) {\n    assert.vm(vm);\n    assert.invariant(vm.idx === 0, `${vm} is already locked to a previously generated idx.`);\n    vm.idx = ++idx;\n}\n\nexport function removeInsertionIndex(vm: VM) {\n    assert.vm(vm);\n    assert.invariant(vm.idx > 0, `${vm} is not locked to a previously generated idx.`);\n    vm.idx = 0;\n}\n\nexport function createVM(vnode: ComponentVNode) {\n    assert.vnode(vnode);\n    assert.invariant(vnode.elm instanceof HTMLElement, `VM creation requires a DOM element to be associated to vnode ${vnode}.`);\n    const { Ctor } = vnode;\n    const def = getComponentDef(Ctor);\n    console.log(`[object:vm ${def.name}] is being initialized.`);\n    uid += 1;\n    const vm: VM = {\n        uid,\n        idx: 0,\n        isScheduled: false,\n        isDirty: true,\n        def,\n        context: {},\n        cmpProps: {},\n        cmpWired: undefined,\n        cmpState: undefined,\n        cmpSlots: undefined,\n        cmpEvents: undefined,\n        cmpListener: undefined,\n        cmpClasses: undefined,\n        cmpTemplate: undefined,\n        cmpRoot: undefined,\n        classListObj: undefined,\n        component: undefined,\n        vnode,\n        // used to store the latest result of the render method\n        fragment: [],\n        // used to track down all object-key pairs that makes this vm reactive\n        deps: [],\n    };\n    assert.block(function devModeCheck() {\n        vm.toString = (): string => {\n            return `[object:vm ${def.name} (${vm.idx})]`;\n        };\n    });\n    vnode.vm = vm;\n    createComponent(vm, Ctor);\n    linkComponent(vm);\n    assert.block(function devModeCheck() {\n        const { component: { attributeChangedCallback }, def: { observedAttrs } } = vm;\n        if (observedAttrs.length && isUndefined(attributeChangedCallback)) {\n            console.warn(`${vm} has static observedAttributes set to [\"${keys(observedAttrs).join('\", \"')}\"] but it is missing the attributeChangedCallback() method to watch for changes on those attributes. Double check for typos on the name of the callback.`);\n        }\n    });\n    return vm;\n}\n\nexport function relinkVM(vm: VM, vnode: ComponentVNode) {\n    assert.vm(vm);\n    assert.vnode(vnode);\n    assert.isTrue(vnode.elm instanceof HTMLElement, `Only DOM elements can be linked to their corresponding component.`);\n    assert.invariant(vm.component, `vm.component is required to be defined before ${vm} gets linked to ${vnode}.`);\n    vnode.vm = vm;\n    vm.vnode = vnode;\n}\nexport function rehydrate(vm: VM) {\n    assert.vm(vm);\n    if (vm.idx && vm.isDirty) {\n        const { vnode } = vm;\n        assert.isTrue(vnode.elm instanceof HTMLElement, `rehydration can only happen after ${vm} was patched the first time.`);\n        assert.invariant(isArray(vnode.children), `Rendered ${vm}.children should always have an array of vnodes instead of ${toString(vnode.children)}`);\n        // when patch() is invoked from within the component life-cycle due to\n        // a dirty state, we create a new VNode (oldVnode) with the exact same data was used\n        // to patch this vnode the last time, mimic what happen when the\n        // owner re-renders, but we do so by keeping the vnode originally used by parent\n        // as the source of true, in case the parent tries to rehydrate against that one.\n        const oldVnode = assign({}, vnode);\n        vnode.children = [];\n        patch(oldVnode, vnode);\n    }\n    vm.isScheduled = false;\n}\n\nlet rehydrateQueue: Array<VM> = [];\n\nfunction flushRehydrationQueue() {\n    assert.invariant(rehydrateQueue.length, `If rehydrateQueue was scheduled, it is because there must be at least one VM on this pending queue instead of ${rehydrateQueue}.`);\n    const vms: Array<VM> = rehydrateQueue.sort((a: VM, b: VM): boolean => a.idx > b.idx);\n    rehydrateQueue = []; // reset to a new queue\n    for (let i = 0, len = vms.length; i < len; i += 1) {\n        rehydrate(vms[i]);\n    }\n}\n\nexport function scheduleRehydration(vm: VM) {\n    assert.vm(vm);\n    if (!vm.isScheduled) {\n        vm.isScheduled = true;\n        if (rehydrateQueue.length === 0) {\n            addCallbackToNextTick(flushRehydrationQueue);\n        }\n        ArrayPush.call(rehydrateQueue, vm);\n    }\n}\n\nexport function isNodeOwnedByVM(vm: VM, node: Node): boolean {\n    assert.vm(vm);\n    assert.invariant(node instanceof Node, `isNodeOwnedByVM() should be called with a node as the second argument instead of ${node}`);\n    assert.childNode(vm.vnode.elm, node, `isNodeOwnedByVM() should never be called with a node that is not a child node of ${vm}`);\n    // @ts-ignore\n    return node[OwnerKey] === vm.uid;\n}\n\nexport function wasNodePassedIntoVM(vm: VM, node: Node): boolean {\n    assert.vm(vm);\n    assert.invariant(node instanceof Node, `isNodePassedToVM() should be called with a node as the second argument instead of ${node}`);\n    assert.childNode(vm.vnode.elm, node, `isNodePassedToVM() should never be called with a node that is not a child node of ${vm}`);\n    const { vnode: { uid: ownerUid } } = vm;\n    // TODO: we need to walk the parent path here as well, in case they passed it via slots multiple times\n    // @ts-ignore\n    return node[OwnerKey] === ownerUid;\n}\n","import { createVM, relinkVM } from \"../vm\";\nimport assert from \"../assert\";\nimport { isUndefined } from \"../language\";\n\n// this hook will set up the component instance associated to the new vnode,\n// and link the new vnode with the corresponding component\nfunction initializeComponent(oldVnode: ComponentVNode, vnode: ComponentVNode) {\n    const { Ctor } = vnode;\n    if (isUndefined(Ctor)) {\n        return;\n    }\n    /**\n     * The reason why we do the initialization here instead of prepatch or any other hook\n     * is because the creation of the component does require the element to be available.\n     */\n    assert.invariant(vnode.elm, `${vnode}.elm should be ready.`);\n    if (oldVnode.vm && oldVnode.Ctor === Ctor) {\n        assert.invariant(vnode.elm === oldVnode.elm, `${vnode}.elm should always match the oldVnode's   element.`);\n        relinkVM(oldVnode.vm, vnode);\n    } else {\n        createVM(vnode);\n    }\n    assert.invariant(vnode.vm.component, `vm ${vnode.vm} should have a component and element associated to it.`);\n}\n\nexport default {\n    create: initializeComponent,\n    update: initializeComponent,\n};\n","import {\n    resetComponentProp,\n    updateComponentProp,\n} from \"../component\";\nimport { assign, isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction syncProps(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n\n    let { data: { _props: oldProps } } = oldVnode;\n    let { data: { _props: newProps } } = vnode;\n\n    // infuse key-value pairs from _props into the component\n    if (oldProps !== newProps && (oldProps || newProps)) {\n        let key: string, cur: any;\n        oldProps = oldProps || EmptyObject;\n        newProps = newProps || EmptyObject;\n        // removed props should be reset in component's props\n        for (key in oldProps) {\n            if (!(key in newProps)) {\n                resetComponentProp(vm, key);\n            }\n        }\n\n        // new or different props should be set in component's props\n        for (key in newProps) {\n            cur = newProps[key];\n            if (!(key in oldProps) || oldProps[key] != cur) {\n                updateComponentProp(vm, key, cur);\n            }\n        }\n    }\n\n    // Note: _props, which comes from api.c()'s data.props, is only used to populate\n    //       public props, and any other alien key added to it by the compiler will be\n    //       ignored, and a warning is shown.\n}\n\nexport default {\n    create: syncProps,\n    update: syncProps,\n};\n","import { invokeComponentAttributeChangedCallback } from \"../invoker\";\nimport { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction observeAttributes(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n    const { def: { observedAttrs } } = vm;\n    if (observedAttrs.length === 0) {\n        return; // nothing to observe\n    }\n\n    let { data: { attrs: oldAttrs } } = oldVnode;\n    let { data: { attrs: newAttrs } } = vnode;\n\n    if (oldAttrs === newAttrs || (isUndefined(oldAttrs) && isUndefined(oldAttrs))) {\n        return;\n    }\n\n    // infuse key-value pairs from _props into the component\n    let key: string, cur: any;\n    oldAttrs = oldAttrs || EmptyObject;\n    newAttrs = newAttrs || EmptyObject;\n    // removed props should be reset in component's props\n    for (key in oldAttrs) {\n        if (key in observedAttrs && !(key in newAttrs)) {\n            invokeComponentAttributeChangedCallback(vm, key, oldAttrs[key], null);\n        }\n    }\n\n    // new or different props should be set in component's props\n    for (key in newAttrs) {\n        if (key in observedAttrs) {\n            cur = newAttrs[key];\n            if (!(key in oldAttrs) || oldAttrs[key] != cur) {\n                invokeComponentAttributeChangedCallback(vm, key, oldAttrs[key], cur);\n            }\n        }\n    }\n}\n\nexport default {\n    create: observeAttributes,\n    update: observeAttributes,\n};\n","import { isUndefined } from \"../language\";\nimport { createComponentListener } from \"../component\";\nimport { EmptyObject } from \"../utils\";\n\nfunction removeAllCmpEventListeners(vnode: VNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n    const { cmpEvents: on, listener } = vm;\n    if (on && listener) {\n        const { elm } = vnode;\n        let name;\n        for (name in on) {\n            elm.removeEventListener(name, listener, false);\n        }\n        vm.listener = undefined;\n    }\n}\n\nfunction updateCmpEventListeners(oldVnode: VNode, vnode: VNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n    const { vm: oldVm } = oldVnode;\n    if (oldVm === vm) {\n        return;\n    }\n\n    const oldOn = (oldVm && oldVm.cmpEvents) || EmptyObject;\n    const { cmpEvents: on = EmptyObject } = vm;\n\n    if (oldOn === on) {\n        return;\n    }\n\n    const { elm } = vnode;\n    const { elm: oldElm } = oldVnode;\n    const listener = vm.cmpListener = (oldVm && oldVm.cmpListener) || createComponentListener();\n    listener.vm = vm;\n\n    let name;\n    for (name in on) {\n        if (isUndefined(oldOn[name])) {\n            elm.addEventListener(name, listener, false);\n        }\n    }\n    for (name in oldOn) {\n        if (isUndefined(on[name])) {\n            oldElm.removeEventListener(name, listener, false);\n        }\n    }\n}\n\n\n\nconst eventListenersModule: Module = {\n    create: updateCmpEventListeners,\n    update: updateCmpEventListeners,\n    destroy: removeAllCmpEventListeners\n};\nexport default eventListenersModule;\n","import { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction syncClassNames(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n\n    const { vm: oldVm } = oldVnode;\n    if (oldVm === vm) {\n        return;\n    }\n\n    const oldClass = (oldVm && oldVm.cmpClasses) || EmptyObject;\n    const { cmpClasses: klass = EmptyObject } = vm;\n\n    if (oldClass === klass) {\n        return;\n    }\n\n    const { elm, data: { class: ownerClass = EmptyObject } } = vnode;\n\n    let name: string;\n    for (name in oldClass) {\n        // remove only if it was removed from within the instance and it is not set from owner\n        if (oldClass[name] && !klass[name] && !ownerClass[name]) {\n            elm.classList.remove(name);\n        }\n    }\n    for (name in klass) {\n        if (klass[name] && !oldClass[name]) {\n            elm.classList.add(name);\n        }\n    }\n}\n\nexport default {\n    create: syncClassNames,\n    update: syncClassNames,\n};\n","import {\n    addComponentSlot,\n    removeComponentSlot,\n} from \"../component\";\nimport { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction update(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n\n    let { data: { slotset: oldSlots } } = oldVnode;\n    let { data: { slotset: newSlots } } = vnode;\n\n    // infuse key-value pairs from slotset into the component\n    if (oldSlots !== newSlots && (oldSlots || newSlots)) {\n        let key: string, cur: any;\n        oldSlots = oldSlots || EmptyObject;\n        newSlots = newSlots || EmptyObject;\n        // removed slots should be removed from component's slotset\n        for (key in oldSlots) {\n            if (!(key in newSlots)) {\n                removeComponentSlot(vm, key);\n            }\n        }\n\n        // new or different slots should be set in component's slotset\n        for (key in newSlots) {\n            cur = newSlots[key];\n            if (!(key in oldSlots) || oldSlots[key] != cur) {\n                if (cur && cur.length) {\n                    addComponentSlot(vm, key, cur);\n                } else {\n                    removeComponentSlot(vm, key);\n                }\n            }\n        }\n    }\n}\n\nexport default {\n    create: update,\n    update,\n};\n","import assert from \"../assert\";\nimport { renderComponent } from \"../component\";\nimport { isUndefined, ArrayPush } from \"../language\";\n\nfunction rerender(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n    const { children } = vnode;\n    // if diffing is against an inserted VM, it means the element is already\n    // in the DOM and we can compute its body.\n    if (vm.idx && vm.isDirty) {\n        assert.invariant(oldVnode.children !== children, `If component is dirty, the children collections must be different. In theory this should never happen.`);\n        renderComponent(vm);\n    }\n    // replacing the vnodes in the children array without replacing the array itself\n    // because the engine has a hard reference to the original array object.\n    children.length = 0;\n    ArrayPush.apply(children, vm.fragment);\n}\n\nexport default {\n    create: rerender,\n    update: rerender,\n};\n","import assert from \"../assert\";\nimport { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\n// TODO: eventually use the one shipped by snabbdom directly\nfunction update(oldVnode: VNode, vnode: VNode) {\n    let oldProps = oldVnode.data.props;\n    let props = vnode.data.props;\n\n    if (isUndefined(oldProps) && isUndefined(props)) {\n        return;\n    }\n    if (oldProps === props) {\n        return;\n    }\n\n    oldProps = oldProps || EmptyObject;\n    props = props || EmptyObject;\n\n    let key: string, cur: any, old: any;\n    const { elm } = vnode;\n\n    for (key in oldProps) {\n        if (!(key in props)) {\n            if (vnode.isRoot) {\n                // custom elements created programatically prevent you from\n                // deleting the property because it has a set/get to update\n                // the corresponding component, in this case, we just set it\n                // to undefined, which has the same effect.\n                elm[key] = undefined;\n            } else {\n                delete elm[key];\n            }\n        }\n    }\n    for (key in props) {\n        cur = props[key];\n        old = oldProps[key];\n\n        if (old !== cur) {\n            if (old !== cur && (key !== 'value' || elm[key] !== cur)) {\n                // only touching the dom if the prop really changes.\n                assert.block(function devModeCheck() {\n                    if (elm[key] === cur && old !== undefined && !vnode.isRoot) {\n                        console.warn(`Unneccessary update of property \"${key}\" in ${elm}, it has the same value in ${vnode.vm || vnode}.`);\n                    }\n                });\n                elm[key] = cur;\n            }\n        }\n    }\n}\n\nexport default {\n    create: update,\n    update,\n};\n","export var array = Array.isArray;\nexport function primitive(s) {\n    return typeof s === 'string' || typeof s === 'number';\n}\n","function createElement(tagName) {\n    return document.createElement(tagName);\n}\nfunction createElementNS(namespaceURI, qualifiedName) {\n    return document.createElementNS(namespaceURI, qualifiedName);\n}\nfunction createTextNode(text) {\n    return document.createTextNode(text);\n}\nfunction createComment(text) {\n    return document.createComment(text);\n}\nfunction insertBefore(parentNode, newNode, referenceNode) {\n    parentNode.insertBefore(newNode, referenceNode);\n}\nfunction removeChild(node, child) {\n    node.removeChild(child);\n}\nfunction appendChild(node, child) {\n    node.appendChild(child);\n}\nfunction parentNode(node) {\n    return node.parentNode;\n}\nfunction nextSibling(node) {\n    return node.nextSibling;\n}\nfunction tagName(elm) {\n    return elm.tagName;\n}\nfunction setTextContent(node, text) {\n    node.nodeValue = text;\n}\nfunction getTextContent(node) {\n    return node.nodeValue;\n}\nfunction isElement(node) {\n    return node.nodeType === 1;\n}\nfunction isText(node) {\n    // Performance optimization over `return node.nodeType === 3;`\n    return node.splitText !== undefined;\n}\nfunction isComment(node) {\n    return node.nodeType === 8;\n}\nexport var htmlDomApi = {\n    createElement: createElement,\n    createElementNS: createElementNS,\n    createTextNode: createTextNode,\n    createComment: createComment,\n    insertBefore: insertBefore,\n    removeChild: removeChild,\n    appendChild: appendChild,\n    parentNode: parentNode,\n    nextSibling: nextSibling,\n    tagName: tagName,\n    setTextContent: setTextContent,\n    getTextContent: getTextContent,\n    isElement: isElement,\n    isText: isText,\n    isComment: isComment,\n};\nexport default htmlDomApi;\n","import { v as vnode } from '../../framework/api';\nimport * as is from './is';\nimport htmlDomApi from './htmldomapi';\nfunction isUndef(s) { return s === undefined; }\nfunction isDef(s) { return s !== undefined; }\nvar emptyNode = { sel: \"\", data: {}, children: [] };\nfunction sameVnode(vnode1, vnode2) {\n    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;\n}\nfunction isVnode(vnode) {\n    return vnode.sel !== undefined;\n}\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\n    var i, map = {}, key, ch;\n    for (i = beginIdx; i <= endIdx; ++i) {\n        ch = children[i];\n        if (ch != null) {\n            key = ch.key;\n            if (key !== undefined)\n                map[key] = i;\n        }\n    }\n    return map;\n}\nvar hooks = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];\n// export { h } from './h';\n// export { thunk } from './thunk';\nexport function init(modules, domApi) {\n    var i, j, cbs = {};\n    var api = domApi !== undefined ? domApi : htmlDomApi;\n    for (i = 0; i < hooks.length; ++i) {\n        cbs[hooks[i]] = [];\n        for (j = 0; j < modules.length; ++j) {\n            var hook = modules[j][hooks[i]];\n            if (hook !== undefined) {\n                cbs[hooks[i]].push(hook);\n            }\n        }\n    }\n    function emptyNodeAt(elm) {\n        var id = elm.id ? '#' + elm.id : '';\n        var c = elm.className ? '.' + elm.className.split(' ').join('.') : '';\n        return vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);\n    }\n    function createRmCb(childElm, listeners) {\n        return function rmCb() {\n            if (--listeners === 0) {\n                var parent_1 = api.parentNode(childElm);\n                api.removeChild(parent_1, childElm);\n            }\n        };\n    }\n    function createElm(vnode, insertedVnodeQueue) {\n        var i, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.init)) {\n                i(vnode);\n                data = vnode.data;\n            }\n        }\n        var children = vnode.children, sel = vnode.sel;\n        if (sel === '!') {\n            if (isUndef(vnode.text)) {\n                vnode.text = '';\n            }\n            vnode.elm = api.createComment(vnode.text);\n        }\n        else if (sel !== undefined) {\n            // Parse selector\n            var hashIdx = sel.indexOf('#');\n            var dotIdx = sel.indexOf('.', hashIdx);\n            var hash = hashIdx > 0 ? hashIdx : sel.length;\n            var dot = dotIdx > 0 ? dotIdx : sel.length;\n            var tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;\n            var elm = vnode.elm = isDef(data) && isDef(i = data.ns) ? api.createElementNS(i, tag)\n                : api.createElement(tag);\n            if (hash < dot)\n                elm.id = sel.slice(hash + 1, dot);\n            if (dotIdx > 0)\n                elm.className = sel.slice(dot + 1).replace(/\\./g, ' ');\n            for (i = 0; i < cbs.create.length; ++i)\n                cbs.create[i](emptyNode, vnode);\n            if (is.array(children)) {\n                for (i = 0; i < children.length; ++i) {\n                    var ch = children[i];\n                    if (ch != null) {\n                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));\n                    }\n                }\n            }\n            else if (is.primitive(vnode.text)) {\n                api.appendChild(elm, api.createTextNode(vnode.text));\n            }\n            i = vnode.data.hook; // Reuse variable\n            if (isDef(i)) {\n                if (i.create)\n                    i.create(emptyNode, vnode);\n                if (i.insert)\n                    insertedVnodeQueue.push(vnode);\n            }\n        }\n        else {\n            vnode.elm = api.createTextNode(vnode.text);\n        }\n        return vnode.elm;\n    }\n    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var ch = vnodes[startIdx];\n            if (ch != null) {\n                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);\n            }\n        }\n    }\n    function invokeDestroyHook(vnode) {\n        var i, j, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.destroy))\n                i(vnode);\n            for (i = 0; i < cbs.destroy.length; ++i)\n                cbs.destroy[i](vnode);\n            if (vnode.children !== undefined) {\n                for (j = 0; j < vnode.children.length; ++j) {\n                    i = vnode.children[j];\n                    if (i != null && typeof i !== \"string\") {\n                        invokeDestroyHook(i);\n                    }\n                }\n            }\n        }\n    }\n    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var i_1 = void 0, listeners = void 0, rm = void 0, ch = vnodes[startIdx];\n            if (ch != null) {\n                if (isDef(ch.sel)) {\n                    invokeDestroyHook(ch);\n                    listeners = cbs.remove.length + 1;\n                    rm = createRmCb(ch.elm, listeners);\n                    for (i_1 = 0; i_1 < cbs.remove.length; ++i_1)\n                        cbs.remove[i_1](ch, rm);\n                    if (isDef(i_1 = ch.data) && isDef(i_1 = i_1.hook) && isDef(i_1 = i_1.remove)) {\n                        i_1(ch, rm);\n                    }\n                    else {\n                        rm();\n                    }\n                }\n                else {\n                    api.removeChild(parentElm, ch.elm);\n                }\n            }\n        }\n    }\n    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {\n        var oldStartIdx = 0, newStartIdx = 0;\n        var oldEndIdx = oldCh.length - 1;\n        var oldStartVnode = oldCh[0];\n        var oldEndVnode = oldCh[oldEndIdx];\n        var newEndIdx = newCh.length - 1;\n        var newStartVnode = newCh[0];\n        var newEndVnode = newCh[newEndIdx];\n        var oldKeyToIdx;\n        var idxInOld;\n        var elmToMove;\n        var before;\n        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {\n                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n            }\n            else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx];\n            }\n            else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n                oldStartVnode = oldCh[++oldStartIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));\n                oldStartVnode = oldCh[++oldStartIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key];\n                if (isUndef(idxInOld)) {\n                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    newStartVnode = newCh[++newStartIdx];\n                }\n                else {\n                    elmToMove = oldCh[idxInOld];\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    }\n                    else {\n                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n                        oldCh[idxInOld] = undefined;\n                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n        }\n        if (oldStartIdx > oldEndIdx) {\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n        }\n        else if (newStartIdx > newEndIdx) {\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n        }\n    }\n    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {\n        var i, hook;\n        if (isDef(i = vnode.data) && isDef(hook = i.hook) && isDef(i = hook.prepatch)) {\n            i(oldVnode, vnode);\n        }\n        var elm = vnode.elm = oldVnode.elm;\n        var oldCh = oldVnode.children;\n        var ch = vnode.children;\n        if (oldVnode === vnode)\n            return;\n        if (vnode.data !== undefined) {\n            for (i = 0; i < cbs.update.length; ++i)\n                cbs.update[i](oldVnode, vnode);\n            i = vnode.data.hook;\n            if (isDef(i) && isDef(i = i.update))\n                i(oldVnode, vnode);\n        }\n        if (isUndef(vnode.text)) {\n            if (isDef(oldCh) && isDef(ch)) {\n                if (oldCh !== ch)\n                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);\n            }\n            else if (isDef(ch)) {\n                if (isDef(oldVnode.text))\n                    api.setTextContent(elm, '');\n                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n            }\n            else if (isDef(oldCh)) {\n                removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n            }\n            else if (isDef(oldVnode.text)) {\n                api.setTextContent(elm, '');\n            }\n        }\n        else if (oldVnode.text !== vnode.text) {\n            api.setTextContent(elm, vnode.text);\n        }\n        if (isDef(hook) && isDef(i = hook.postpatch)) {\n            i(oldVnode, vnode);\n        }\n    }\n    return function patch(oldVnode, vnode) {\n        var i, elm, parent;\n        var insertedVnodeQueue = [];\n        for (i = 0; i < cbs.pre.length; ++i)\n            cbs.pre[i]();\n        if (!isVnode(oldVnode)) {\n            oldVnode = emptyNodeAt(oldVnode);\n        }\n        if (sameVnode(oldVnode, vnode)) {\n            patchVnode(oldVnode, vnode, insertedVnodeQueue);\n        }\n        else {\n            elm = oldVnode.elm;\n            parent = api.parentNode(elm);\n            createElm(vnode, insertedVnodeQueue);\n            if (parent !== null) {\n                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));\n                removeVnodes(parent, [oldVnode], 0, 0);\n            }\n        }\n        for (i = 0; i < insertedVnodeQueue.length; ++i) {\n            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);\n        }\n        for (i = 0; i < cbs.post.length; ++i)\n            cbs.post[i]();\n        return vnode;\n    };\n}\n","const xlinkNS = 'http://www.w3.org/1999/xlink';\nconst xmlNS = 'http://www.w3.org/XML/1998/namespace';\nconst ColonCharCode = 58;\nconst XCharCode = 120;\n\nfunction updateAttrs(oldVnode: VNode, vnode: VNode) {\n    let { data: { attrs: oldAttrs } } = oldVnode;\n    let { data: { attrs } } = vnode;\n\n    if (!oldAttrs && !attrs) {\n        return;\n    }\n    if (oldAttrs === attrs) {\n        return;\n    }\n    const { elm } = vnode;\n    let key: string;\n    oldAttrs = oldAttrs || {};\n    attrs = attrs || {};\n\n    // update modified attributes, add new attributes\n    for (key in attrs) {\n        const cur = attrs[key];\n        const old = oldAttrs[key];\n        if (old !== cur) {\n            if (cur === true) {\n                elm.setAttribute(key, \"\");\n            } else if (cur === false) {\n                elm.removeAttribute(key);\n            } else {\n                if (key.charCodeAt(0) !== XCharCode) {\n                    elm.setAttribute(key, cur);\n                } else if (key.charCodeAt(3) === ColonCharCode) {\n                    // Assume xml namespace\n                    elm.setAttributeNS(xmlNS, key, cur);\n                } else if (key.charCodeAt(5) === ColonCharCode) {\n                    // Assume xlink namespace\n                    elm.setAttributeNS(xlinkNS, key, cur);\n                } else {\n                    elm.setAttribute(key, cur);\n                }\n            }\n        }\n    }\n    // remove removed attributes\n    for (key in oldAttrs) {\n        if (!(key in attrs)) {\n            elm.removeAttribute(key);\n        }\n    }\n}\n\nconst attributesModule: Module = {\n    create: updateAttrs,\n    update: updateAttrs\n};\nexport default attributesModule;\n","import {\n    isString,\n} from './../language';\n\nconst DashCharCode = 45;\n\nfunction updateStyle(oldVnode: VNode, vnode: VNode) {\n    let { data: { style: oldStyle } } = oldVnode;\n    let { data: { style } } = vnode;\n\n    if (!oldStyle && !style) {\n        return;\n    }\n    if (oldStyle === style) {\n        return;\n    }\n    oldStyle = oldStyle || {};\n    style = style || {};\n\n    let name: string;\n    const { elm } = vnode;\n\n    if (isString(style)) {\n        elm.style.cssText = style;\n    } else {\n        if (isString(oldStyle)) {\n            elm.style.cssText = '';\n        } else {\n            for (name in oldStyle) {\n                if (!(name in style)) {\n                    elm.style.removeProperty(name);\n                }\n            }\n        }\n\n        for (name in style) {\n            const cur = style[name];\n            if (cur !== oldStyle[name]) {\n                if (name.charCodeAt(0) === DashCharCode && name.charCodeAt(1) === DashCharCode) {\n                    // if the name is prefied with --, it will be considered a variable, and setProperty() is needed\n                    elm.style.setProperty(name, cur);\n                } else {\n                    elm.style[name] = cur;\n                }\n            }\n        }\n    }\n}\n\nconst styleModule: Module = {\n    create: updateStyle,\n    update: updateStyle,\n};\nexport default styleModule;\n","import { EmptyObject } from \"../utils\";\n\nfunction updateClass(oldVnode: VNode, vnode: VNode) {\n    const { data: { class: oldClass = EmptyObject } } = oldVnode;\n    const { elm, data: { class: klass = EmptyObject } } = vnode;\n\n    if (oldClass === klass) {\n        return;\n    }\n\n    const innerClass = (vnode.vm && vnode.vm.cmpClasses) || EmptyObject;\n\n    let name: string\n    for (name in oldClass) {\n        // remove only if it is not in the new class collection and it is not set from within the instance\n        if (!klass[name] && !innerClass[name]) {\n            elm.classList.remove(name);\n        }\n    }\n    for (name in klass) {\n        if (!oldClass[name]) {\n            elm.classList.add(name);\n        }\n    }\n}\n\nexport default {\n    create: updateClass,\n    update: updateClass\n};\n","import { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction handleEvent(event: Event, vnode: VNode) {\n    const { type } = event;\n    const { data: { on } } = vnode;\n    let handler = on && on[type];\n    // call event handler if exists\n    if (handler) {\n        handler.call(undefined, event);\n    }\n}\n\nfunction createListener(): EventListener {\n    return function handler(event: Event) {\n        handleEvent(event, handler.vnode);\n    }\n}\n\nfunction removeAllEventListeners(vnode: VNode) {\n    const { data: { on }, listener } = vnode;\n    if (on && listener) {\n        const { elm } = vnode;\n        let name;\n        for (name in on) {\n            elm.removeEventListener(name, listener, false);\n        }\n        vnode.listener = undefined;\n    }\n}\n\nfunction updateEventListeners(oldVnode: VNode, vnode: VNode) {\n    const { data: { on: oldOn = EmptyObject } } = oldVnode;\n    const { data: { on = EmptyObject } } = vnode;\n\n    if (oldOn === on) {\n        return;\n    }\n\n    const { elm } = vnode;\n    const { elm: oldElm } = oldVnode;\n    const listener = vnode.listener = oldVnode.listener || createListener();\n    listener.vnode = vnode;\n\n    let name;\n    for (name in on) {\n        if (isUndefined(oldOn[name])) {\n            elm.addEventListener(name, listener, false);\n        }\n    }\n    for (name in oldOn) {\n        if (isUndefined(on[name])) {\n            oldElm.removeEventListener(name, listener, false);\n        }\n    }\n}\n\nconst eventListenersModule: Module = {\n    create: updateEventListeners,\n    update: updateEventListeners,\n    destroy: removeAllEventListeners\n};\nexport default eventListenersModule;\n","import { OwnerKey } from \"../vm\";\n\nfunction updateUID(oldVnode: VNode, vnode: VNode) {\n    const { uid: oldUid } = oldVnode;\n    const { elm, uid } = vnode;\n    if (uid === oldUid) {\n        return;\n    }\n    // @ts-ignore\n    elm[OwnerKey] = uid;\n}\n\nconst uidModule: Module = {\n    create: updateUID,\n    update: updateUID,\n};\nexport default uidModule;\n","import assert from \"./assert\";\nimport { patch } from \"./patch\";\nimport { scheduleRehydration } from \"./vm\";\nimport { invokeComponentAttributeChangedCallback } from \"./invoker\";\nimport { updateComponentProp } from \"./component\";\nimport { getComponentDef } from \"./def\";\nimport { c } from \"./api\";\nimport { isUndefined, isFunction } from \"./language\";\nimport { getPropNameFromAttrName } from \"./utils\";\n\nconst { getAttribute, setAttribute, removeAttribute } = Element.prototype;\n\nfunction linkAttributes(element: HTMLElement, vm: VM) {\n    assert.vm(vm);\n    const { def: { props: propsConfig, observedAttrs } } = vm;\n    // replacing mutators and accessors on the element itself to catch any mutation\n    element.getAttribute = (attrName: string): string | null => {\n        attrName = attrName.toLocaleLowerCase();\n        const propName = getPropNameFromAttrName(attrName);\n        if (propsConfig[propName]) {\n            assert.logError(`Invalid attribute \"${attrName}\" for ${vm}. Instead access the public property with \\`element.${propName};\\`.`);\n            return;\n        }\n        return getAttribute.call(element, attrName);\n    };\n    element.setAttribute = (attrName: string, newValue: any) => {\n        attrName = attrName.toLocaleLowerCase();\n        const propName = getPropNameFromAttrName(attrName);\n        if (propsConfig[propName]) {\n            assert.logError(`Invalid attribute \"${attrName}\" for ${vm}. Instead update the public property with \\`element.${propName} = value;\\`.`);\n            return;\n        }\n        const oldValue = getAttribute.call(element, attrName);\n        setAttribute.call(element, attrName, newValue);\n        newValue = getAttribute.call(element, attrName);\n        if (attrName in observedAttrs && oldValue !== newValue) {\n            invokeComponentAttributeChangedCallback(vm, attrName, oldValue, newValue);\n        }\n    };\n    element.removeAttribute = (attrName: string) => {\n        attrName = attrName.toLocaleLowerCase();\n        const propName = getPropNameFromAttrName(attrName);\n        if (propsConfig[propName]) {\n            assert.logError(`Invalid attribute \"${attrName}\" for ${vm}. Instead update the public property with \\`element.${propName} = undefined;\\`.`);\n            return;\n        }\n\n        assert.block(function devModeCheck() {\n            const propName = getPropNameFromAttrName(attrName);\n            if (propsConfig[propName]) {\n                updateComponentProp(vm, propName, newValue);\n                if (vm.isDirty) {\n                    console.log(`Scheduling ${vm} for rehydration.`);\n                    scheduleRehydration(vm);\n                }\n            }\n        });\n        const oldValue = getAttribute.call(element, attrName);\n        removeAttribute.call(element, attrName);\n        const newValue = getAttribute.call(element, attrName);\n        if (attrName in observedAttrs && oldValue !== newValue) {\n            invokeComponentAttributeChangedCallback(vm, attrName, oldValue, newValue);\n        }\n    };\n}\n\nfunction getInitialProps(element: HTMLElement, Ctor: Class<Component>): HashTable<any> {\n    const { props: config } = getComponentDef(Ctor);\n    const props = {};\n    for (let propName in config) {\n        if (propName in element) {\n            props[propName] = element[propName];\n        }\n    }\n    return props;\n}\n\nfunction getInitialSlots(element: HTMLElement, Ctor: Class<Component>): HashTable<any> {\n    const { slotNames } = getComponentDef(Ctor);\n    if (isUndefined(slotNames)) {\n        return;\n    }\n    // TODO: implement algo to resolve slots\n    return undefined;\n}\n\n/**\n * This algo mimics 2.5 of web component specification somehow:\n * https://www.w3.org/TR/custom-elements/#upgrades\n */\nfunction upgradeElement(element: HTMLElement, Ctor: Class<Component>) {\n    if (isUndefined(Ctor)) {\n        throw new TypeError(`Invalid Component Definition: ${Ctor}.`);\n    }\n    const props = getInitialProps(element, Ctor);\n    const slotset = getInitialSlots(element, Ctor);\n    const tagName = element.tagName.toLowerCase();\n    const vnode = c(tagName, Ctor, { props, slotset, className: element.className || undefined });\n    vnode.isRoot = true;\n    // TODO: eventually after updating snabbdom we can use toVNode(element)\n    // as the first argument to reconstruct the vnode that represents the\n    // current state.\n    const { vm } = patch(element, vnode);\n    linkAttributes(element, vm);\n}\n\n/**\n * This method is almost identical to document.createElement\n * (https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n * with the slightly difference that in the options, you can pass the `is`\n * property set to a Constructor instead of just a string value. E.g.:\n *\n * const el = createElement('x-foo', { is: FooCtor });\n *\n * If the value of `is` attribute is not a constructor,\n * then we fallback to the normal Web-Components workflow.\n */\nexport function createElement(tagName: string, options: any = {}): HTMLElement {\n    const Ctor = isFunction(options.is) ? options.is : null;\n    const element = document.createElement(tagName, Ctor ? null : options);\n\n    if (Ctor && element instanceof HTMLElement) {\n        upgradeElement(element, Ctor);\n    }\n    return element;\n}\n\n// TODO: how can a user dismount a component and kick in the destroy mechanism?\n","// Few more execptions that are using the attribute name to match the property in lowercase.\n// this list was compiled from https://msdn.microsoft.com/en-us/library/ms533062(v=vs.85).aspx\n// and https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\n// Note: this list most be in sync with the compiler as well.\nexport const HTMLPropertyNamesWithLowercasedReflectiveAttributes = [\n    'accessKey',\n    'readOnly',\n    'tabIndex',\n    'bgColor',\n    'colSpan',\n    'rowSpan',\n    'contentEditable',\n    'dateTime',\n    'formAction',\n    'isMap',\n    'maxLength',\n    'useMap',\n];\n\n// Global HTML Attributes & Properties\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\nexport const GlobalHTMLProperties = {\n    accessKey: {\n        attribute: 'accesskey',\n    },\n    accessKeyLabel: {\n        readOnly: true,\n    },\n    className: {\n        attribute: 'class',\n        error: `Using property \"className\" is an anti-pattern because of slow runtime behavior and conflicting with classes provided by the owner element. Instead use property \"classList\".`,\n    },\n    contentEditable: {\n        attribute: 'contenteditable',\n    },\n    isContentEditable: {\n        readOnly: true,\n    },\n    contextMenu: {\n        attribute: 'contextmenu',\n    },\n    dataset: {\n        readOnly: true,\n        msg: 'Using property \"dataset\" is an anti-pattern. Instead declare \\`static observedAttributes = [\"data-foo\"]\\` and use \\`attributeChangedCallback(attrName, oldValue, newValue)\\` to get a notification each time the attribute changes.',\n    },\n    dir: {\n        attribute: 'dir',\n    },\n    draggable: {\n        attribute: 'draggable',\n        experimental: true,\n    },\n    dropzone: {\n        attribute: 'dropzone',\n        readOnly: true,\n        experimental: true,\n    },\n    hidden: {\n        attribute: 'hidden',\n    },\n    itemScope: {\n        attribute: 'itemscope',\n        experimental: true,\n    },\n    itemType: {\n        attribute: 'itemtype',\n        readOnly: true,\n        experimental: true,\n    },\n    itemId: {\n        attribute: 'itemid',\n        experimental: true,\n    },\n    itemRef: {\n        attribute: 'itemref',\n        readOnly: true,\n        experimental: true,\n    },\n    itemProp: {\n        attribute: 'itemprop',\n        readOnly: true,\n        experimental: true,\n    },\n    itemValue: {\n        experimental: true,\n    },\n    lang: {\n        attribute: 'lang',\n    },\n    offsetHeight: {\n        readOnly: true,\n        experimental: true,\n    },\n    offsetLeft: {\n        readOnly: true,\n        experimental: true,\n    },\n    offsetParent: {\n        readOnly: true,\n        experimental: true,\n    },\n    offsetTop: {\n        readOnly: true,\n        experimental: true,\n    },\n    offsetWidth: {\n        readOnly: true,\n        experimental: true,\n    },\n    properties: {\n        readOnly: true,\n        experimental: true,\n    },\n    spellcheck: {\n        experimental: true,\n    },\n    style: {\n        attribute: 'style',\n        error: `Using property or attribute \"style\" is an anti-pattern. Instead use property \"classList\".`,\n    },\n    tabIndex: {\n        attribute: 'tabindex',\n    },\n    title: {\n        attribute: 'title',\n    },\n    translate: {\n        experimental: true,\n    },\n    // additional global attributes that are not present in the link above.\n    role: {\n        attribute: 'role',\n    },\n    slot: {\n        attribute: 'slot',\n        experimental: true,\n        error: `Using property or attribute \"slot\" is an anti-pattern.`\n    }\n};\n\n// TODO: complete this list with Element properties\n// https://developer.mozilla.org/en-US/docs/Web/API/Element\n\n// TODO: complete this list with Node properties\n// https://developer.mozilla.org/en-US/docs/Web/API/Node\n","export default function compat(fn: () => void) {\n    fn();\n}\n","import componentInit from \"./modules/component-init\";\nimport componentProps from \"./modules/component-props\";\nimport componentAttrs from \"./modules/component-attrs\";\nimport componentEvents from \"./modules/component-events\";\nimport componentClasses from \"./modules/component-classes\";\nimport componentSlotset from \"./modules/component-slotset\";\nimport componentChildren from \"./modules/component-children\";\nimport props from \"./modules/props\";\n\nimport { init } from \"../3rdparty/snabbdom/snabbdom\";\nimport attrs from \"./modules/attrs\";\nimport styles from \"./modules/styles\";\nimport classes from \"./modules/classes\";\nimport events from \"./modules/events\";\nimport uid from \"./modules/uid\";\n\nexport const patch = init([\n    componentInit,\n    componentSlotset,\n    componentProps,\n    componentAttrs,\n    componentEvents,\n    componentClasses,\n    componentChildren,\n    props,\n    attrs,\n    classes,\n    styles,\n    events,\n    uid,\n]);\n"],"names":["obj","undefined","Promise","resolve","classList","ViewModelReflection","vnode","elm","vm","defineProperty","this","value","writable","enumerable","configurable","ctx","currentContext","callbacks","nextTickCallbackQueue","i","len","length","callback","then","flushCallbackQueue","ArrayPush","call","attrName","propName","attrNameToPropNameMap","replace","CAMEL_REGEX","g","toUpperCase","propNameToAttributeNameMap","CAPS_REGEX","match","toLowerCase","raw","className","map","classNameToClassMap","start","charCodeAt","SPACE_CHAR","slice","service","hooks","hookName","l","Services","isUndefined","push","cbs","component","data","def","context","addInsertionIndex","isDirty","connectedCallback","rehydrate","connected","addCallbackToNextTick","invokeServiceHook","noop","invokeComponentMethod","removeInsertionIndex","disconnected","disconnectedCallback","clearListeners","oldVnode","idx","insert","children","sel","ns","NamespaceAttributeForSVG","i_1","child","data_1","grandChildren","addNS","text","Ctor","EmptyData","key","uid","vmBeingRendered","classMap","style","styleMap","class","getMapFromClassName","CHAR_S","CHAR_V","CHAR_G","v","__circular__","slotset","attrs","on","_props","hook","items","factory","last","list","i_2","isArray","apply","flattened","i_3","item","fn","event","invokeComponentCallback","handler","type","membrane","isNull","unwrap","isReplicable","cells","r","get","replica","XProxy","set","replicaOrAny","TargetSlot","MembraneSlot","getLinkedMembrane","_i","args","newValue","originalReturnValue","arguments","deleteProperty","has","target","keyedObj","create","keys","getOwnPropertyNames","hasOwnProperty","TypeError","to","Object","index","nextSource","iterator","nextKey","setKey","getKey","ProxyCompat","getKeyCompat","callKey","callKeyCompat","setKeyCompat","deleteKey","deleteKeyCompat","inKey","inKeyCompat","iterableKey","iterableKeyCompat","Array","compatIsArray","assign","compatKeys","compatGetOwnPropertyNames","compatAssign","prototype","compatHasOwnProperty","slotName","html","_a","cmpSlots","tplCache","cmpTemplate","_b","slotsetRevoke","vnodes","api","originalPromise","tplPromise","isFunction","tplResolvedValue","attemptToEvaluateResolvedTemplate","evaluateTemplate","fnCtx","establishContext","result","error","e","methodName","isRenderingInception","isRendering","vmBeingRenderedInception","render","isPromise","deferredTemplate","oldValue","attributeChangedCallback","reactiveRecord","TargetToReactiveRecordMap","markComponentAsDirty","scheduleRehydration","newRecord","ArrayIndexOf","deps","propertyProxyHandler","subscribeToSetHook","isObject","getPropertyProxy","notifyListeners","constructor","Date","proxy","ReplicableToReplicaMap","piercing","result_1","next_1","getReplica","PiercingMembraneHandler","Membrane","vmBeingConstructed","vmBeingConstructedInception","invokeComponentConstructor","publicMethodsConfig","publicProps","descriptors","getter","bind","setter","isRoot","updateComponentProp","defineProperties","wiring","pos","ArraySplice","cmpProps","observedAttrs","propDef","getAttrNameFromPropName","invokeComponentAttributeChangedCallback","publicPropsConfig","dispatchComponentEvent","eventName","newHandler","cmpEvents","cmpListener","createComponentListener","addEventListener","oldHandler","handlers","uninterrupted","stopImmediatePropagation","pierce","invokeComponentRenderMethod","fragment","renderedCallback","rehydrated","root","shadowRoot","selector","getLinkedElement","querySelector","querySelectorAll","nodeList","isNodeOwnedByVM","filteredNodes","ArrayFilter","node","cmp","selectors","originalPropertyDescriptor","origGetter","isBeingConstructed","origSetter","cmpWired","name","props","getPublicPropertiesHash","methods","getPublicMethodsHash","getObservedAttributesHash","wire","getWireHash","proto","descriptor","getOwnPropertyDescriptor","config","COMPUTED_GETTER_MASK","COMPUTED_SETTER_MASK","createPublicPropertyDescriptor","method","createWiredPropertyDescriptor","superProto","getPrototypeOf","Element","superDef","getComponentDef","reduce","propsHash","EmptyObject","publicMethods","methodsHash","observedAttributes","CtorToDefMap","createComponentDef","isScheduled","cmpState","cmpClasses","cmpRoot","classListObj","createComponent","linkComponent","patch","vms","rehydrateQueue","sort","a","b","flushRehydrationQueue","OwnerKey","ownerUid","relinkVM","createVM","oldProps","newProps","cur","resetComponentProp","oldAttrs","newAttrs","listener","removeEventListener","oldVm","oldOn","oldElm","oldClass","klass","ownerClass","remove","add","oldSlots","newSlots","removeComponentSlot","addComponentSlot","renderComponent","old","s","tagName","document","createElement","namespaceURI","qualifiedName","createElementNS","createTextNode","createComment","parentNode","newNode","referenceNode","insertBefore","removeChild","appendChild","nextSibling","nodeValue","nodeType","splitText","vnode1","vnode2","beginIdx","endIdx","ch","setAttribute","removeAttribute","XCharCode","ColonCharCode","setAttributeNS","xmlNS","xlinkNS","oldStyle","isString","cssText","removeProperty","DashCharCode","setProperty","innerClass","handleEvent","createListener","oldUid","element","propsConfig","getAttribute","toLocaleLowerCase","getPropNameFromAttrName","getInitialProps","getInitialSlots","c","linkAttributes","options","is","HTMLElement","upgradeElement","freeze","seal","setPrototypeOf","ArraySlice","ArrayMap","forEach","HTMLPropertyNamesWithLowercasedReflectiveAttributes","ClassList","filter","toggle","force","contains","toString","join","topLevelContextSymbol","Symbol","htmlFor","lastRevokeFn","lifeCycleHooks","destroy","postpatch","WeakMap","thisArg","argumentsList","newTarget","construct","targetIsArray","desc","throwRevoked","targetIsFunction","trap","usingNew","linkProperty","revocable","revoke","Proxy","enableCompatMode","EmptySlots","slotsetProxyHandler","getSlotsetValue","propertyGetter","propertySetter","propertyDelete","piercingHook","targetFn","Root","mode","host","shadowRootQuerySelector","shadowRootQuerySelectorAll","register","getFirstMatch","getAllMatches","isParentNodeKeyword","ComponentElement","dispatchEvent","addComponentEventListener","removeComponentEventListener","toAttributeValue","getBoundingClientRect","querySelectorAllFromComponent","wasNodePassedIntoVM","tabIndex","state","newState","initializeComponent","update","syncProps","observeAttributes","eventListenersModule","updateCmpEventListeners","removeAllCmpEventListeners","syncClassNames","rerender","array","htmlDomApi","setTextContent","getTextContent","isElement","isText","isComment","emptyNode","attributesModule","updateAttrs","styleModule","updateStyle","updateClass","updateEventListeners","removeAllEventListeners","uidModule","updateUID","modules","domApi","id","split","childElm","listeners","parent_1","insertedVnodeQueue","isDef","init","isUndef","hashIdx","indexOf","dotIdx","hash","dot","tag","Math","min","is.array","createElm","is.primitive","parentElm","before","startIdx","j","invokeDestroyHook","rm","createRmCb","oldCh","newCh","oldKeyToIdx","idxInOld","elmToMove","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","sameVnode","patchVnode","createKeyToOldIdx","addVnodes","removeVnodes","prepatch","updateChildren","parent","pre","isVnode","emptyNodeAt","post","componentInit","componentSlotset","componentProps","componentAttrs","componentEvents","componentClasses","componentChildren","classes","styles","events"],"mappings":"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"}