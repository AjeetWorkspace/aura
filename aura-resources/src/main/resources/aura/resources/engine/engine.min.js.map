{"version":3,"file":"engine.min.js","sources":["../src/framework/language.ts","../src/framework/class-list.ts","../src/framework/context.ts","../src/framework/utils.ts","../src/framework/services.ts","../src/framework/hook.ts","../src/framework/api.ts","../src/framework/watcher.ts","../src/framework/properties.ts","../src/framework/template.ts","../src/framework/defer.ts","../src/framework/invoker.ts","../src/framework/component.ts","../src/framework/root.ts","../src/framework/html-element.ts","../src/framework/def.ts","../src/framework/membrane.ts","../src/framework/vm.ts","../src/framework/modules/component-init.ts","../src/framework/modules/component-props.ts","../src/framework/modules/component-attrs.ts","../src/framework/modules/component-events.ts","../src/framework/modules/component-classes.ts","../src/framework/modules/component-slotset.ts","../src/framework/modules/component-children.ts","../src/framework/modules/props.ts","../src/3rdparty/snabbdom/is.ts","../src/3rdparty/snabbdom/htmldomapi.ts","../src/3rdparty/snabbdom/snabbdom.ts","../src/framework/modules/attrs.ts","../src/framework/modules/styles.ts","../src/framework/modules/classes.ts","../src/framework/modules/events.ts","../src/framework/modules/uid.ts","../src/framework/upgrade.ts","../src/framework/dom.ts","../src/framework/patch.ts"],"sourcesContent":["const {\n    freeze,\n    seal,\n    keys,\n    create,\n    assign,\n    defineProperty,\n    getPrototypeOf,\n    setPrototypeOf,\n    getOwnPropertyDescriptor,\n    getOwnPropertyNames,\n    defineProperties,\n    getOwnPropertySymbols,\n    hasOwnProperty,\n} = Object;\nconst isArray = Array.isArray;\nconst {\n    filter: ArrayFilter,\n    slice: ArraySlice,\n    splice: ArraySplice,\n    indexOf: ArrayIndexOf,\n    push: ArrayPush,\n    map: ArrayMap,\n    forEach,\n} = Array.prototype;\n\nexport {\n    freeze,\n    seal,\n    keys,\n    create,\n    assign,\n    defineProperty,\n    defineProperties,\n    getPrototypeOf,\n    setPrototypeOf,\n    getOwnPropertyDescriptor,\n    getOwnPropertyNames,\n    getOwnPropertySymbols,\n    hasOwnProperty,\n    ArraySlice,\n    ArraySplice,\n    ArrayFilter,\n    ArrayMap,\n    isArray,\n    ArrayIndexOf,\n    ArrayPush,\n    forEach,\n}\n\nexport function isUndefined(obj: any): boolean {\n    return obj === undefined;\n}\n\nexport function isNull(obj: any): boolean {\n    return obj === null;\n}\n\nexport function isTrue(obj: any): boolean {\n    return obj === true;\n}\n\nexport function isFunction(obj: any): boolean {\n    return typeof obj === 'function';\n}\nexport function isObject(obj: any): boolean {\n    return typeof obj === 'object';\n}\n\nexport function isString(obj: any): boolean {\n    return typeof obj === 'string';\n}\n\nexport function isNumber(obj: any): boolean {\n    return typeof obj === 'number';\n}\n\nexport function isPromise(obj: any): boolean {\n    return typeof obj === 'object' && obj === Promise.resolve(obj);\n}\n\nconst OtS = {}.toString;\nexport function toString(obj: any): string {\n    if (obj && typeof obj === 'object' && !obj.toString) {\n        return OtS.call(obj);\n    }\n    return obj + '';\n}\n\nexport function bind(fn: Function, ctx: Object): Function {\n    function boundFn(a: any): any {\n        const l = arguments.length\n        return l\n            ? l > 1\n                ? fn.apply(ctx, arguments)\n                : fn.call(ctx, a)\n            : fn.call(ctx)\n    }\n    return boundFn;\n}\n","import assert from \"./assert\";\nimport {\n    getOwnPropertyNames,\n    defineProperty,\n    isUndefined,\n    forEach,\n} from \"./language\";\n\nimport { ViewModelReflection } from \"./html-element\";\n\nfunction getLinkedElement(classList: ClassList): HTMLElement {\n    return classList[ViewModelReflection].vnode.elm;\n}\n\n// This needs some more work. ClassList is a weird DOM api because it\n// is a TokenList, but not an Array. For now, we are just implementing\n// the simplest one.\n// https://www.w3.org/TR/dom/#domtokenlist\nexport function ClassList(vm: VM): DOMTokenList {\n    assert.vm(vm);\n    defineProperty(this, ViewModelReflection, {\n        value: vm,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n    });\n}\n\nClassList.prototype = {\n    add() {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        const elm = getLinkedElement(this);\n        // Add specified class values. If these classes already exist in attribute of the element, then they are ignored.\n        forEach.call(arguments, (className: String) => {\n            className = className + '';\n            if (!cmpClasses[className]) {\n                cmpClasses[className] = true;\n                // this is not only an optimization, it is also needed to avoid adding the same\n                // class twice when the initial diffing algo kicks in without an old vm to track\n                // what was already added to the DOM.\n                if (vm.idx) {\n                    // we intentionally make a sync mutation here and also keep track of the mutation\n                    // for a possible rehydration later on without having to rehydrate just now.\n                    elm.classList.add(className);\n                }\n            }\n        });\n    },\n    remove() {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        const elm = getLinkedElement(this);\n        // Remove specified class values.\n        forEach.call(arguments, (className: String) => {\n            className = className + '';\n            if (cmpClasses[className]) {\n                cmpClasses[className] = false;\n                // this is not only an optimization, it is also needed to avoid removing the same\n                // class twice when the initial diffing algo kicks in without an old vm to track\n                // what was already added to the DOM.\n                if (vm.idx) {\n                    // we intentionally make a sync mutation here when needed and also keep track of the mutation\n                    // for a possible rehydration later on without having to rehydrate just now.\n                    const ownerClass = vm.vnode.data.class;\n                    // This is only needed if the owner is not forcing that class to be present in case of conflicts.\n                    if (isUndefined(ownerClass) || !ownerClass[className]) {\n                        elm.classList.remove(className);\n                    }\n                }\n            }\n        });\n    },\n    item(index: Number): string | void {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        // Return class value by index in collection.\n        return getOwnPropertyNames(cmpClasses)\n            .filter((className: string): boolean => cmpClasses[className + ''])[index] || null;\n    },\n    toggle(className: String, force: any): boolean {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        // When only one argument is present: Toggle class value; i.e., if class exists then remove it and return false, if not, then add it and return true.\n        // When a second argument is present: If the second argument evaluates to true, add specified class value, and if it evaluates to false, remove it.\n        if (arguments.length > 1) {\n            if (force) {\n                this.add(className);\n            } else if (!force) {\n                this.remove(className);\n            }\n            return !!force;\n        }\n        if (cmpClasses[className]) {\n            this.remove(className);\n            return false;\n        }\n        this.add(className);\n        return true;\n    },\n    contains(className: String): boolean {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        // Checks if specified class value exists in class attribute of the element.\n        return !!cmpClasses[className];\n    },\n    toString(): string {\n        const vm = this[ViewModelReflection];\n        const { cmpClasses } = vm;\n        return getOwnPropertyNames(cmpClasses).filter((className: string): boolean => cmpClasses[className + '']).join(' ');\n    }\n};\n","const topLevelContextSymbol = Symbol('Top Level Context');\n\nexport let currentContext = {};\n\ncurrentContext[topLevelContextSymbol] = true;\n\nexport function establishContext(ctx: Object) {\n    currentContext = ctx;\n}\n","import assert from \"./assert\";\nimport { create, seal, ArrayPush, freeze, isFunction } from \"./language\";\n\nlet nextTickCallbackQueue: Array<Callback> = [];\nconst SPACE_CHAR = 32;\n\nexport let EmptyObject = seal(create(null));\n\nfunction flushCallbackQueue() {\n    assert.invariant(nextTickCallbackQueue.length, `If callbackQueue is scheduled, it is because there must be at least one callback on this pending queue instead of ${nextTickCallbackQueue}.`);\n    const callbacks: Array<Callback> = nextTickCallbackQueue;\n    nextTickCallbackQueue = []; // reset to a new queue\n    for (let i = 0, len = callbacks.length; i < len; i += 1) {\n        callbacks[i]();\n    }\n}\n\nexport function addCallbackToNextTick(callback: Callback) {\n    assert.isTrue(isFunction(callback), `addCallbackToNextTick() can only accept a function callback as first argument instead of ${callback}`);\n    if (nextTickCallbackQueue.length === 0) {\n        Promise.resolve().then(flushCallbackQueue);\n    }\n    // TODO: eventually, we might want to have priority when inserting callbacks\n    ArrayPush.call(nextTickCallbackQueue, callback);\n}\n\nconst CAMEL_REGEX = /-([a-z])/g;\nconst attrNameToPropNameMap = create(null);\n\nexport function getPropNameFromAttrName(attrName: string): string {\n    let propName = attrNameToPropNameMap[attrName];\n    if (!propName) {\n        propName = attrName.replace(CAMEL_REGEX, (g: string): string => g[1].toUpperCase());\n        attrNameToPropNameMap[attrName] = propName;\n    }\n    return propName;\n}\n\nconst CAPS_REGEX = /[A-Z]/g;\nimport {\n    HTMLPropertyNamesWithLowercasedReflectiveAttributes,\n} from \"./dom\";\n\n/**\n * This dictionary contains the mapping between property names\n * and the corresponding attribute name. This helps to trigger observable attributes.\n */\nconst propNameToAttributeNameMap = {\n    // these are exceptions to the rule that cannot be inferred via `CAPS_REGEX`\n    className: 'class',\n    htmlFor: 'for',\n};\n// Few more exceptions where the attribute name matches the property in lowercase.\nHTMLPropertyNamesWithLowercasedReflectiveAttributes.forEach((propName: string) => {\n    propNameToAttributeNameMap[propName] = propName.toLowerCase();\n});\n\nexport function getAttrNameFromPropName(propName: string): string {\n    let attrName = propNameToAttributeNameMap[propName];\n    if (!attrName) {\n        attrName = propName.replace(CAPS_REGEX, (match: string): string => '-' + match.toLowerCase());\n        propNameToAttributeNameMap[propName] = attrName;\n    }\n    return attrName;\n}\n\nexport function toAttributeValue(raw: any): string | null {\n    // normalizing attrs from compiler into HTML global attributes\n    if (raw === true) {\n        raw = '';\n    } else if (raw === false) {\n        raw = null;\n    }\n    return raw !== null ? raw + '' : null;\n}\n\nexport function noop() {}\n\nconst classNameToClassMap = create(null);\n\nexport function getMapFromClassName(className: string): HashTable<boolean> {\n    let map = classNameToClassMap[className];\n    if (map) {\n        return map;\n    }\n    map = {};\n    let start = 0;\n    let i, len = className.length;\n    for (i = 0; i < len; i++) {\n        if (className.charCodeAt(i) === SPACE_CHAR) {\n            if (i > start) {\n                map[className.slice(start, i)] = true;\n            }\n            start = i + 1;\n        }\n    }\n\n    if (i > start) {\n        map[className.slice(start, i)] = true;\n    }\n    classNameToClassMap[className] = map;\n    assert.block(() => {\n        // just to make sure that this object never changes as part of the diffing algo\n        freeze(map);\n    });\n    return map;\n}\n","import assert from \"./assert\";\nimport { isUndefined, isObject, isArray, create } from \"./language\";\nimport { Replicable } from \"./membrane\"; // eslint-disable-line no-unused-vars\n\nconst hooks = ['wiring', 'rehydrated', 'connected', 'disconnected', 'piercing'];\n\nexport type ServiceCallback = (component: Component, data: VNodeData, def: ComponentDef, context: HashTable<any>) => void; // eslint-disable-line no-undef\nexport type MembranePiercingCallback = (component: Component, data: VNodeData, def: ComponentDef, context: HashTable<any>, target: Replicable, key: Symbol | string, value: any, callback: (newValue?: any) => void) => void; // eslint-disable-line no-undef\nexport type ServiceDef = { wiring?: ServiceCallback; connected?: ServiceCallback; disconnected?: ServiceCallback; rehydrated?: ServiceCallback; piercing?: MembranePiercingCallback; [key: string]: ServiceCallback | MembranePiercingCallback | undefined; }; // eslint-disable-line no-undef\n\nexport const Services: {\n  wiring?: ServiceCallback[];\n  connected?: ServiceCallback[];\n  disconnected?: ServiceCallback[];\n  rehydrated?: ServiceCallback[];\n  piercing?: MembranePiercingCallback[];\n  [key: string]: ServiceCallback[] | MembranePiercingCallback[] | undefined;\n} = create(null);\n\nexport function register(service: ServiceDef) {\n    assert.isTrue(isObject(service), `Invalid service declaration, ${service}: service must be an object`);\n    for (let i = 0; i < hooks.length; ++i) {\n        const hookName = hooks[i];\n        if (hookName in service) {\n            let l = Services[hookName];\n            if (isUndefined(l)) {\n                Services[hookName] = l = [];\n            }\n\n            l.push(service[hookName]);\n        }\n    }\n}\n\nexport function invokeServiceHook(vm: VM, cbs: Array<ServiceCallback>) {\n    assert.vm(vm);\n    assert.isTrue(isArray(cbs) && cbs.length > 0, `Optimize invokeServiceHook() to be invoked only when needed`);\n    const { component, vnode: { data }, def, context } = vm;\n    for (let i = 0, len = cbs.length; i < len; ++i) {\n        cbs[i].call(undefined, component, data, def, context);\n    }\n}\n","import assert from \"./assert\";\nimport { invokeComponentMethod } from \"./invoker\";\nimport { clearListeners } from \"./component\";\nimport { rehydrate, addInsertionIndex, removeInsertionIndex } from \"./vm\";\nimport { addCallbackToNextTick, noop } from \"./utils\";\nimport { invokeServiceHook, Services } from \"./services\";\n\nfunction insert(vnode: ComponentVNode) {\n    assert.vnode(vnode);\n    const { vm } = vnode;\n    assert.vm(vm);\n    assert.isFalse(vm.idx, `${vm} is already inserted.`);\n    addInsertionIndex(vm);\n    const { isDirty, component: { connectedCallback } } = vm;\n    if (isDirty) {\n        // this code path guarantess that when patching the custom element for the first time,\n        // the body is computed only after the element is in the DOM, otherwise the hooks\n        // for any children's vnode are not going to be useful.\n        rehydrate(vm);\n    }\n    const { connected } = Services;\n    if (connected) {\n        addCallbackToNextTick((): void => invokeServiceHook(vm, connected));\n    }\n    if (connectedCallback && connectedCallback !== noop) {\n        addCallbackToNextTick((): void => invokeComponentMethod(vm, 'connectedCallback'));\n    }\n    console.log(`\"${vm}\" was inserted.`);\n}\n\nfunction destroy(vnode: ComponentVNode) {\n    assert.vnode(vnode);\n    const { vm } = vnode;\n    assert.vm(vm);\n    assert.isTrue(vm.idx, `${vm} is not inserted.`);\n    removeInsertionIndex(vm);\n    // just in case it comes back, with this we guarantee re-rendering it\n    vm.isDirty = true;\n    const { disconnected } = Services;\n    const { component: { disconnectedCallback } } = vm;\n    clearListeners(vm);\n    if (disconnected) {\n        addCallbackToNextTick((): void => invokeServiceHook(vm, disconnected));\n    }\n    if (disconnectedCallback && disconnectedCallback !== noop) {\n        addCallbackToNextTick((): void => invokeComponentMethod(vm, 'disconnectedCallback'));\n    }\n    console.log(`\"${vm}\" was destroyed.`);\n}\n\nfunction postpatch(oldVnode: VNode, vnode: ComponentVNode) {\n    assert.vnode(vnode);\n    assert.vm(vnode.vm);\n    if (vnode.vm.idx === 0) {\n        // when inserting a root element, or when reusing a DOM element for a new\n        // component instance, the insert() hook is never called because the element\n        // was already in the DOM before creating the instance, and diffing the\n        // vnode, for that, we wait until the patching process has finished, and we\n        // use the postpatch() hook to trigger the connectedCallback logic.\n        insert(vnode);\n        // Note: we don't have to worry about destroy() hook being called before this\n        // one because they never happen in the same patching mechanism, only one\n        // of them is called. In the case of the insert() hook, we use the value of `idx`\n        // to dedupe the calls since they both can happen in the same patching process.\n    }\n}\n\nexport const lifeCycleHooks = {\n    insert,\n    destroy,\n    postpatch,\n}\n","import assert from \"./assert\";\nimport { lifeCycleHooks as hook } from \"./hook\";\nimport { isArray, create, isUndefined, isFunction, isObject, isString, toString, ArrayPush } from \"./language\";\nimport { vmBeingRendered, invokeComponentCallback } from \"./invoker\";\nimport { getMapFromClassName } from \"./utils\";\n\nconst CHAR_S = 115;\nconst CHAR_V = 118;\nconst CHAR_G = 103;\nconst EmptyData = create(null);\nconst NamespaceAttributeForSVG = 'http://www.w3.org/2000/svg';\n\nfunction addNS(data: any, children: Array<VNode> | undefined, sel: string | undefined) {\n    data.ns = NamespaceAttributeForSVG;\n    if (isUndefined(children) || sel === 'foreignObject') {\n        return;\n    }\n    const len = children.length;\n    for (let i = 0; i < len; ++i) {\n        const child = children[i];\n        let { data } = child;\n        if (data !== undefined) {\n            const grandChildren: Array<VNode> = child.children;\n            addNS(data, grandChildren, child.sel);\n        }\n    }\n}\n\n// [v]node node\nexport function v(sel: string | undefined, data: VNodeData | undefined, children: Array<VNode | string> | undefined, text?: string | number | undefined, elm?: Element | Text | undefined, Ctor?: Class<Component>): VNode {\n    data = data || EmptyData;\n    let { key } = data;\n    // Try to identify the owner, but for root elements and other special cases, we\n    // can just fallback to 0 which means top level creation.\n    const uid = vmBeingRendered ? vmBeingRendered.uid : 0;\n    const vnode: VNode = { sel, data, children, text, elm, key, Ctor, uid };\n    assert.block(function devModeCheck() {\n        // adding toString to all vnodes for debuggability\n        vnode.toString = (): string => `[object:vnode ${sel}]`;\n    });\n    return vnode;\n}\n\n// [h]tml node\nexport function h(sel: string, data: VNodeData, children: Array<any>): VNode {\n    assert.isTrue(isString(sel), `h() 1st argument sel must be a string.`);\n    assert.isTrue(isObject(data), `h() 2nd argument data must be an object.`);\n    assert.isTrue(isArray(children), `h() 3rd argument children must be an array.`);\n    // checking reserved internal data properties\n    assert.invariant(data.class === undefined, `vnode.data.class should be undefined when calling h().`);\n    const { classMap, className } = data;\n    assert.isFalse(className && classMap, `vnode.data.className and vnode.data.classMap ambiguous declaration.`);\n    data.class = classMap || (className && getMapFromClassName(className));\n    assert.block(function devModeCheck() {\n        children.forEach((vnode) => {\n            if (vnode === null) {\n                return;\n            }\n            assert.vnode(vnode);\n        });\n    });\n    if (sel.length === 3 && sel.charCodeAt(0) === CHAR_S && sel.charCodeAt(1) === CHAR_V && sel.charCodeAt(2) === CHAR_G) {\n        addNS(data, children, sel);\n    }\n    return v(sel, data, children);\n}\n\n// [c]ustom element node\nexport function c(sel: string, Ctor: Class<Component>, data: VNodeData): VNode {\n    assert.isTrue(isString(sel), `c() 1st argument sel must be a string.`);\n    assert.isTrue(isFunction(Ctor), `c() 2nd argument Ctor must be a function.`);\n    assert.isTrue(isObject(data), `c() 3nd argument data must be an object.`);\n        // checking reserved internal data properties\n    assert.invariant(data.class === undefined, `vnode.data.class should be undefined when calling c().`);\n    const { key, slotset, attrs, on, className, classMap, props: _props } = data;\n    assert.isTrue(arguments.length < 4, `Compiler Issue: Custom elements expect up to 3 arguments, received ${arguments.length} instead.`);\n    data = { hook, key, slotset, attrs, on, _props };\n    assert.isFalse(className && classMap, `vnode.data.className and vnode.data.classMap ambiguous declaration.`);\n    data.class = classMap || (className && getMapFromClassName(className));\n    return v(sel, data, [], undefined, undefined, Ctor);\n}\n\n// [i]terable node\nexport function i(items: Array<any>, factory: Function): Array<VNode> {\n    const len = isArray(items) ? items.length : 0;\n    const list: Array<VNode> = [];\n    for (let i = 0; i < len; i += 1) {\n        const vnode = factory(items[i], i, i === 0, i === len);\n        if (isArray(vnode)) {\n            ArrayPush.apply(list, vnode);\n        } else {\n            ArrayPush.call(list, vnode);\n        }\n        assert.block(function devModeCheck() {\n            const vnodes = isArray(vnode) ? vnode : [vnode];\n            vnodes.forEach((vnode: VNode | any) => {\n                if (vnode && isObject(vnode) && vnode.sel && vnode.Ctor && isUndefined(vnode.key)) {\n                    // TODO - it'd be nice to log the owner component rather than the iteration children\n                    assert.logWarning(`Missing \"key\" attribute in iteration with child \"${toString(vnode.Ctor.name)}\", index ${i} of ${len}. Instead set a unique \"key\" attribute value on all iteration children so internal state can be preserved during rehydration.`);\n                }\n            });\n        });\n    }\n    return list;\n}\n\n/**\n * [f]lattening\n */\nexport function f(items: Array<any>): Array<any> {\n    assert.isTrue(isArray(items), 'flattening api can only work with arrays.');\n    const len = items.length;\n    const flattened: Array<VNode|null|number|string> = [];\n    for (let i = 0; i < len; i += 1) {\n        const item = items[i];\n        if (isArray(item)) {\n            ArrayPush.apply(flattened, item);\n        } else {\n            ArrayPush.call(flattened, item);\n        }\n    }\n    return flattened;\n}\n\n// [t]ext node\nexport function t(value: string | number): VNode {\n    return v(undefined, undefined, undefined, value);\n}\n\n// [d]ynamic value to produce a text vnode\nexport function d(value: any): VNode | null {\n    if (value === undefined || value === null) {\n        return null;\n    }\n    return v(undefined, undefined, undefined, value);\n}\n\n// [b]ind function\nexport function b(fn: EventListener): EventListener {\n    assert.vm(vmBeingRendered);\n    function handler(event: Event) {\n        // TODO: only if the event is `composed` it can be dispatched\n        invokeComponentCallback(handler.vm, handler.fn, handler.vm.component, [event]);\n    }\n    handler.vm = vmBeingRendered;\n    handler.fn = fn;\n    return handler;\n}\n","import assert from \"./assert\";\nimport { scheduleRehydration } from \"./vm\";\nimport { markComponentAsDirty } from \"./component\";\nimport { isUndefined, toString, create, ArrayIndexOf, ArrayPush } from \"./language\";\n\nconst TargetToReactiveRecordMap: Map<Object, ReactiveRecord> = new WeakMap();\n\nexport function notifyListeners(target: Object, key: string | Symbol) {\n    const reactiveRecord = TargetToReactiveRecordMap.get(target);\n    if (reactiveRecord) {\n        const value = reactiveRecord[key];\n        if (value) {\n            const len = value.length;\n            for (let i = 0; i < len; i += 1) {\n                const vm = value[i];\n                assert.vm(vm);\n                console.log(`Marking ${vm} as dirty: property \"${toString(key)}\" of ${toString(target)} was set to a new value.`);\n                if (!vm.isDirty) {\n                    markComponentAsDirty(vm);\n                    console.log(`Scheduling ${vm} for rehydration due to mutation.`);\n                    scheduleRehydration(vm);\n                }\n            }\n        }\n    }\n}\n\nexport function subscribeToSetHook(vm: VM, target: Object, key: string | Symbol) {\n    assert.vm(vm);\n    let reactiveRecord: ReactiveRecord = TargetToReactiveRecordMap.get(target);\n    if (isUndefined(reactiveRecord)) {\n        const newRecord: ReactiveRecord = create(null);\n        reactiveRecord = newRecord;\n        TargetToReactiveRecordMap.set(target, newRecord);\n    }\n    let value = reactiveRecord[key];\n    if (isUndefined(value)) {\n        value = [];\n        reactiveRecord[key] = value;\n    }\n    if (ArrayIndexOf.call(value, vm) === -1) {\n        ArrayPush.call(value, vm);\n        // we keep track of the sets that vm is listening from to be able to do some clean up later on\n        ArrayPush.call(vm.deps, value);\n    }\n}\n","import assert from \"./assert\";\nimport {\n    subscribeToSetHook,\n    notifyListeners,\n} from \"./watcher\";\nimport {\n    isRendering,\n    vmBeingRendered,\n} from \"./invoker\";\nimport { isUndefined, defineProperty, hasOwnProperty, toString, isArray, isObject, isNull } from \"./language\";\n\nconst ObjectPropertyToProxyCache: Map<Object, Object> = new WeakMap();\nconst ProxyCache: Set<Object> = new WeakSet(); // used to identify any proxy created by this piece of logic.\n\nfunction propertyGetter(target: Object, key: string | Symbol): any {\n    const value = target[key];\n    if (isRendering && vmBeingRendered) {\n        subscribeToSetHook(vmBeingRendered, target, key);\n    }\n    return (value && isObject(value)) ? getPropertyProxy(value) : value;\n}\n\nfunction propertySetter(target: Object, key: string | Symbol, value: any): boolean {\n    if (isRendering) {\n        assert.logError(`Setting property \"${toString(key)}\" of ${toString(target)} during the rendering process of ${vmBeingRendered} is invalid. The render phase must have no side effects on the state of any component.`);\n        return false;\n    }\n    const oldValue = target[key];\n    if (oldValue !== value) {\n        target[key] = value;\n        notifyListeners(target, key);\n    } else if (key === 'length' && isArray(target)) {\n        // fix for issue #236: push will add the new index, and by the time length\n        // is updated, the internal length is already equal to the new length value\n        // therefore, the oldValue is equal to the value. This is the forking logic\n        // to support this use case.\n        notifyListeners(target, key);\n    }\n    return true;\n}\n\nfunction propertyDelete(target: Object, key: string | Symbol): boolean {\n    delete target[key];\n    notifyListeners(target, key);\n    return true;\n}\n\nconst propertyProxyHandler = {\n    get: propertyGetter,\n    set: propertySetter,\n    deleteProperty: propertyDelete,\n};\n\nexport function getPropertyProxy(value: Object): any {\n    assert.isTrue(isObject(value), \"perf-optimization: avoid calling this method for non-object value.\");\n\n    // TODO: Provide a holistic way to deal with built-ins, right now we just care ignore Date\n    if (isNull(value) || value.constructor === Date) {\n        return value;\n    }\n    // TODO: perf opt - we should try to give identity to propertyProxies so we can test\n    // them faster than a weakmap lookup.\n    if (ProxyCache.has(value)) {\n        return value;\n    }\n\n    assert.block(function devModeCheck() {\n        const isNode = value instanceof Node;\n        assert.invariant(!isNode, `Do not store references to DOM Nodes. Instead use \\`this.querySelector()\\` and \\`this.querySelectorAll()\\` to find the nodes when needed.`);\n    });\n\n    let proxy = ObjectPropertyToProxyCache.get(value);\n    if (proxy) {\n        return proxy;\n    }\n    proxy = new Proxy(value, propertyProxyHandler);\n    ObjectPropertyToProxyCache.set(value, proxy);\n    ProxyCache.add(proxy);\n    return proxy;\n}\nconst InstanceField = 0;\nconst RegularField = 1;\nconst ExpandoField = 2;\nconst MutatedField = 3;\nconst ObjectToFieldsMap = new WeakMap();\n\nexport function extractOwnFields(component: Object, allowInstanceFields: boolean): HashTable<number> {\n    let fields = ObjectToFieldsMap.get(component);\n    let type = allowInstanceFields ? InstanceField : ExpandoField;\n    if (isUndefined(fields)) {\n        // only the first batch are considered private fields\n        type = RegularField;\n        fields = {};\n        ObjectToFieldsMap.set(component, fields);\n    }\n    for (let propName in component) {\n        if (hasOwnProperty.call(component, propName) && isUndefined(fields[propName])) {\n            fields[propName] = type;\n            let value = component[propName];\n\n            if (!allowInstanceFields) {\n                // replacing the field with a getter and a setter to track the mutations\n                // and provide meaningful errors\n                defineProperty(component, propName, {\n                    get: (): any => value,\n                    set: (newValue: any) => {\n                        value = newValue;\n                        fields[propName] = MutatedField;\n                    },\n                    configurable: false,\n                });\n            }\n        }\n    }\n    return fields;\n}\n\nexport function getOwnFields(target: Object): HashTable<number> {\n    let fields = ObjectToFieldsMap.get(target);\n    if (isUndefined(fields)) {\n        fields = {};\n    }\n    return fields;\n}\n","import assert from \"./assert\";\nimport * as api from \"./api\";\nimport { isArray, isFunction, isObject, create, ArrayIndexOf, toString, hasOwnProperty } from \"./language\";\nimport { getOwnFields, extractOwnFields } from \"./properties\";\nimport { vmBeingRendered } from \"./invoker\";\nimport { subscribeToSetHook } from \"./watcher\";\n\nconst EmptySlots = create(null);\n\nfunction getSlotsetValue(slotset: HashTable<Array<VNodes>>, slotName: string): Array<VNodes> {\n    assert.isTrue(isObject(slotset), `Invalid slotset value ${toString(slotset)}`);\n    // TODO: mark slotName as reactive\n    return slotset && slotset[slotName];\n}\n\nconst slotsetProxyHandler = {\n    get: (slotset: Object, key: string | Symbol): any => getSlotsetValue(slotset, key),\n    set: (): boolean => {\n        assert.invariant(false, `$slotset object cannot be mutated from template.`);\n        return false;\n    },\n    deleteProperty: (): boolean => {\n        assert.invariant(false, `$slotset object cannot be mutated from template.`);\n        return false;\n    },\n};\n\n// we use inception to track down the memoized object for each value used in a template from a component\nlet currentMemoized: HashTable<any> | null = null;\n\nconst cmpProxyHandler = {\n    get: (cmp: Object, key: string | Symbol): any => {\n        assert.invariant(currentMemoized !== null && vmBeingRendered !== null && vmBeingRendered.component === cmp, ` getFieldValue() should only be accessible during rendering phase.`);\n        if (key in currentMemoized) {\n            return currentMemoized[key];\n        }\n        assert.block(function devModeCheck() {\n            if (hasOwnProperty.call(cmp, key)) {\n                const fields = getOwnFields(cmp);\n                switch (fields[key]) {\n                    case 0: break; // Instance fields that have special privileges can go though\n                    case 1:\n                        assert.logError(`${cmp}'s template is accessing \\`this.${toString(key)}\\` directly, which is declared in the constructor and considered a private field. Instead access it via a getter or make it reactive by moving it to \\`this.state.${toString(key)}\\`.`);\n                        break;\n                    case 2:\n                        assert.logError(`${cmp}'s template is accessing \\`this.${toString(key)}\\` directly, which is added as an expando property of the component and considered a private field. Instead access it via a getter or make it reactive by moving it to \\`this.state.${toString(key)}\\`.`);\n                        break;\n                    case 3:\n                        assert.logError(`${cmp}'s template is accessing \\`this.${toString(key)}\\`, which is considered a mutable private field but mutations cannot be observed. Instead move it to \\`this.state.${toString(key)}\\`.`);\n                        break;\n                    default:\n                        // TODO: this should never really happen because the compiler should always validate\n                        console.warn(`${cmp}'s template is accessing \\`this.${toString(key)}\\`, which is not declared by the component. This is likely a typo in the template.`);\n                }\n            }\n        });\n\n        // slow path to access component's properties from template\n        let value;\n        const { cmpState, cmpProps, def: { props: publicPropsConfig } } = vmBeingRendered;\n        if (key === 'state' && cmpState) {\n            value = cmpState;\n        } else if (key in publicPropsConfig) {\n            subscribeToSetHook(vmBeingRendered, cmpProps, key);\n            value = cmpProps[key];\n        } else {\n            value = cmp[key];\n        }\n        currentMemoized[key] = value;\n        return value;\n    },\n    set: (cmp: Object, key: string | Symbol): boolean => {\n        assert.logError(`Invalid assignment: ${cmp} cannot set a new value for property ${key} during the rendering phase.`);\n        return false;\n    },\n    deleteProperty: (cmp: Object, key: string | Symbol): boolean => {\n        assert.logError(`Invalid delete statement: ${cmp} cannot delete property ${key} during the rendering phase.`);\n        return false;\n    },\n};\n\nexport function evaluateTemplate(vm: VM, html: any): Array<VNode|null> {\n    assert.vm(vm);\n    assert.isTrue(isFunction(html), `evaluateTemplate() second argument must be a function instead of ${html}`);\n    // TODO: add identity to the html functions\n    let { component, context, cmpSlots = EmptySlots, cmpTemplate } = vm;\n    // reset the cache momizer for template when needed\n    if (html !== cmpTemplate) {\n        context.tplCache = create(null);\n        vm.cmpTemplate = html;\n    }\n    assert.isTrue(isObject(context.tplCache), `vm.context.tplCache must be an object associated to ${cmpTemplate}.`);\n    assert.block(function devModeCheck() {\n        // before every render, in dev-mode, we will like to know all expandos and\n        // all private-fields-like properties, so we can give meaningful errors.\n        extractOwnFields(component);\n\n        // validating slot names\n        const { slots = [] } = html;\n        for (let slotName in cmpSlots) {\n            if (ArrayIndexOf.call(slots, slotName) === -1) {\n                // TODO: this should never really happen because the compiler should always validate\n                console.warn(`Ignoring unknown provided slot name \"${slotName}\" in ${vm}. This is probably a typo on the slot attribute.`);\n            }\n        }\n\n        // validating identifiers used by template that should be provided by the component\n        const { ids = [] } = html;\n        ids.forEach((propName: string) => {\n            if (!(propName in component)) {\n                // TODO: this should never really happen because the compiler should always validate\n                console.warn(`The template rendered by ${vm} references \\`this.${propName}\\`, which is not declared. This is likely a typo in the template.`);\n            }\n        });\n\n    });\n    const { proxy: slotset, revoke: slotsetRevoke } = Proxy.revocable(cmpSlots, slotsetProxyHandler);\n    const { proxy: cmp, revoke: componentRevoke } = Proxy.revocable(component, cmpProxyHandler);\n    const outerMemoized = currentMemoized;\n    currentMemoized = create(null);\n    let vnodes = html.call(undefined, api, cmp, slotset, context.tplCache);\n    assert.invariant(isArray(vnodes), `Compiler should produce html functions that always return an array.`);\n    currentMemoized = outerMemoized; // inception to memoize the accessing of keys from cmp for every render cycle\n    slotsetRevoke();\n    componentRevoke();\n    return vnodes;\n}\n","import assert from \"./assert\";\nimport { isFunction, isUndefined, isPromise } from \"./language\";\nimport { evaluateTemplate } from \"./template\";\nimport { rehydrate } from \"./vm\";\n\nfunction attemptToEvaluateResolvedTemplate(vm: VM, html: Template | undefined, originalPromise: Promise<Template | undefined>) {\n    let { context } = vm;\n    if (originalPromise !== context.tplPromise) {\n        // resolution of an old promise that is not longer relevant, ignoring it.\n        return;\n    }\n    if (isFunction(html)) {\n        context.tplResolvedValue = html;\n        assert.block(function devModeCheck() {\n            if (html === vm.cmpTemplate) {\n                assert.logError(`component ${vm.component} is returning a new promise everytime the render() method is invoked, even though the promise resolves to the same template ${html}. You should cache the promise outside of the render method, and return the same promise everytime, otherwise you will incurr in some performance penalty.`);\n            }\n        });\n        // forcing the vm to be dirty so it can render its content.\n        vm.isDirty = true;\n        rehydrate(vm);\n    } else if (!isUndefined(html)) {\n        assert.fail(`The template rendered by ${vm} must return an imported template tag (e.g.: \\`import html from \"./mytemplate.html\"\\`) or undefined, instead, it has returned ${html}.`);\n    }\n    // if the promise resolves to `undefined`, do nothing...\n}\n\nexport function deferredTemplate(vm: VM, html: Promise<Template | undefined>): Array<VNode> {\n    assert.vm(vm);\n    assert.isTrue(isPromise(html), `deferredTemplate() second argument must be a promise instead of ${html}`);\n    let { context } = vm;\n    const { tplResolvedValue, tplPromise } = context;\n    if (html !== tplPromise) {\n        context.tplPromise = html;\n        context.tplResolvedValue = undefined;\n        html.then((fn) => attemptToEvaluateResolvedTemplate(vm, fn, html));\n    } else if (tplResolvedValue) {\n        // if multiple invokes to render() return the same promise, we can rehydrate using the\n        // underlaying resolved value of that promise.\n        return evaluateTemplate(vm, tplResolvedValue);\n    }\n    return [];\n}\n","import assert from \"./assert\";\nimport {\n    currentContext,\n    establishContext,\n} from \"./context\";\nimport { evaluateTemplate } from \"./template\";\nimport { deferredTemplate } from \"./defer\";\nimport { isUndefined, isFunction, isPromise } from \"./language\";\n\nexport let isRendering: boolean = false;\nexport let vmBeingRendered: VM|null = null;\n\nexport function invokeComponentCallback(vm: VM, fn: () => any, fnCtx: any, args?: Array<any>): any {\n    const { context } = vm;\n    const ctx = currentContext;\n    establishContext(context);\n    let result, error;\n    try {\n        // TODO: membrane proxy for all args that are objects\n        result = fn.apply(fnCtx, args);\n    } catch (e) {\n        error = e;\n    }\n    establishContext(ctx);\n    if (error) {\n        throw error; // rethrowing the original error after restoring the context\n    }\n    return result;\n}\n\nexport function invokeComponentMethod(vm: VM, methodName: string, args?: Array<any>): any {\n    const { component } = vm;\n    return invokeComponentCallback(vm, component[methodName], component, args);\n}\n\nexport function invokeComponentConstructor(vm: VM, Ctor: Class<Component>): Component {\n    const { context } = vm;\n    const ctx = currentContext;\n    establishContext(context);\n    let component, error;\n    try {\n        component = new Ctor();\n    } catch (e) {\n        error = e;\n    }\n    establishContext(ctx);\n    if (error) {\n        throw error; // rethrowing the original error after restoring the context\n    }\n    return component;\n}\n\nexport function invokeComponentRenderMethod(vm: VM): Array<VNode> {\n    const { component, context } = vm;\n    const ctx = currentContext;\n    establishContext(context);\n    const isRenderingInception = isRendering;\n    const vmBeingRenderedInception = vmBeingRendered;\n    isRendering = true;\n    vmBeingRendered = vm;\n    let result, error;\n    try {\n        const html = component.render();\n        if (isFunction(html)) {\n            result = evaluateTemplate(vm, html);\n        } else if (isPromise(html)) {\n            result = deferredTemplate(vm, html);\n        } else if (!isUndefined(html)) {\n            assert.fail(`The template rendered by ${vm} must return an imported template tag (e.g.: \\`import html from \"./mytemplate.html\"\\`) or undefined, instead, it has returned ${html}.`);\n        }\n    } catch (e) {\n        error = e;\n    }\n    isRendering = isRenderingInception;\n    vmBeingRendered = vmBeingRenderedInception;\n    establishContext(ctx);\n    if (error) {\n        throw error; // rethrowing the original error after restoring the context\n    }\n    return result || [];\n}\n\nexport function invokeComponentAttributeChangedCallback(vm: VM, attrName: string, oldValue: any, newValue: any) {\n    const { component, context } = vm;\n    const { attributeChangedCallback } = component;\n    if (isUndefined(attributeChangedCallback)) {\n        return;\n    }\n    const ctx = currentContext;\n    establishContext(context);\n    let error;\n    try {\n        component.attributeChangedCallback(attrName, oldValue, newValue);\n    } catch (e) {\n        error = e;\n    }\n    establishContext(ctx);\n    if (error) {\n        throw error; // rethrowing the original error after restoring the context\n    }\n}\n","import assert from \"./assert\";\nimport {\n    invokeComponentConstructor,\n    invokeComponentRenderMethod,\n    isRendering,\n    vmBeingRendered,\n    invokeComponentAttributeChangedCallback,\n    invokeComponentMethod,\n    invokeComponentCallback,\n} from \"./invoker\";\nimport { notifyListeners } from \"./watcher\";\nimport { isArray, isUndefined, create, toString, ArrayPush, ArrayIndexOf, ArraySplice, isObject } from \"./language\";\nimport { addCallbackToNextTick, getAttrNameFromPropName, noop } from \"./utils\";\nimport { extractOwnFields, getPropertyProxy } from \"./properties\";\nimport { invokeServiceHook, Services } from \"./services\";\n\nexport let vmBeingConstructed: VM | null = null;\n\nexport function isBeingConstructed(vm: VM): boolean {\n    assert.vm(vm);\n    return vmBeingConstructed === vm;\n}\n\nexport function createComponent(vm: VM, Ctor: Class<Component>) {\n    assert.vm(vm);\n    const { cmpProps, def: { wire, methods: publicMethodsConfig } } = vm;\n    // expose public methods as props on the Element\n    for (let methodName in publicMethodsConfig) {\n        cmpProps[methodName] = function (): any {\n            return invokeComponentMethod(vm, methodName, arguments)\n        };\n    }\n    // create the component instance\n    const vmBeingConstructedInception = vmBeingConstructed;\n    vmBeingConstructed = vm;\n    const component = invokeComponentConstructor(vm, Ctor);\n    vmBeingConstructed = vmBeingConstructedInception;\n    assert.block(function devModeCheck() {\n        extractOwnFields(component);\n    });\n    assert.isTrue(vm.component === component, `Invalid construction for ${vm}, maybe you are missing the call to super() on classes extending Element.`);\n    if (wire) {\n        const { wiring } = Services;\n        if (wiring) {\n            invokeServiceHook(vm, wiring);\n            assert.block(function devModeCheck() {\n                // Mark instance properties for services special\n                extractOwnFields(component, true);\n            });\n\n        }\n    }\n}\n\nexport function clearListeners(vm: VM) {\n    assert.vm(vm);\n    const { deps } = vm;\n    const len = deps.length;\n    if (len) {\n        for (let i = 0; i < len; i += 1) {\n            const set = deps[i];\n            const pos = ArrayIndexOf.call(deps[i], vm);\n            assert.invariant(pos > -1, `when clearing up deps, the vm must be part of the collection.`);\n            ArraySplice.call(set, pos, 1);\n        }\n        deps.length = 0;\n    }\n}\n\nexport function updateComponentProp(vm: VM, propName: string, newValue: any) {\n    assert.vm(vm);\n    const { cmpProps, def: { props: publicPropsConfig, observedAttrs } } = vm;\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of ${vm}.${propName}`);\n    const config: PropDef = publicPropsConfig[propName];\n    if (isUndefined(config)) {\n        // TODO: this should never really happen because the compiler should always validate\n        console.warn(`Ignoring unknown public property ${propName} of ${vm}. This is likely a typo on the corresponding attribute \"${getAttrNameFromPropName(propName)}\".`);\n        return;\n    }\n    let oldValue = cmpProps[propName];\n    if (oldValue !== newValue) {\n        assert.block(function devModeCheck() {\n            if (isObject(newValue)) {\n                assert.invariant(getPropertyProxy(newValue) === newValue, `updateComponentProp() should always received proxified object values instead of ${newValue} in ${vm}.`);\n            }\n        });\n        cmpProps[propName] = newValue;\n        const attrName = getAttrNameFromPropName(propName);\n        if (attrName in observedAttrs) {\n            invokeComponentAttributeChangedCallback(vm, attrName, oldValue, newValue);\n        }\n        notifyListeners(cmpProps, propName);\n    }\n}\n\nexport function resetComponentProp(vm: VM, propName: string) {\n    assert.vm(vm);\n    const { cmpProps, def: { props: publicPropsConfig, observedAttrs } } = vm;\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of ${vm}.${propName}`);\n    const config: PropDef = publicPropsConfig[propName];\n    if (isUndefined(config)) {\n        // not need to log the error here because we will do it on updateComponentProp()\n        return;\n    }\n    let oldValue = cmpProps[propName];\n    let newValue = undefined;\n    if (oldValue !== newValue) {\n        cmpProps[propName] = newValue;\n        const attrName = getAttrNameFromPropName(propName);\n        if (attrName in observedAttrs) {\n            invokeComponentAttributeChangedCallback(vm, attrName, oldValue, newValue);\n        }\n        notifyListeners(cmpProps, propName);\n    }\n}\n\nexport function createComponentListener(): EventListener {\n    return function handler(event: Event) {\n        dispatchComponentEvent(handler.vm, event);\n    }\n}\n\nexport function addComponentEventListener(vm: VM, eventName: string, newHandler: EventListener) {\n    assert.vm(vm);\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of ${vm} by adding a new event listener for \"${eventName}\".`);\n    let { cmpEvents, cmpListener } = vm;\n    if (isUndefined(cmpEvents)) {\n        // this piece of code must be in sync with modules/component-events\n        vm.cmpEvents = cmpEvents = create(null);\n        vm.cmpListener = cmpListener = createComponentListener();\n        cmpListener.vm = vm;\n    }\n    if (isUndefined(cmpEvents[eventName])) {\n        cmpEvents[eventName] = [];\n        // this is not only an optimization, it is also needed to avoid adding the same\n        // listener twice when the initial diffing algo kicks in without an old vm to track\n        // what was already added to the DOM.\n        if (!vm.isDirty) {\n            // if the element is already in the DOM and rendered, we intentionally make a sync mutation\n            // here and also keep track of the mutation for a possible rehydration later on without having\n            // to rehydrate just now.\n            const { vnode: { elm } } = vm;\n            elm.addEventListener(eventName, cmpListener, false);\n        }\n    }\n    assert.block(function devModeCheck() {\n        if (cmpEvents[eventName] && ArrayIndexOf.call(cmpEvents[eventName], newHandler) !== -1) {\n            assert.logWarning(`${vm} has duplicate listeners for event \"${eventName}\". Instead add the event listener in the connectedCallback() hook.`);\n        }\n    });\n    ArrayPush.call(cmpEvents[eventName], newHandler);\n}\n\nexport function removeComponentEventListener(vm: VM, eventName: string, oldHandler: EventListener) {\n    assert.vm(vm);\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of ${vm} by removing an event listener for \"${eventName}\".`);\n    const { cmpEvents } = vm;\n    if (cmpEvents) {\n        const handlers = cmpEvents[eventName];\n        const pos = handlers && ArrayIndexOf.call(handlers, oldHandler);\n        if (handlers && pos > -1) {\n            ArraySplice.call(cmpEvents[eventName], pos, 1);\n            return;\n        }\n    }\n    assert.block(function devModeCheck() {\n        assert.logWarning(`Did not find event listener ${oldHandler} for event \"${eventName}\" on ${vm}. Instead only remove an event listener once.`);\n    });\n}\n\nexport function dispatchComponentEvent(vm: VM, event: Event): boolean {\n    assert.vm(vm);\n    assert.invariant(event instanceof Event, `dispatchComponentEvent() must receive an event instead of ${event}`);\n    const { cmpEvents, component } = vm;\n    const { type } = event;\n    assert.invariant(cmpEvents && cmpEvents[type] && cmpEvents[type].length, `dispatchComponentEvent() should only be invoked if there is at least one listener in queue for ${type} on ${vm}.`);\n    const handlers = cmpEvents[type];\n    let uninterrupted = true;\n    const { stopImmediatePropagation } = event;\n    event.stopImmediatePropagation = function() {\n        uninterrupted = false;\n        stopImmediatePropagation.call(this);\n    }\n    for (let i = 0, len = handlers.length; uninterrupted && i < len; i += 1) {\n        // TODO: only if the event is `composed` it can be dispatched\n        invokeComponentCallback(vm, handlers[i], component, [event]);\n    }\n    // restoring original methods\n    event.stopImmediatePropagation = stopImmediatePropagation;\n}\n\nexport function addComponentSlot(vm: VM, slotName: string, newValue: Array<VNode>) {\n    assert.vm(vm);\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of slot ${slotName} in ${vm}`);\n    assert.isTrue(isArray(newValue) && newValue.length > 0, `Slots can only be set to a non-empty array, instead received ${toString(newValue)} for slot ${slotName} in ${vm}.`)\n    let { cmpSlots } = vm;\n    let oldValue = cmpSlots && cmpSlots[slotName];\n    // TODO: hot-slots names are those slots used during the last rendering cycle, and only if\n    // one of those is changed, the vm should be marked as dirty.\n\n    // TODO: Issue #133\n    if (!isArray(newValue)) {\n        newValue = undefined;\n    }\n    if (oldValue !== newValue) {\n        if (isUndefined(cmpSlots)) {\n            vm.cmpSlots = cmpSlots = create(null);\n        }\n        cmpSlots[slotName] = newValue;\n        console.log(`Marking ${vm} as dirty: a new value for slot \"${slotName}\" was added.`);\n        if (!vm.isDirty) {\n            markComponentAsDirty(vm);\n        }\n    }\n}\n\nexport function removeComponentSlot(vm: VM, slotName: string) {\n    assert.vm(vm);\n    assert.invariant(!isRendering, `${vmBeingRendered}.render() method has side effects on the state of slot ${slotName} in ${vm}`);\n    // TODO: hot-slots names are those slots used during the last rendering cycle, and only if\n    // one of those is changed, the vm should be marked as dirty.\n    const { cmpSlots } = vm;\n    if (cmpSlots && cmpSlots[slotName]) {\n        cmpSlots[slotName] = undefined; // delete will de-opt the cmpSlots, better to set it to undefined\n        console.log(`Marking ${vm} as dirty: the value of slot \"${slotName}\" was removed.`);\n        if (!vm.isDirty) {\n            markComponentAsDirty(vm);\n        }\n    }\n}\n\nexport function renderComponent(vm: VM) {\n    assert.vm(vm);\n    assert.invariant(vm.isDirty, `${vm} is not dirty.`);\n    console.log(`${vm} is being updated.`);\n    clearListeners(vm);\n    const vnodes = invokeComponentRenderMethod(vm);\n    vm.isDirty = false;\n    vm.fragment = vnodes;\n    assert.invariant(isArray(vnodes), `${vm}.render() should always return an array of vnodes instead of ${vnodes}`);\n    const { component: { renderedCallback } } = vm;\n    if (renderedCallback && renderedCallback !== noop) {\n        addCallbackToNextTick((): void => invokeComponentMethod(vm, 'renderedCallback'));\n    }\n    const { rehydrated } = Services;\n    if (rehydrated) {\n        addCallbackToNextTick((): void => invokeServiceHook(vm, rehydrated));\n    }\n}\n\nexport function markComponentAsDirty(vm: VM) {\n    assert.vm(vm);\n    assert.isFalse(vm.isDirty, `markComponentAsDirty() for ${vm} should not be called when the componet is already dirty.`);\n    assert.isFalse(isRendering, `markComponentAsDirty() for ${vm} cannot be called during rendering of ${vmBeingRendered}.`);\n    vm.isDirty = true;\n}\n","import assert from \"./assert\";\nimport { ViewModelReflection } from \"./html-element\";\nimport { ArrayFilter, defineProperty } from \"./language\";\nimport { isBeingConstructed } from \"./component\";\nimport { OwnerKey, isNodeOwnedByVM, getMembrane } from \"./vm\";\nimport { register } from \"./services\";\n\nconst { querySelector, querySelectorAll } = Element.prototype;\n\nfunction getLinkedElement(root: Root): HTMLElement {\n    return root[ViewModelReflection].vnode.elm;\n}\n\nexport function shadowRootQuerySelector (shadowRoot: ShadowRoot, selector: string): MembraneObject | undefined {\n    const vm = shadowRoot[ViewModelReflection];\n    assert.isFalse(isBeingConstructed(vm), `this.root.querySelector() cannot be called during the construction of the custom element for ${this} because no content has been rendered yet.`);\n    const elm = getLinkedElement(shadowRoot);\n    \n    return getMembrane(vm).pierce(elm).querySelector(selector);\n}\n\nexport function shadowRootQuerySelectorAll (shadowRoot: ShadowRoot, selector: string): MembraneObject {\n    const vm = shadowRoot[ViewModelReflection];\n    assert.isFalse(isBeingConstructed(vm), `this.root.querySelectorAll() cannot be called during the construction of the custom element for ${this} because no content has been rendered yet.`);\n    const elm = getLinkedElement(shadowRoot);\n    \n    return getMembrane(vm).pierce(elm).querySelectorAll(selector);\n}\n\nexport function Root(vm: VM): ShadowRoot {\n    assert.vm(vm);\n    defineProperty(this, ViewModelReflection, {\n        value: vm,\n        writable: false,\n        enumerable: false,\n        configurable: false,\n    });\n}\n\nRoot.prototype = {\n    get mode(): string {\n        return 'closed';\n    },\n    get host(): Component {\n        return this[ViewModelReflection].component;\n    },\n    querySelector(selector: string): Element | undefined {\n        const node = shadowRootQuerySelector(this, selector);\n        assert.block(() => {\n            const vm = this[ViewModelReflection];\n            if (!node && vm.component.querySelector(selector)) {\n                assert.logWarning(`this.root.querySelector() can only return elements from the template declaration of ${vm.component}. It seems that you are looking for elements that were passed via slots, in which case you should use this.querySelector() instead.`);\n            }\n        });\n\n        return node;\n    },\n    querySelectorAll(selector: string): MembraneObject {\n        const nodeList = shadowRootQuerySelectorAll(this, selector);\n        assert.block(() => {\n            const vm = this[ViewModelReflection];\n            if (nodeList.length === 0 && vm.component.querySelectorAll(selector).length) {\n                assert.logWarning(`this.root.querySelectorAll() can only return elements from template declaration of ${vm.component}. It seems that you are looking for elements that were passed via slots, in which case you should use this.querySelectorAll() instead.`);\n            }\n        });\n        return nodeList;\n    },\n    toString(): string {\n        const vm = this[ViewModelReflection];\n        return `Current ShadowRoot for ${vm.component}`;\n    }\n};\n\nfunction getFirstMatch(vm: VM, elm: Element, selector: string): Node | undefined {\n    const nodeList = querySelectorAll.call(elm, selector);\n    // search for all, and find the first node that is owned by the VM in question.\n    for (let i = 0, len = nodeList.length; i < len; i += 1) {\n        if (isNodeOwnedByVM(vm, nodeList[i])) {\n            return getMembrane(vm).pierce(nodeList[i]);\n        }\n    }\n}\n\nfunction getAllMatches(vm: VM, elm: Element, selector: string): NodeList {\n    const nodeList = querySelectorAll.call(elm, selector);\n    const filteredNodes = ArrayFilter.call(nodeList, (node: Node): boolean => isNodeOwnedByVM(vm, node));\n    return getMembrane(vm).pierce(filteredNodes);\n}\n\nfunction isParentNodeKeyword(key: string): boolean {\n    return (key === 'parentNode' || key === 'parentElement');\n}\n\n// Registering a service to enforce the shadowDOM semantics via the Raptor membrane implementation\nregister({\n    piercing(component: Component, data: VNodeData, def: ComponentDef, context: HashTable<any>, target: Replicable, key: Symbol | string, value: any, callback: (value: any) => void) {\n        if (value === querySelector) {\n            // TODO: it is possible that they invoke the querySelector() function via call or apply to set a new context, what should\n            // we do in that case? Right now this is essentially a bound function, but the original is not.\n            return callback((selector: string): Node | undefined => getFirstMatch(component[ViewModelReflection], target, selector));\n        }\n        if (value === querySelectorAll) {\n            // TODO: it is possible that they invoke the querySelectorAll() function via call or apply to set a new context, what should\n            // we do in that case? Right now this is essentially a bound function, but the original is not.\n            return callback((selector: string): Node | undefined => getAllMatches(component[ViewModelReflection], target, selector));\n        }\n        if (value && value.splitText && isParentNodeKeyword(key)) {\n            if (value === component[ViewModelReflection].vnode.elm) {\n                // walking up via parent chain might end up in the shadow root element\n                return callback(component.root);\n            } else if (target[OwnerKey] !== value[OwnerKey]) {\n                // cutting out access to something outside of the shadow of the current target by calling back with undefined\n                return callback();\n            }\n        }\n    }\n});\n","import assert from \"./assert\";\nimport { ClassList } from \"./class-list\";\nimport { Root, shadowRootQuerySelector, shadowRootQuerySelectorAll } from \"./root\";\nimport { vmBeingConstructed, isBeingConstructed, addComponentEventListener, removeComponentEventListener } from \"./component\";\nimport { ArrayFilter, isArray, freeze, seal, defineProperty, getOwnPropertyNames, isUndefined, isObject, create } from \"./language\";\nimport { getPropertyProxy } from \"./properties\";\nimport { GlobalHTMLProperties } from \"./dom\";\nimport { getPropNameFromAttrName, noop, toAttributeValue } from \"./utils\";\nimport { isRendering, vmBeingRendered } from \"./invoker\";\nimport { subscribeToSetHook } from \"./watcher\";\nimport { wasNodePassedIntoVM, getMembrane } from \"./vm\";\n\nexport const ViewModelReflection = Symbol('internal');\n\nfunction getLinkedElement(cmp: ComponentElement): HTMLElement {\n    return cmp[ViewModelReflection].vnode.elm;\n}\n\nfunction querySelectorAllFromComponent(cmp: ComponentElement, selectors: string): NodeList {\n    const elm = getLinkedElement(cmp);\n    return elm.querySelectorAll(selectors);\n}\n\nexport function createPublicPropertyDescriptorMap(propName: string): PropertyDescriptorMap {\n    const descriptors = {};\n    function getter(): any {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        if (isBeingConstructed(vm)) {\n            assert.logError(`${vm} constructor should not read the value of property \"${propName}\". The owner component has not yet set the value. Instead use the constructor to set default values for properties.`);\n            return;\n        }\n        const { cmpProps } = vm;\n        if (isRendering) {\n            // this is needed because the proxy used by template is not sufficient\n            // for public props accessed from within a getter in the component.\n            subscribeToSetHook(vmBeingRendered, cmpProps, propName);\n        }\n        return cmpProps[propName];\n    }\n    function setter(value: any) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        if (!isBeingConstructed(vm)) {\n            assert.logError(`${vm} can only set a new value for property \"${propName}\" during construction.`);\n            return;\n        }\n        const { cmpProps } = vm;\n        // proxifying before storing it is a must for public props\n        cmpProps[propName] = isObject(value) ? getPropertyProxy(value) : value;\n    }\n    descriptors[propName] = {\n        get: getter,\n        set: setter,\n        enumerable: true,\n        configurable: true,\n    };\n    return descriptors;\n}\n\n// This should be as performant as possible, while any initialization should be done lazily\nfunction ComponentElement(): ComponentElement {\n    assert.vm(vmBeingConstructed, `Invalid construction.`);\n    assert.vnode(vmBeingConstructed.vnode, `Invalid construction.`);\n    const vnode = vmBeingConstructed.vnode;\n    assert.invariant(vnode.elm instanceof HTMLElement, `Component creation requires a DOM element to be associated to ${vnode}.`);\n    vmBeingConstructed.component = this;\n    this[ViewModelReflection] = vmBeingConstructed;\n}\n\nComponentElement.prototype = {\n    // Raptor.Element APIs\n    renderedCallback: noop,\n    render: noop,\n\n    // Web Component - The Good Parts\n    connectedCallback: noop,\n    disconnectedCallback: noop,\n\n    // HTML Element - The Good Parts\n    dispatchEvent(event: Event): boolean {\n        const elm = getLinkedElement(this);\n        assert.isFalse(isBeingConstructed(this[ViewModelReflection]), `this.dispatchEvent() should not be called during the construction of the custom element for ${this} because no one is listening for the event ${event} just yet.`);\n        // custom elements will rely on the DOM dispatchEvent mechanism\n        return elm.dispatchEvent(event);\n    },\n    addEventListener(type: string, listener: EventListener) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        assert.block(function devModeCheck() {\n            if (arguments.length > 2) {\n                // TODO: can we synthetically implement `passive` and `once`? Capture is probably ok not supporting it.\n                assert.logWarning(`this.addEventListener() on ${vm} does not support more than 2 arguments. Options to make the listener passive, once or capture are not allowed at the top level of the component's fragment.`);\n            }\n        });\n        addComponentEventListener(vm, type, listener);\n    },\n    removeEventListener(type: string, listener: EventListener) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        assert.block(function devModeCheck() {\n            if (arguments.length > 2) {\n                assert.logWarning(`this.removeEventListener() on ${vm} does not support more than 2 arguments. Options to make the listener passive or capture are not allowed at the top level of the component's fragment.`);\n            }\n        });\n        removeComponentEventListener(vm, type, listener);\n    },\n    getAttribute(attrName: string): string | null {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        const { vnode: { data: { attrs } } } = vm;\n        if (!attrName) {\n            if (arguments.length === 0) {\n                throw new TypeError(`Failed to execute \\`getAttribute\\` on ${vm}: 1 argument is required, got 0.`);\n            }\n            return null;\n        }\n        // logging errors for experimentals and special attributes\n        assert.block(function devModeCheck() {\n            const propName = getPropNameFromAttrName(attrName);\n            const { def: { props: publicPropsConfig } } = vm;\n            if (publicPropsConfig[propName]) {\n                throw new ReferenceError(`Attribute \"${attrName}\" corresponds to public property ${propName} from ${vm}. Instead use \\`this.${propName}\\`. Only use \\`getAttribute()\\` to access global HTML attributes.`);\n            } else if (GlobalHTMLProperties[propName] && GlobalHTMLProperties[propName].attribute) {\n                const { error, experimental } = GlobalHTMLProperties[propName];\n                if (error) {\n                    console.error(error);\n                } else if (experimental) {\n                    console.error(`Attribute \\`${attrName}\\` is an experimental attribute that is not standardized or supported by all browsers. Property \"${propName}\" and attribute \"${attrName}\" are ignored.`);\n                }\n            }\n        });\n        // normalizing attrs from compiler into HTML global attributes\n        let raw = attrs && attrName in attrs ? attrs[attrName] : null;\n        return toAttributeValue(raw);\n    },\n    getBoundingClientRect(): DOMRect {\n        const elm = getLinkedElement(this);\n        assert.isFalse(isBeingConstructed(this[ViewModelReflection]), `this.getBoundingClientRect() should not be called during the construction of the custom element for ${this} because the element is not yet in the DOM, instead, you can use it in one of the available life-cycle hooks.`);\n        return elm.getBoundingClientRect();\n    },\n    querySelector(selectors: string): Node {\n        const vm = this[ViewModelReflection];\n        assert.isFalse(isBeingConstructed(vm), `this.querySelector() cannot be called during the construction of the custom element for ${this} because no children has been added to this element yet.`);\n        const nodeList = querySelectorAllFromComponent(this, selectors);\n        for (let i = 0, len = nodeList.length; i < len; i += 1) {\n            if (wasNodePassedIntoVM(vm, nodeList[i])) {\n                // TODO: locker service might need to return a membrane proxy\n                return getMembrane(vm).pierce(nodeList[i]);\n            }\n        }\n        assert.block(() => {\n            if (shadowRootQuerySelector(this.root, selectors)) {\n                assert.logWarning(`this.querySelector() can only return elements that were passed into ${vm.component} via slots. It seems that you are looking for elements from your template declaration, in which case you should use this.root.querySelector() instead.`);\n            }\n        });\n    },\n    querySelectorAll(selectors: string): NodeList {\n        const vm = this[ViewModelReflection];\n        assert.isFalse(isBeingConstructed(vm), `this.querySelectorAll() cannot be called during the construction of the custom element for ${this} because no children has been added to this element yet.`);\n        const nodeList = querySelectorAllFromComponent(this, selectors);\n        // TODO: locker service might need to do something here\n        const filteredNodes = ArrayFilter.call(nodeList, (node: Node): boolean => wasNodePassedIntoVM(vm, node));\n        assert.block(() => {\n            if (filteredNodes.length === 0 && shadowRootQuerySelectorAll(this.root, selectors).length) {\n                assert.logWarning(`this.querySelectorAll() can only return elements that were passed into ${vm.component} via slots. It seems that you are looking for elements from your template declaration, in which case you should use this.root.querySelectorAll() instead.`);\n            }\n        });\n        return  getMembrane(vm).pierce(filteredNodes);\n    },\n    get tagName(): string {\n        const elm = getLinkedElement(this);\n        return elm.tagName + ''; // avoiding side-channeling\n    },\n    get classList(): DOMTokenList {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        let { classListObj } = vm;\n        // lazy creation of the ClassList Object the first time it is accessed.\n        if (isUndefined(classListObj)) {\n            vm.cmpClasses = {};\n            classListObj = new ClassList(vm);\n            vm.classListObj = classListObj;\n        }\n        return classListObj;\n    },\n    get root(): ShadowRoot {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        let { cmpRoot } = vm;\n        // lazy creation of the ShadowRoot Object the first time it is accessed.\n        if (isUndefined(cmpRoot)) {\n            cmpRoot = new Root(vm);\n            vm.cmpRoot = cmpRoot;\n        }\n        return cmpRoot;\n    },\n    get state(): HashTable<any> {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        let { cmpState } = vm;\n        if (isUndefined(cmpState)) {\n            cmpState = vm.cmpState = getPropertyProxy(create(null)); // lazy creation of the cmpState\n        }\n        return cmpState;\n    },\n    set state(newState: HashTable<any>) {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        if (!newState || !isObject(newState) || isArray(newState)) {\n            assert.logError(`${vm} failed to set new state to ${newState}. \\`this.state\\` can only be set to an object.`);\n            return;\n        }\n        let { cmpState } = vm;\n        if (isUndefined(cmpState)) {\n            cmpState = vm.cmpState = getPropertyProxy(create(null)); // lazy creation of the cmpState\n        }\n        if (cmpState !== newState) {\n            for (let key in cmpState) {\n                if (!(key in newState)) {\n                    cmpState[key] = undefined; // prefer setting to undefined over deleting for perf reasons\n                }\n            }\n            for (let key in newState) {\n                cmpState[key] = newState[key];\n            }\n        }\n    },\n    toString(): string {\n        const vm = this[ViewModelReflection];\n        assert.vm(vm);\n        const { vnode: { sel, data: { attrs } } } = vm;\n        const is = attrs && attrs.is;\n        return `<${sel}${ is ? ' is=\"${is}' : '' }>`;\n    },\n}\n\n// Global HTML Attributes\nassert.block(function devModeCheck() {\n\n    getOwnPropertyNames(GlobalHTMLProperties).forEach((propName: string) => {\n        if (propName in ComponentElement.prototype) {\n            return; // no need to redefine something that we are already exposing\n        }\n        defineProperty(ComponentElement.prototype, propName, {\n            get: function () {\n                const vm = this[ViewModelReflection];\n                assert.vm(vm);\n                const { error, attribute, readOnly, experimental } = GlobalHTMLProperties[propName];\n                const msg = [];\n                msg.push(`Accessing the global HTML property \"${propName}\" in ${vm} is disabled.`);\n                if (error) {\n                    msg.push(error);\n                } else {\n                    if (experimental) {\n                        msg.push(`This is an experimental property that is not standardized or supported by all browsers. Property \"${propName}\" and attribute \"${attribute}\" are ignored.`);\n                    }\n                    if (readOnly) {\n                        // TODO - need to improve this message\n                        msg.push(`Property is read-only.`);\n                    }\n                    if (attribute) {\n                        msg.push(`\"Instead access it via the reflective attribute \"${attribute}\" with one of these techniques:`);\n                        msg.push(`  * Use \\`this.getAttribute(\"${attribute}\")\\` to access the attribute value. This option is best suited for accessing the value in a getter during the rendering process.`);\n                        msg.push(`  * Declare \\`static observedAttributes = [\"${attribute}\"]\\` and use \\`attributeChangedCallback(attrName, oldValue, newValue)\\` to get a notification each time the attribute changes. This option is best suited for reactive programming, eg. fetching new data each time the attribute is updated.`);\n                    }\n                }\n                console.log(msg.join('\\n'));\n                return; // explicit undefined\n            },\n            enumerable: false,\n        })\n    });\n\n});\n\nfreeze(ComponentElement);\nseal(ComponentElement.prototype);\n\nexport { ComponentElement as Element };\n","/**\n * This module is responsible for producing the ComponentDef object that is always\n * accessible via `vm.def`. This is lazily created during the creation of the first\n * instance of a component class, and shared across all instances.\n *\n * This structure can be used to synthetically create proxies, and understand the\n * shape of a component. It is also used internally to apply extra optimizations.\n */\n\nimport assert from \"./assert\";\nimport {\n    assign,\n    freeze,\n    create,\n    ArrayIndexOf,\n    toString,\n    ArrayPush,\n    defineProperty,\n    defineProperties,\n    getOwnPropertyDescriptor,\n    getOwnPropertyNames,\n    getPrototypeOf,\n    isString,\n    isFunction,\n} from \"./language\";\nimport { GlobalHTMLProperties } from \"./dom\";\nimport { Element, createPublicPropertyDescriptorMap } from \"./html-element\";\nimport { EmptyObject } from \"./utils\";\n\nconst CtorToDefMap: Map<any, ComponentDef> = new WeakMap();\n\nfunction isElementComponent(Ctor: any, protoSet?: Array<any>): boolean {\n    protoSet = protoSet || [];\n    if (!Ctor || ArrayIndexOf.call(protoSet, Ctor) >= 0) {\n        return false; // null, undefined, or circular prototype definition\n    }\n    const proto = getPrototypeOf(Ctor);\n    if (proto === Element) {\n        return true;\n    }\n    getComponentDef(proto); // ensuring that the prototype chain is already expanded\n    ArrayPush.call(protoSet, Ctor);\n    return isElementComponent(proto, protoSet);\n}\n\nfunction createComponentDef(Ctor: Class<Component>): ComponentDef {\n    assert.isTrue(isElementComponent(Ctor), `${Ctor} is not a valid component, or does not extends Element from \"engine\". You probably forgot to add the extend clause on the class declaration.`);\n    const name: string = Ctor.name;\n    assert.isTrue(name && isString(name), `${toString(Ctor)} should have a \"name\" property with string value, but found ${name}.`);\n    assert.isTrue(Ctor.constructor, `Missing ${name}.constructor, ${name} should have a \"constructor\" property.`);\n    let props = getPublicPropertiesHash(Ctor);\n    let methods = getPublicMethodsHash(Ctor);\n    let observedAttrs = getObservedAttributesHash(Ctor);\n    let wire = getWireHash(Ctor);\n\n    const superProto = getPrototypeOf(Ctor);\n    if (superProto !== Element) {\n        const superDef = getComponentDef(superProto);\n        props = assign({}, superDef.props, props);\n        methods = assign({}, superDef.methods, methods);\n        observedAttrs = assign({}, superDef.observedAttrs, observedAttrs);\n        wire = assign({}, superDef.wire, wire);\n    }\n\n    const proto = Ctor.prototype;\n    for (let propName in props) {\n        // initializing getters and setters for each public prop on the target prototype\n        assert.invariant(!getOwnPropertyDescriptor(proto, propName), `Invalid ${name}.prototype.${propName} definition, it cannot be a prototype definition if it is a public property. Instead use the constructor to define it.`);\n        defineProperties(proto, createPublicPropertyDescriptorMap(propName));\n    }\n\n    const def: ComponentDef = {\n        name,\n        wire,\n        props,\n        methods,\n        observedAttrs,\n    };\n    assert.block(function devModeCheck() {\n        freeze(Ctor.prototype);\n        freeze(wire);\n        freeze(props);\n        freeze(methods);\n        //freeze(observedAttrs);\n        for (let key in def) {\n            defineProperty(def, key, {\n                configurable: false,\n                writable: false,\n            });\n        }\n    });\n    return def;\n}\n\nfunction getWireHash(target: Object): HashTable<PropDef> {\n    const wire: HashTable = target.wire || {};\n    if (!wire || !getOwnPropertyNames(wire).length) {\n        return EmptyObject;\n    }\n\n    assert.block(function devModeCheck() {\n        // TODO: check that anything in `wire` is correctly defined in the prototype\n    });\n    return wire;\n}\n\nfunction getPublicPropertiesHash(target: Object): HashTable<PropDef> {\n    const props: HashTable = target.publicProps || {};\n    if (!props || !getOwnPropertyNames(props).length) {\n        return EmptyObject;\n    }\n    return getOwnPropertyNames(props).reduce((propsHash: HashTable<PropDef>, propName: string): HashTable<PropDef> => {\n        assert.block(function devModeCheck() {\n            if (GlobalHTMLProperties[propName] && GlobalHTMLProperties[propName].attribute) {\n                const { error, attribute, experimental } = GlobalHTMLProperties[propName];\n                const msg = [];\n                if (error) {\n                    msg.push(error);\n                } else if (experimental) {\n                    msg.push(`\"${propName}\" is an experimental property that is not standardized or supported by all browsers. Property \"${propName}\" and attribute \"${attribute}\" are ignored.`);\n                } else {\n                    msg.push(`\"${propName}\" is a global HTML property. Instead access it via the reflective attribute \"${attribute}\" with one of these techniques:`);\n                    msg.push(`  * Use \\`this.getAttribute(\"${attribute}\")\\` to access the attribute value. This option is best suited for accessing the value in a getter during the rendering process.`);\n                    msg.push(`  * Declare \\`static observedAttributes = [\"${attribute}\"]\\` and use \\`attributeChangedCallback(attrName, oldValue, newValue)\\` to get a notification each time the attribute changes. This option is best suited for reactive programming, eg. fetching new data each time the attribute is updated.`);\n                }\n                console.error(msg.join('\\n'));\n            }\n        });\n        propsHash[propName] = 1;\n        return propsHash;\n    }, create(null));\n}\n\nfunction getPublicMethodsHash(target: Object): HashTable<number> {\n    const publicMethods = target.publicMethods;\n    if (!publicMethods || !publicMethods.length) {\n        return EmptyObject;\n    }\n    return publicMethods.reduce((methodsHash: HashTable<number>, methodName: string): HashTable => {\n        methodsHash[methodName] = 1;\n        assert.block(function devModeCheck() {\n            assert.isTrue(isFunction(target.prototype[methodName]), `Component \"${target.name}\" should have a method \\`${methodName}\\` instead of ${target.prototype[methodName]}.`);\n            freeze(target.prototype[methodName]);\n        });\n        return methodsHash;\n    }, create(null));\n}\n\nfunction getObservedAttributesHash(target: Object): HashTable<number> {\n    if (!target.observedAttributes || !target.observedAttributes.length) {\n        return EmptyObject;\n    }\n    return target.observedAttributes.reduce((observedAttributes: HashTable<number>, attrName: string): HashTable => {\n        observedAttributes[attrName] = 1;\n        return observedAttributes;\n    }, create(null));\n}\n\nexport function getComponentDef(Ctor: Class<Component>): ComponentDef {\n    let def = CtorToDefMap.get(Ctor);\n    if (def) {\n        return def;\n    }\n    def = createComponentDef(Ctor);\n    CtorToDefMap.set(Ctor, def);\n    return def;\n}\n","import assert from \"./assert\";\nimport { OwnerKey } from \"./vm\";\nimport { ArrayMap, isArray, toString } from \"./language\";\nimport { Services } from \"./services\";\n\nconst GetTarget = Symbol('internal');\n\ntype ReplicableFunction = (...args: Array<any>) => any; // eslint-disable-line no-undef\nexport type Replicable = Object | ReplicableFunction;\n\ntype ReplicaFunction = (...args: Array<any>) => Replica | String | Number | Boolean; // eslint-disable-line no-undef\nexport type Replica = Object | ReplicaFunction;\n\nfunction isReplicable(value: any): boolean {\n    const type = typeof value;\n    return value && (type === 'object' || type === 'function');\n}\n\nfunction getTarget(membrane: Membrane, replicaOrAny: Replica | any): Replicable | any {\n    assert.isTrue(membrane instanceof Membrane, `getTarget() first argument must be a membrane.`);\n    if (isReplicable(replicaOrAny) && membrane.cache.has(replicaOrAny)) {\n        return replicaOrAny[GetTarget];\n    }\n    return replicaOrAny;\n}\n\nexport function getReplica(membrane: Membrane, value: Replicable | any): Replica | any {\n    if (value === null || !isReplicable(value)) {\n        return value;\n    }\n    assert.isTrue(membrane instanceof Membrane, `getReplica() first argument must be a membrane.`);\n    let { cells, cache } = membrane;\n    if (cache.has(value)) {\n        return value;\n    }\n    const r = cells.get(value);\n    if (r) {\n        return r;\n    }\n    const replica: Replica = new Proxy(value, (membrane as ProxyHandler<Replicable>)); // eslint-disable-line no-undef\n    cells.set(value, replica);\n    cache.add(replica);\n    return replica;\n}\n\nfunction piercingHook(vm: VM, target: Replicable, key: string | Symbol, value: any): any {\n    assert.vm(vm);\n    const { piercing } = Services;\n    if (piercing) {\n        const { component, vnode: { data }, def, context } = vm;\n        let result = value;\n        let next = true;\n        const callback = (newValue?: any) => {\n            next = false;\n            result = newValue;\n        };\n        for (let i = 0, len = piercing.length; next && i < len; ++i) {\n            piercing[i].call(undefined, component, data, def, context, target, key, value, callback);\n        }\n        return result;\n    }\n}\n\nexport class Membrane {\n    vm: VM; // eslint-disable-line no-undef\n    cells: WeakMap<Replicable, Replica>; // eslint-disable-line no-undef\n    cache: WeakSet<Replica>; // eslint-disable-line no-undef\n    constructor(vm: VM) {\n        assert.vm(vm);\n        this.vm = vm;\n        this.cells = new WeakMap();\n        this.cache = new WeakSet();\n    }\n    get(target: Replicable, key: string | Symbol): any {\n        if (key === OwnerKey) {\n            return undefined;\n        }\n        if (key === GetTarget) {\n            return target;\n        }\n        let value = target[key];\n        value = piercingHook(this.vm, target, key, value);\n        return getReplica(this, value);\n    }\n    set(target: Replicable, key: string, newValue: any): boolean {\n        assert.logError(`A protective membrane is preventing mutations to ${key} member property of ${toString(target)} to the value of ${toString(newValue)}.`);\n        return false;\n    }\n    apply(targetFn: ReplicableFunction, thisArg: any, argumentsList: Array<any>): any {\n        // TODO: argumentsList should be unwrap as well\n        thisArg = getTarget(this, thisArg);\n        argumentsList = getTarget(this, argumentsList);\n        if (isArray(argumentsList)) {\n            argumentsList = ArrayMap.call(argumentsList, (value: any): any => getTarget(this, value));\n        }\n        const value = targetFn.apply(thisArg, argumentsList);\n        return getReplica(this, value);\n    }\n    pierce(value: Replicable | any): Replica | any {\n        return value;\n    }\n}\n","import assert from \"./assert\";\nimport { getComponentDef } from \"./def\";\nimport { createComponent } from \"./component\";\nimport { patch } from \"./patch\";\nimport { assign, isArray, toString, ArrayPush, isUndefined, keys } from \"./language\";\nimport { addCallbackToNextTick } from \"./utils\";\nimport { Membrane } from \"./membrane\";\n\nlet idx: number = 0;\nlet uid: number = 0;\n\nexport const OwnerKey = Symbol('key');\n\nexport function addInsertionIndex(vm: VM) {\n    assert.vm(vm);\n    assert.invariant(vm.idx === 0, `${vm} is already locked to a previously generated idx.`);\n    vm.idx = ++idx;\n}\n\nexport function removeInsertionIndex(vm: VM) {\n    assert.vm(vm);\n    assert.invariant(vm.idx > 0, `${vm} is not locked to a previously generated idx.`);\n    vm.idx = 0;\n}\n\nexport function createVM(vnode: ComponentVNode) {\n    assert.vnode(vnode);\n    assert.invariant(vnode.elm instanceof HTMLElement, `VM creation requires a DOM element to be associated to vnode ${vnode}.`);\n    const { Ctor } = vnode;\n    const def = getComponentDef(Ctor);\n    console.log(`[object:vm ${def.name}] is being initialized.`);\n    uid += 1;\n    const vm: VM = {\n        uid,\n        idx: 0,\n        isScheduled: false,\n        isDirty: true,\n        def,\n        context: {},\n        cmpProps: {},\n        cmpState: undefined,\n        cmpSlots: undefined,\n        cmpEvents: undefined,\n        cmpListener: undefined,\n        cmpClasses: undefined,\n        cmpTemplate: undefined,\n        cmpRoot: undefined,\n        classListObj: undefined,\n        component: undefined,\n        vnode,\n        // used to store the latest result of the render method\n        fragment: [],\n        // used to track down all object-key pairs that makes this vm reactive\n        deps: [],\n    };\n    assert.block(function devModeCheck() {\n        vm.toString = (): string => {\n            return `[object:vm ${def.name} (${vm.idx})]`;\n        };\n    });\n    vnode.vm = vm;\n    createComponent(vm, Ctor);\n    assert.block(function devModeCheck() {\n        const { component: { attributeChangedCallback }, def: { observedAttrs } } = vm;\n        if (observedAttrs.length && isUndefined(attributeChangedCallback)) {\n            console.warn(`${vm} has static observedAttributes set to [\"${keys(observedAttrs).join('\", \"')}\"] but it is missing the attributeChangedCallback() method to watch for changes on those attributes. Double check for typos on the name of the callback.`);\n        }\n    });\n    return vm;\n}\n\nexport function relinkVM(vm: VM, vnode: ComponentVNode) {\n    assert.vm(vm);\n    assert.vnode(vnode);\n    assert.isTrue(vnode.elm instanceof HTMLElement, `Only DOM elements can be linked to their corresponding component.`);\n    assert.invariant(vm.component, `vm.component is required to be defined before ${vm} gets linked to ${vnode}.`);\n    vnode.vm = vm;\n    vm.vnode = vnode;\n}\nexport function rehydrate(vm: VM) {\n    assert.vm(vm);\n    if (vm.idx && vm.isDirty) {\n        const { vnode } = vm;\n        assert.isTrue(vnode.elm instanceof HTMLElement, `rehydration can only happen after ${vm} was patched the first time.`);\n        assert.invariant(isArray(vnode.children), `Rendered ${vm}.children should always have an array of vnodes instead of ${toString(vnode.children)}`);\n        // when patch() is invoked from within the component life-cycle due to\n        // a dirty state, we create a new VNode (oldVnode) with the exact same data was used\n        // to patch this vnode the last time, mimic what happen when the\n        // owner re-renders, but we do so by keeping the vnode originally used by parent\n        // as the source of true, in case the parent tries to rehydrate against that one.\n        const oldVnode = assign({}, vnode);\n        vnode.children = [];\n        patch(oldVnode, vnode);\n    }\n    vm.isScheduled = false;\n}\n\nlet rehydrateQueue: Array<VM> = [];\n\nfunction flushRehydrationQueue() {\n    assert.invariant(rehydrateQueue.length, `If rehydrateQueue was scheduled, it is because there must be at least one VM on this pending queue instead of ${rehydrateQueue}.`);\n    const vms: Array<VM> = rehydrateQueue.sort((a: VM, b: VM): boolean => a.idx > b.idx);\n    rehydrateQueue = []; // reset to a new queue\n    for (let i = 0, len = vms.length; i < len; i += 1) {\n        rehydrate(vms[i]);\n    }\n}\n\nexport function scheduleRehydration(vm: VM) {\n    assert.vm(vm);\n    if (!vm.isScheduled) {\n        vm.isScheduled = true;\n        if (rehydrateQueue.length === 0) {\n            addCallbackToNextTick(flushRehydrationQueue);\n        }\n        ArrayPush.call(rehydrateQueue, vm);\n    }\n}\n\nexport function isNodeOwnedByVM(vm: VM, node: Node): boolean {\n    assert.vm(vm);\n    assert.invariant(node instanceof Node, `isNodeOwnedByVM() should be called with a node as the second argument instead of ${node}`);\n    assert.childNode(vm.vnode.elm, node, `isNodeOwnedByVM() should never be called with a node that is not a child node of ${vm}`);\n    // @ts-ignore\n    return node[OwnerKey] === vm.uid;\n}\n\nexport function wasNodePassedIntoVM(vm: VM, node: Node): boolean {\n    assert.vm(vm);\n    assert.invariant(node instanceof Node, `isNodePassedToVM() should be called with a node as the second argument instead of ${node}`);\n    assert.childNode(vm.vnode.elm, node, `isNodePassedToVM() should never be called with a node that is not a child node of ${vm}`);\n    const { vnode: { uid: ownerUid } } = vm;\n    // TODO: we need to walk the parent path here as well, in case they passed it via slots multiple times\n    // @ts-ignore\n    return node[OwnerKey] === ownerUid;\n}\n\nexport function getMembrane(vm: VM): Membrane {\n    assert.vm(vm);\n    let { membrane } = vm;\n    if (membrane) {\n        return membrane;\n    }\n    membrane = new Membrane(vm);\n    vm.membrane = membrane;\n    return membrane;\n}\n","import { createVM, relinkVM } from \"../vm\";\nimport assert from \"../assert\";\nimport { isUndefined } from \"../language\";\n\n// this hook will set up the component instance associated to the new vnode,\n// and link the new vnode with the corresponding component\nfunction initializeComponent(oldVnode: ComponentVNode, vnode: ComponentVNode) {\n    const { Ctor } = vnode;\n    if (isUndefined(Ctor)) {\n        return;\n    }\n    /**\n     * The reason why we do the initialization here instead of prepatch or any other hook\n     * is because the creation of the component does require the element to be available.\n     */\n    assert.invariant(vnode.elm, `${vnode}.elm should be ready.`);\n    if (oldVnode.vm && oldVnode.Ctor === Ctor) {\n        relinkVM(oldVnode.vm, vnode);\n    } else {\n        createVM(vnode);\n    }\n    assert.invariant(vnode.vm.component, `vm ${vnode.vm} should have a component and element associated to it.`);\n}\n\nexport default {\n    create: initializeComponent,\n    update: initializeComponent,\n};\n","import {\n    resetComponentProp,\n    updateComponentProp,\n} from \"../component\";\nimport { assign, isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction syncProps(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n\n    let { data: { _props: oldProps } } = oldVnode;\n    let { data: { _props: newProps } } = vnode;\n\n    // infuse key-value pairs from _props into the component\n    if (oldProps !== newProps && (oldProps || newProps)) {\n        let key: string, cur: any;\n        oldProps = oldProps || EmptyObject;\n        newProps = newProps || EmptyObject;\n        // removed props should be reset in component's props\n        for (key in oldProps) {\n            if (!(key in newProps)) {\n                resetComponentProp(vm, key);\n            }\n        }\n\n        // new or different props should be set in component's props\n        for (key in newProps) {\n            cur = newProps[key];\n            if (!(key in oldProps) || oldProps[key] != cur) {\n                updateComponentProp(vm, key, cur);\n            }\n        }\n    }\n\n    // TODO: opt out if cmpProps is empty (right now it is never empty)\n    vnode.data.props = assign({}, vm.cmpProps);\n}\n\nexport default {\n    create: syncProps,\n    update: syncProps,\n};\n","import { invokeComponentAttributeChangedCallback } from \"../invoker\";\nimport { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction observeAttributes(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n    const { def: { observedAttrs } } = vm;\n    if (observedAttrs.length === 0) {\n        return; // nothing to observe\n    }\n\n    let { data: { attrs: oldAttrs } } = oldVnode;\n    let { data: { attrs: newAttrs } } = vnode;\n\n    if (oldAttrs === newAttrs || (isUndefined(oldAttrs) && isUndefined(oldAttrs))) {\n        return;\n    }\n\n    // infuse key-value pairs from _props into the component\n    let key: string, cur: any;\n    oldAttrs = oldAttrs || EmptyObject;\n    newAttrs = newAttrs || EmptyObject;\n    // removed props should be reset in component's props\n    for (key in oldAttrs) {\n        if (key in observedAttrs && !(key in newAttrs)) {\n            invokeComponentAttributeChangedCallback(vm, key, oldAttrs[key], null);\n        }\n    }\n\n    // new or different props should be set in component's props\n    for (key in newAttrs) {\n        if (key in observedAttrs) {\n            cur = newAttrs[key];\n            if (!(key in oldAttrs) || oldAttrs[key] != cur) {\n                invokeComponentAttributeChangedCallback(vm, key, oldAttrs[key], cur);\n            }\n        }\n    }\n}\n\nexport default {\n    create: observeAttributes,\n    update: observeAttributes,\n};\n","import { isUndefined } from \"../language\";\nimport { createComponentListener } from \"../component\";\nimport { EmptyObject } from \"../utils\";\n\nfunction removeAllCmpEventListeners(vnode: VNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n    const { cmpEvents: on, listener } = vm;\n    if (on && listener) {\n        const { elm } = vnode;\n        let name;\n        for (name in on) {\n            elm.removeEventListener(name, listener, false);\n        }\n        vm.listener = undefined;\n    }\n}\n\nfunction updateCmpEventListeners(oldVnode: VNode, vnode: VNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n    const { vm: oldVm } = oldVnode;\n    if (oldVm === vm) {\n        return;\n    }\n\n    const oldOn = (oldVm && oldVm.cmpEvents) || EmptyObject;\n    const { cmpEvents: on = EmptyObject } = vm;\n\n    if (oldOn === on) {\n        return;\n    }\n\n    const { elm } = vnode;\n    const { elm: oldElm } = oldVnode;\n    const listener = vm.cmpListener = (oldVm && oldVm.cmpListener) || createComponentListener();\n    listener.vm = vm;\n\n    let name;\n    for (name in on) {\n        if (isUndefined(oldOn[name])) {\n            elm.addEventListener(name, listener, false);\n        }\n    }\n    for (name in oldOn) {\n        if (isUndefined(on[name])) {\n            oldElm.removeEventListener(name, listener, false);\n        }\n    }\n}\n\n\n\nconst eventListenersModule: Module = {\n    create: updateCmpEventListeners,\n    update: updateCmpEventListeners,\n    destroy: removeAllCmpEventListeners\n};\nexport default eventListenersModule;\n","import { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction syncClassNames(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n\n    const { vm: oldVm } = oldVnode;\n    if (oldVm === vm) {\n        return;\n    }\n\n    const oldClass = (oldVm && oldVm.cmpClasses) || EmptyObject;\n    const { cmpClasses: klass = EmptyObject } = vm;\n\n    if (oldClass === klass) {\n        return;\n    }\n\n    const { elm, data: { class: ownerClass = EmptyObject } } = vnode;\n\n    let name: string;\n    for (name in oldClass) {\n        // remove only if it was removed from within the instance and it is not set from owner\n        if (oldClass[name] && !klass[name] && !ownerClass[name]) {\n            elm.classList.remove(name);\n        }\n    }\n    for (name in klass) {\n        if (klass[name] && !oldClass[name]) {\n            elm.classList.add(name);\n        }\n    }\n}\n\nexport default {\n    create: syncClassNames,\n    update: syncClassNames,\n};\n","import {\n    addComponentSlot,\n    removeComponentSlot,\n} from \"../component\";\nimport { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction update(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n\n    let { data: { slotset: oldSlots } } = oldVnode;\n    let { data: { slotset: newSlots } } = vnode;\n\n    // infuse key-value pairs from slotset into the component\n    if (oldSlots !== newSlots && (oldSlots || newSlots)) {\n        let key: string, cur: any;\n        oldSlots = oldSlots || EmptyObject;\n        newSlots = newSlots || EmptyObject;\n        // removed slots should be removed from component's slotset\n        for (key in oldSlots) {\n            if (!(key in newSlots)) {\n                removeComponentSlot(vm, key);\n            }\n        }\n\n        // new or different slots should be set in component's slotset\n        for (key in newSlots) {\n            cur = newSlots[key];\n            if (!(key in oldSlots) || oldSlots[key] != cur) {\n                if (cur && cur.length) {\n                    addComponentSlot(vm, key, cur);\n                } else {\n                    removeComponentSlot(vm, key);\n                }\n            }\n        }\n    }\n}\n\nexport default {\n    create: update,\n    update,\n};\n","import assert from \"../assert\";\nimport { renderComponent } from \"../component\";\nimport { isUndefined, ArrayPush } from \"../language\";\n\nfunction rerender(oldVnode: VNode, vnode: ComponentVNode) {\n    const { vm } = vnode;\n    if (isUndefined(vm)) {\n        return;\n    }\n    const { children } = vnode;\n    // if diffing is against an inserted VM, it means the element is already\n    // in the DOM and we can compute its body.\n    if (vm.idx && vm.isDirty) {\n        assert.invariant(oldVnode.children !== children, `If component is dirty, the children collections must be different. In theory this should never happen.`);\n        renderComponent(vm);\n    }\n    // replacing the vnodes in the children array without replacing the array itself\n    // because the engine has a hard reference to the original array object.\n    children.length = 0;\n    ArrayPush.apply(children, vm.fragment);\n}\n\nexport default {\n    create: rerender,\n    update: rerender,\n};\n","import assert from \"../assert\";\nimport { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\n// TODO: eventually use the one shipped by snabbdom directly\nfunction update(oldVnode: VNode, vnode: VNode) {\n    let oldProps = oldVnode.data.props;\n    let props = vnode.data.props;\n\n    if (isUndefined(oldProps) && isUndefined(props)) {\n        return;\n    }\n    if (oldProps === props) {\n        return;\n    }\n\n    oldProps = oldProps || EmptyObject;\n    props = props || EmptyObject;\n\n    let key: string, cur: any, old: any;\n    const { elm } = vnode;\n\n    for (key in oldProps) {\n        if (!(key in props)) {\n            if (vnode.isRoot) {\n                // custom elements created programatically prevent you from\n                // deleting the property because it has a set/get to update\n                // the corresponding component, in this case, we just set it\n                // to undefined, which has the same effect.\n                elm[key] = undefined;\n            } else {\n                delete elm[key];\n            }\n        }\n    }\n    for (key in props) {\n        cur = props[key];\n        old = oldProps[key];\n\n        if (old !== cur) {\n            if (old !== cur && (key !== 'value' || elm[key] !== cur)) {\n                // only touching the dom if the prop really changes.\n                assert.block(function devModeCheck() {\n                    if (elm[key] === cur && old !== undefined && !vnode.isRoot) {\n                        console.warn(`Unneccessary update of property \"${key}\" in ${elm}, it has the same value in ${vnode.vm || vnode}.`);\n                    }\n                });\n                elm[key] = cur;\n            }\n        }\n    }\n}\n\nexport default {\n    create: update,\n    update,\n};\n","export var array = Array.isArray;\nexport function primitive(s) {\n    return typeof s === 'string' || typeof s === 'number';\n}\n","function createElement(tagName) {\n    return document.createElement(tagName);\n}\nfunction createElementNS(namespaceURI, qualifiedName) {\n    return document.createElementNS(namespaceURI, qualifiedName);\n}\nfunction createTextNode(text) {\n    return document.createTextNode(text);\n}\nfunction createComment(text) {\n    return document.createComment(text);\n}\nfunction insertBefore(parentNode, newNode, referenceNode) {\n    parentNode.insertBefore(newNode, referenceNode);\n}\nfunction removeChild(node, child) {\n    node.removeChild(child);\n}\nfunction appendChild(node, child) {\n    node.appendChild(child);\n}\nfunction parentNode(node) {\n    return node.parentNode;\n}\nfunction nextSibling(node) {\n    return node.nextSibling;\n}\nfunction tagName(elm) {\n    return elm.tagName;\n}\nfunction setTextContent(node, text) {\n    node.nodeValue = text;\n}\nfunction getTextContent(node) {\n    return node.nodeValue;\n}\nfunction isElement(node) {\n    return node.nodeType === 1;\n}\nfunction isText(node) {\n    // Performance optimization over `return node.nodeType === 3;`\n    return node.splitText !== undefined;\n}\nfunction isComment(node) {\n    return node.nodeType === 8;\n}\nexport var htmlDomApi = {\n    createElement: createElement,\n    createElementNS: createElementNS,\n    createTextNode: createTextNode,\n    createComment: createComment,\n    insertBefore: insertBefore,\n    removeChild: removeChild,\n    appendChild: appendChild,\n    parentNode: parentNode,\n    nextSibling: nextSibling,\n    tagName: tagName,\n    setTextContent: setTextContent,\n    getTextContent: getTextContent,\n    isElement: isElement,\n    isText: isText,\n    isComment: isComment,\n};\nexport default htmlDomApi;\n","import { v as vnode } from '../../framework/api';\nimport * as is from './is';\nimport htmlDomApi from './htmldomapi';\nfunction isUndef(s) { return s === undefined; }\nfunction isDef(s) { return s !== undefined; }\nvar emptyNode = { sel: \"\", data: {}, children: [] };\nfunction sameVnode(vnode1, vnode2) {\n    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;\n}\nfunction isVnode(vnode) {\n    return vnode.sel !== undefined;\n}\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\n    var i, map = {}, key, ch;\n    for (i = beginIdx; i <= endIdx; ++i) {\n        ch = children[i];\n        if (ch != null) {\n            key = ch.key;\n            if (key !== undefined)\n                map[key] = i;\n        }\n    }\n    return map;\n}\nvar hooks = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];\n// export { h } from './h';\n// export { thunk } from './thunk';\nexport function init(modules, domApi) {\n    var i, j, cbs = {};\n    var api = domApi !== undefined ? domApi : htmlDomApi;\n    for (i = 0; i < hooks.length; ++i) {\n        cbs[hooks[i]] = [];\n        for (j = 0; j < modules.length; ++j) {\n            var hook = modules[j][hooks[i]];\n            if (hook !== undefined) {\n                cbs[hooks[i]].push(hook);\n            }\n        }\n    }\n    function emptyNodeAt(elm) {\n        var id = elm.id ? '#' + elm.id : '';\n        var c = elm.className ? '.' + elm.className.split(' ').join('.') : '';\n        return vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);\n    }\n    function createRmCb(childElm, listeners) {\n        return function rmCb() {\n            if (--listeners === 0) {\n                var parent_1 = api.parentNode(childElm);\n                api.removeChild(parent_1, childElm);\n            }\n        };\n    }\n    function createElm(vnode, insertedVnodeQueue) {\n        var i, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.init)) {\n                i(vnode);\n                data = vnode.data;\n            }\n        }\n        var children = vnode.children, sel = vnode.sel;\n        if (sel === '!') {\n            if (isUndef(vnode.text)) {\n                vnode.text = '';\n            }\n            vnode.elm = api.createComment(vnode.text);\n        }\n        else if (sel !== undefined) {\n            // Parse selector\n            var hashIdx = sel.indexOf('#');\n            var dotIdx = sel.indexOf('.', hashIdx);\n            var hash = hashIdx > 0 ? hashIdx : sel.length;\n            var dot = dotIdx > 0 ? dotIdx : sel.length;\n            var tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;\n            var elm = vnode.elm = isDef(data) && isDef(i = data.ns) ? api.createElementNS(i, tag)\n                : api.createElement(tag);\n            if (hash < dot)\n                elm.id = sel.slice(hash + 1, dot);\n            if (dotIdx > 0)\n                elm.className = sel.slice(dot + 1).replace(/\\./g, ' ');\n            for (i = 0; i < cbs.create.length; ++i)\n                cbs.create[i](emptyNode, vnode);\n            if (is.array(children)) {\n                for (i = 0; i < children.length; ++i) {\n                    var ch = children[i];\n                    if (ch != null) {\n                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));\n                    }\n                }\n            }\n            else if (is.primitive(vnode.text)) {\n                api.appendChild(elm, api.createTextNode(vnode.text));\n            }\n            i = vnode.data.hook; // Reuse variable\n            if (isDef(i)) {\n                if (i.create)\n                    i.create(emptyNode, vnode);\n                if (i.insert)\n                    insertedVnodeQueue.push(vnode);\n            }\n        }\n        else {\n            vnode.elm = api.createTextNode(vnode.text);\n        }\n        return vnode.elm;\n    }\n    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var ch = vnodes[startIdx];\n            if (ch != null) {\n                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);\n            }\n        }\n    }\n    function invokeDestroyHook(vnode) {\n        var i, j, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.destroy))\n                i(vnode);\n            for (i = 0; i < cbs.destroy.length; ++i)\n                cbs.destroy[i](vnode);\n            if (vnode.children !== undefined) {\n                for (j = 0; j < vnode.children.length; ++j) {\n                    i = vnode.children[j];\n                    if (i != null && typeof i !== \"string\") {\n                        invokeDestroyHook(i);\n                    }\n                }\n            }\n        }\n    }\n    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var i_1 = void 0, listeners = void 0, rm = void 0, ch = vnodes[startIdx];\n            if (ch != null) {\n                if (isDef(ch.sel)) {\n                    invokeDestroyHook(ch);\n                    listeners = cbs.remove.length + 1;\n                    rm = createRmCb(ch.elm, listeners);\n                    for (i_1 = 0; i_1 < cbs.remove.length; ++i_1)\n                        cbs.remove[i_1](ch, rm);\n                    if (isDef(i_1 = ch.data) && isDef(i_1 = i_1.hook) && isDef(i_1 = i_1.remove)) {\n                        i_1(ch, rm);\n                    }\n                    else {\n                        rm();\n                    }\n                }\n                else {\n                    api.removeChild(parentElm, ch.elm);\n                }\n            }\n        }\n    }\n    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {\n        var oldStartIdx = 0, newStartIdx = 0;\n        var oldEndIdx = oldCh.length - 1;\n        var oldStartVnode = oldCh[0];\n        var oldEndVnode = oldCh[oldEndIdx];\n        var newEndIdx = newCh.length - 1;\n        var newStartVnode = newCh[0];\n        var newEndVnode = newCh[newEndIdx];\n        var oldKeyToIdx;\n        var idxInOld;\n        var elmToMove;\n        var before;\n        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {\n                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n            }\n            else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx];\n            }\n            else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n                oldStartVnode = oldCh[++oldStartIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newEndVnode)) {\n                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));\n                oldStartVnode = oldCh[++oldStartIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldEndVnode, newStartVnode)) {\n                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key];\n                if (isUndef(idxInOld)) {\n                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    newStartVnode = newCh[++newStartIdx];\n                }\n                else {\n                    elmToMove = oldCh[idxInOld];\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    }\n                    else {\n                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n                        oldCh[idxInOld] = undefined;\n                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n        }\n        if (oldStartIdx > oldEndIdx) {\n            before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;\n            addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n        }\n        else if (newStartIdx > newEndIdx) {\n            removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n        }\n    }\n    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {\n        var i, hook;\n        if (isDef(i = vnode.data) && isDef(hook = i.hook) && isDef(i = hook.prepatch)) {\n            i(oldVnode, vnode);\n        }\n        var elm = vnode.elm = oldVnode.elm;\n        var oldCh = oldVnode.children;\n        var ch = vnode.children;\n        if (oldVnode === vnode)\n            return;\n        if (vnode.data !== undefined) {\n            for (i = 0; i < cbs.update.length; ++i)\n                cbs.update[i](oldVnode, vnode);\n            i = vnode.data.hook;\n            if (isDef(i) && isDef(i = i.update))\n                i(oldVnode, vnode);\n        }\n        if (isUndef(vnode.text)) {\n            if (isDef(oldCh) && isDef(ch)) {\n                if (oldCh !== ch)\n                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);\n            }\n            else if (isDef(ch)) {\n                if (isDef(oldVnode.text))\n                    api.setTextContent(elm, '');\n                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n            }\n            else if (isDef(oldCh)) {\n                removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n            }\n            else if (isDef(oldVnode.text)) {\n                api.setTextContent(elm, '');\n            }\n        }\n        else if (oldVnode.text !== vnode.text) {\n            api.setTextContent(elm, vnode.text);\n        }\n        if (isDef(hook) && isDef(i = hook.postpatch)) {\n            i(oldVnode, vnode);\n        }\n    }\n    return function patch(oldVnode, vnode) {\n        var i, elm, parent;\n        var insertedVnodeQueue = [];\n        for (i = 0; i < cbs.pre.length; ++i)\n            cbs.pre[i]();\n        if (!isVnode(oldVnode)) {\n            oldVnode = emptyNodeAt(oldVnode);\n        }\n        if (sameVnode(oldVnode, vnode)) {\n            patchVnode(oldVnode, vnode, insertedVnodeQueue);\n        }\n        else {\n            elm = oldVnode.elm;\n            parent = api.parentNode(elm);\n            createElm(vnode, insertedVnodeQueue);\n            if (parent !== null) {\n                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));\n                removeVnodes(parent, [oldVnode], 0, 0);\n            }\n        }\n        for (i = 0; i < insertedVnodeQueue.length; ++i) {\n            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);\n        }\n        for (i = 0; i < cbs.post.length; ++i)\n            cbs.post[i]();\n        return vnode;\n    };\n}\n","const xlinkNS = 'http://www.w3.org/1999/xlink';\nconst xmlNS = 'http://www.w3.org/XML/1998/namespace';\nconst ColonCharCode = 58;\nconst XCharCode = 120;\n\nfunction updateAttrs(oldVnode: VNode, vnode: VNode) {\n    let { data: { attrs: oldAttrs } } = oldVnode;\n    let { data: { attrs } } = vnode;\n\n    if (!oldAttrs && !attrs) {\n        return;\n    }\n    if (oldAttrs === attrs) {\n        return;\n    }\n    const { elm } = vnode;\n    let key: string;\n    oldAttrs = oldAttrs || {};\n    attrs = attrs || {};\n\n    // update modified attributes, add new attributes\n    for (key in attrs) {\n        const cur = attrs[key];\n        const old = oldAttrs[key];\n        if (old !== cur) {\n            if (cur === true) {\n                elm.setAttribute(key, \"\");\n            } else if (cur === false) {\n                elm.removeAttribute(key);\n            } else {\n                if (key.charCodeAt(0) !== XCharCode) {\n                    elm.setAttribute(key, cur);\n                } else if (key.charCodeAt(3) === ColonCharCode) {\n                    // Assume xml namespace\n                    elm.setAttributeNS(xmlNS, key, cur);\n                } else if (key.charCodeAt(5) === ColonCharCode) {\n                    // Assume xlink namespace\n                    elm.setAttributeNS(xlinkNS, key, cur);\n                } else {\n                    elm.setAttribute(key, cur);\n                }\n            }\n        }\n    }\n    // remove removed attributes\n    for (key in oldAttrs) {\n        if (!(key in attrs)) {\n            elm.removeAttribute(key);\n        }\n    }\n}\n\nconst attributesModule: Module = {\n    create: updateAttrs,\n    update: updateAttrs\n};\nexport default attributesModule;\n","const DashCharCode = 45;\n\nfunction updateStyle(oldVnode: VNode, vnode: VNode) {\n    let { data: { style: oldStyle } } = oldVnode;\n    let { data: { style } } = vnode;\n\n    if (!oldStyle && !style) {\n        return;\n    }\n    if (oldStyle === style) {\n        return;\n    }\n    oldStyle = oldStyle || {};\n    style = style || {};\n\n    let name: string;\n    const { elm } = vnode;\n    for (name in oldStyle) {\n        if (!(name in style)) {\n            elm.style.removeProperty(name);\n        }\n    }\n    for (name in style) {\n        const cur = style[name];\n        if (cur !== oldStyle[name]) {\n            if (name.charCodeAt(0) === DashCharCode && name.charCodeAt(1) === DashCharCode) {\n                // if the name is prefied with --, it will be considered a variable, and setProperty() is needed\n                elm.style.setProperty(name, cur);\n            } else {\n                elm.style[name] = cur;\n            }\n        }\n    }\n}\n\nconst styleModule: Module = {\n    create: updateStyle,\n    update: updateStyle,\n};\nexport default styleModule;\n","import { EmptyObject } from \"../utils\";\n\nfunction updateClass(oldVnode: VNode, vnode: VNode) {\n    const { data: { class: oldClass = EmptyObject } } = oldVnode;\n    const { elm, data: { class: klass = EmptyObject } } = vnode;\n\n    if (oldClass === klass) {\n        return;\n    }\n\n    const innerClass = (vnode.vm && vnode.vm.cmpClasses) || EmptyObject;\n\n    let name: string\n    for (name in oldClass) {\n        // remove only if it is not in the new class collection and it is not set from within the instance\n        if (!klass[name] && !innerClass[name]) {\n            elm.classList.remove(name);\n        }\n    }\n    for (name in klass) {\n        if (!oldClass[name]) {\n            elm.classList.add(name);\n        }\n    }\n}\n\nexport default {\n    create: updateClass,\n    update: updateClass\n};\n","import { isUndefined } from \"../language\";\nimport { EmptyObject } from \"../utils\";\n\nfunction handleEvent(event: Event, vnode: VNode) {\n    const { type } = event;\n    const { data: { on } } = vnode;\n    let handler = on && on[type];\n    // call event handler if exists\n    if (handler) {\n        handler.call(undefined, event);\n    }\n}\n\nfunction createListener(): EventListener {\n    return function handler(event: Event) {\n        handleEvent(event, handler.vnode);\n    }\n}\n\nfunction removeAllEventListeners(vnode: VNode) {\n    const { data: { on }, listener } = vnode;\n    if (on && listener) {\n        const { elm } = vnode;\n        let name;\n        for (name in on) {\n            elm.removeEventListener(name, listener, false);\n        }\n        vnode.listener = undefined;\n    }\n}\n\nfunction updateEventListeners(oldVnode: VNode, vnode: VNode) {\n    const { data: { on: oldOn = EmptyObject } } = oldVnode;\n    const { data: { on = EmptyObject } } = vnode;\n\n    if (oldOn === on) {\n        return;\n    }\n\n    const { elm } = vnode;\n    const { elm: oldElm } = oldVnode;\n    const listener = vnode.listener = oldVnode.listener || createListener();\n    listener.vnode = vnode;\n\n    let name;\n    for (name in on) {\n        if (isUndefined(oldOn[name])) {\n            elm.addEventListener(name, listener, false);\n        }\n    }\n    for (name in oldOn) {\n        if (isUndefined(on[name])) {\n            oldElm.removeEventListener(name, listener, false);\n        }\n    }\n}\n\nconst eventListenersModule: Module = {\n    create: updateEventListeners,\n    update: updateEventListeners,\n    destroy: removeAllEventListeners\n};\nexport default eventListenersModule;\n","import { OwnerKey } from \"../vm\";\n\nfunction updateUID(oldVnode: VNode, vnode: VNode) {\n    const { uid: oldUid } = oldVnode;\n    const { elm, uid } = vnode;\n    if (uid === oldUid) {\n        return;\n    }\n    // @ts-ignore\n    elm[OwnerKey] = uid;\n}\n\nconst uidModule: Module = {\n    create: updateUID,\n    update: updateUID,\n};\nexport default uidModule;\n","import assert from \"./assert\";\nimport { patch } from \"./patch\";\nimport { scheduleRehydration } from \"./vm\";\nimport { invokeComponentAttributeChangedCallback } from \"./invoker\";\nimport { updateComponentProp } from \"./component\";\nimport { getPropertyProxy } from \"./properties\";\nimport { getComponentDef } from \"./def\";\nimport { c } from \"./api\";\nimport { defineProperties, isUndefined, isObject, isFunction } from \"./language\";\nimport { getPropNameFromAttrName } from \"./utils\";\n\nconst { getAttribute, setAttribute, removeAttribute } = Element.prototype;\n\nfunction linkAttributes(element: HTMLElement, vm: VM) {\n    assert.vm(vm);\n    const { def: { props: propsConfig, observedAttrs } } = vm;\n    // replacing mutators and accessors on the element itself to catch any mutation\n    element.getAttribute = (attrName: string): string | null => {\n        attrName = attrName.toLocaleLowerCase();\n        const propName = getPropNameFromAttrName(attrName);\n        if (propsConfig[propName]) {\n            assert.logError(`Invalid attribute \"${attrName}\" for ${vm}. Instead access the public property with \\`element.${propName};\\`.`);\n            return;\n        }\n        return getAttribute.call(element, attrName);\n    };\n    element.setAttribute = (attrName: string, newValue: any) => {\n        attrName = attrName.toLocaleLowerCase();\n        const propName = getPropNameFromAttrName(attrName);\n        if (propsConfig[propName]) {\n            assert.error(`Invalid attribute \"${attrName}\" for ${vm}. Instead update the public property with \\`element.${propName} = value;\\`.`);\n            return;\n        }\n        const oldValue = getAttribute.call(element, attrName);\n        setAttribute.call(element, attrName, newValue);\n        newValue = getAttribute.call(element, attrName);\n        if (attrName in observedAttrs && oldValue !== newValue) {\n            invokeComponentAttributeChangedCallback(vm, attrName, oldValue, newValue);\n        }\n    };\n    element.removeAttribute = (attrName: string) => {\n        attrName = attrName.toLocaleLowerCase();\n        const propName = getPropNameFromAttrName(attrName);\n        if (propsConfig[propName]) {\n            assert.logError(`Invalid attribute \"${attrName}\" for ${vm}. Instead update the public property with \\`element.${propName} = undefined;\\`.`);\n            return;\n        }\n\n        assert.block(function devModeCheck() {\n            const propName = getPropNameFromAttrName(attrName);\n            if (propsConfig[propName]) {\n                updateComponentProp(vm, propName, newValue);\n                if (vm.isDirty) {\n                    console.log(`Scheduling ${vm} for rehydration.`);\n                    scheduleRehydration(vm);\n                }\n            }\n        });\n        const oldValue = getAttribute.call(element, attrName);\n        removeAttribute.call(element, attrName);\n        const newValue = getAttribute.call(element, attrName);\n        if (attrName in observedAttrs && oldValue !== newValue) {\n            invokeComponentAttributeChangedCallback(vm, attrName, oldValue, newValue);\n        }\n    };\n}\n\nfunction linkProperties(element: HTMLElement, vm: VM) {\n    assert.vm(vm);\n    const { component, def: { props: propsConfig, methods } } = vm;\n    const descriptors: PropertyDescriptorMap = {};\n    // linking public methods\n    for (let methodName in methods) {\n        descriptors[methodName] = {\n            value: function (): any {\n                return component[methodName].apply(component, arguments);\n            },\n            configurable: false,\n            writable: false,\n            enumerable: false,\n        };\n    }\n    // linking reflective properties\n    for (let propName in propsConfig) {\n        descriptors[propName] = {\n            get: (): any => component[propName],\n            set: (value: any) => {\n                // proxifying before storing it is a must for public props\n                value = isObject(value) ? getPropertyProxy(value) : value;\n                updateComponentProp(vm, propName, value);\n                if (vm.isDirty) {\n                    console.log(`Scheduling ${vm} for rehydration.`);\n                    scheduleRehydration(vm);\n                }\n            },\n            configurable: false,\n            enumerable: true,\n        };\n    }\n    defineProperties(element, descriptors);\n}\n\nfunction getInitialProps(element: HTMLElement, Ctor: Class<Component>): HashTable<any> {\n    const { props: config } = getComponentDef(Ctor);\n    const props = {};\n    for (let propName in config) {\n        if (propName in element) {\n            props[propName] = element[propName];\n        }\n    }\n    return props;\n}\n\nfunction getInitialSlots(element: HTMLElement, Ctor: Class<Component>): HashTable<any> {\n    const { slotNames } = getComponentDef(Ctor);\n    if (isUndefined(slotNames)) {\n        return;\n    }\n    // TODO: implement algo to resolve slots\n    return undefined;\n}\n\n/**\n * This algo mimics 2.5 of web component specification somehow:\n * https://www.w3.org/TR/custom-elements/#upgrades\n */\nfunction upgradeElement(element: HTMLElement, Ctor: Class<Component>) {\n    if (isUndefined(Ctor)) {\n        throw new TypeError(`Invalid Component Definition: ${Ctor}.`);\n    }\n    const props = getInitialProps(element, Ctor);\n    const slotset = getInitialSlots(element, Ctor);\n    const tagName = element.tagName.toLowerCase();\n    const vnode = c(tagName, Ctor, { props, slotset, className: element.className || undefined });\n    vnode.isRoot = true;\n    // TODO: eventually after updating snabbdom we can use toVNode(element)\n    // as the first argument to reconstruct the vnode that represents the\n    // current state.\n    const { vm } = patch(element, vnode);\n    linkAttributes(element, vm);\n    // TODO: for vnode with element we might not need to do any of these.\n    linkProperties(element, vm);\n}\n\n/**\n * This method is almost identical to document.createElement\n * (https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement)\n * with the slightly difference that in the options, you can pass the `is`\n * property set to a Constructor instead of just a string value. E.g.:\n *\n * const el = createElement('x-foo', { is: FooCtor });\n *\n * If the value of `is` attribute is not a constructor,\n * then we fallback to the normal Web-Components workflow.\n */\nexport function createElement(tagName: string, options: any = {}): HTMLElement {\n    const Ctor = isFunction(options.is) ? options.is : null;\n    const element = document.createElement(tagName, Ctor ? null : options);\n\n    if (Ctor && element instanceof HTMLElement) {\n        upgradeElement(element, Ctor);\n    }\n    return element;\n}\n\n// TODO: how can a user dismount a component and kick in the destroy mechanism?\n","// Few more execptions that are using the attribute name to match the property in lowercase.\n// this list was compiled from https://msdn.microsoft.com/en-us/library/ms533062(v=vs.85).aspx\n// and https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\n// Note: this list most be in sync with the compiler as well.\nexport const HTMLPropertyNamesWithLowercasedReflectiveAttributes = [\n    'accessKey',\n    'readOnly',\n    'tabIndex',\n    'bgColor',\n    'colSpan',\n    'rowSpan',\n    'contentEditable',\n    'dateTime',\n    'formAction',\n    'isMap',\n    'maxLength',\n    'useMap',\n];\n\n// Global HTML Attributes & Properties\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes\n// https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement\nexport const GlobalHTMLProperties = {\n    accessKey: {\n        attribute: 'accesskey',\n    },\n    accessKeyLabel: {\n        readOnly: true,\n    },\n    className: {\n        attribute: 'class',\n        error: `Using property \"className\" is an anti-pattern because of slow runtime behavior and conflicting with classes provided by the owner element. Instead use property \"classList\".`,\n    },\n    contentEditable: {\n        attribute: 'contenteditable',\n    },\n    isContentEditable: {\n        readOnly: true,\n    },\n    contextMenu: {\n        attribute: 'contextmenu',\n    },\n    dataset: {\n        readOnly: true,\n        msg: 'Using property \"dataset\" is an anti-pattern. Instead declare \\`static observedAttributes = [\"data-foo\"]\\` and use \\`attributeChangedCallback(attrName, oldValue, newValue)\\` to get a notification each time the attribute changes.',\n    },\n    dir: {\n        attribute: 'dir',\n    },\n    draggable: {\n        attribute: 'draggable',\n        experimental: true,\n    },\n    dropzone: {\n        attribute: 'dropzone',\n        readOnly: true,\n        experimental: true,\n    },\n    hidden: {\n        attribute: 'hidden',\n    },\n    itemScope: {\n        attribute: 'itemscope',\n        experimental: true,\n    },\n    itemType: {\n        attribute: 'itemtype',\n        readOnly: true,\n        experimental: true,\n    },\n    itemId: {\n        attribute: 'itemid',\n        experimental: true,\n    },\n    itemRef: {\n        attribute: 'itemref',\n        readOnly: true,\n        experimental: true,\n    },\n    itemProp: {\n        attribute: 'itemprop',\n        readOnly: true,\n        experimental: true,\n    },\n    itemValue: {\n        experimental: true,\n    },\n    lang: {\n        attribute: 'lang',\n    },\n    offsetHeight: {\n        readOnly: true,\n        experimental: true,\n    },\n    offsetLeft: {\n        readOnly: true,\n        experimental: true,\n    },\n    offsetParent: {\n        readOnly: true,\n        experimental: true,\n    },\n    offsetTop: {\n        readOnly: true,\n        experimental: true,\n    },\n    offsetWidth: {\n        readOnly: true,\n        experimental: true,\n    },\n    properties: {\n        readOnly: true,\n        experimental: true,\n    },\n    spellcheck: {\n        experimental: true,\n    },\n    style: {\n        attribute: 'style',\n        error: `Using property or attribute \"style\" is an anti-pattern. Instead use property \"classList\".`,\n    },\n    tabIndex: {\n        attribute: 'tabindex',\n    },\n    title: {\n        attribute: 'title',\n    },\n    translate: {\n        experimental: true,\n    },\n    // additional global attributes that are not present in the link above.\n    role: {\n        attribute: 'role',\n    },\n    slot: {\n        attribute: 'slot',\n        experimental: true,\n        error: `Using property or attribute \"slot\" is an anti-pattern.`\n    }\n};\n\n// TODO: complete this list with Element properties\n// https://developer.mozilla.org/en-US/docs/Web/API/Element\n\n// TODO: complete this list with Node properties\n// https://developer.mozilla.org/en-US/docs/Web/API/Node\n","import componentInit from \"./modules/component-init\";\nimport componentProps from \"./modules/component-props\";\nimport componentAttrs from \"./modules/component-attrs\";\nimport componentEvents from \"./modules/component-events\";\nimport componentClasses from \"./modules/component-classes\";\nimport componentSlotset from \"./modules/component-slotset\";\nimport componentChildren from \"./modules/component-children\";\nimport props from \"./modules/props\";\n\nimport { init } from \"../3rdparty/snabbdom/snabbdom\";\nimport attrs from \"./modules/attrs\";\nimport styles from \"./modules/styles\";\nimport classes from \"./modules/classes\";\nimport events from \"./modules/events\";\nimport uid from \"./modules/uid\";\n\nexport const patch = init([\n    componentInit,\n    componentSlotset,\n    componentProps,\n    componentAttrs,\n    componentEvents,\n    componentClasses,\n    componentChildren,\n    props,\n    attrs,\n    classes,\n    styles,\n    events,\n    uid,\n]);\n"],"names":["obj","undefined","Promise","resolve","classList","ViewModelReflection","vnode","elm","vm","defineProperty","this","value","writable","enumerable","configurable","ctx","currentContext","callbacks","nextTickCallbackQueue","i","len","length","callback","then","flushCallbackQueue","ArrayPush","call","attrName","propName","attrNameToPropNameMap","replace","CAMEL_REGEX","g","toUpperCase","propNameToAttributeNameMap","CAPS_REGEX","match","toLowerCase","raw","className","map","classNameToClassMap","start","charCodeAt","SPACE_CHAR","slice","service","hooks","hookName","l","Services","isUndefined","push","cbs","component","data","def","context","addInsertionIndex","isDirty","connectedCallback","rehydrate","connected","addCallbackToNextTick","invokeServiceHook","noop","invokeComponentMethod","removeInsertionIndex","disconnected","disconnectedCallback","clearListeners","oldVnode","idx","insert","children","sel","ns","NamespaceAttributeForSVG","i_1","child","data_1","grandChildren","addNS","text","Ctor","EmptyData","key","uid","vmBeingRendered","classMap","class","getMapFromClassName","CHAR_S","CHAR_V","CHAR_G","v","slotset","attrs","on","_props","hook","items","factory","isArray","list","i_2","apply","flattened","i_3","item","fn","event","invokeComponentCallback","handler","target","reactiveRecord","TargetToReactiveRecordMap","get","markComponentAsDirty","scheduleRehydration","newRecord","create","set","ArrayIndexOf","deps","isRendering","subscribeToSetHook","isObject","getPropertyProxy","notifyListeners","isNull","constructor","Date","ProxyCache","has","proxy","ObjectPropertyToProxyCache","Proxy","propertyProxyHandler","add","slotName","html","_a","cmpSlots","tplCache","cmpTemplate","_b","slotsetRevoke","_c","cmp","componentRevoke","outerMemoized","currentMemoized","vnodes","api","originalPromise","tplPromise","isFunction","tplResolvedValue","attemptToEvaluateResolvedTemplate","evaluateTemplate","fnCtx","args","establishContext","result","error","e","methodName","isRenderingInception","vmBeingRenderedInception","render","isPromise","deferredTemplate","oldValue","newValue","attributeChangedCallback","vmBeingConstructed","cmpProps","wire","publicMethodsConfig","arguments","vmBeingConstructedInception","invokeComponentConstructor","wiring","pos","ArraySplice","publicPropsConfig","observedAttrs","getAttrNameFromPropName","invokeComponentAttributeChangedCallback","dispatchComponentEvent","eventName","newHandler","cmpEvents","cmpListener","createComponentListener","addEventListener","oldHandler","handlers","type","uninterrupted","stopImmediatePropagation","invokeComponentRenderMethod","fragment","renderedCallback","rehydrated","root","shadowRoot","selector","getLinkedElement","getMembrane","pierce","querySelector","querySelectorAll","nodeList","isNodeOwnedByVM","filteredNodes","ArrayFilter","node","selectors","isBeingConstructed","descriptors","getter","setter","name","props","getPublicPropertiesHash","methods","getPublicMethodsHash","getObservedAttributesHash","getWireHash","superProto","getPrototypeOf","Element","superDef","getComponentDef","assign","proto","prototype","defineProperties","createPublicPropertyDescriptorMap","getOwnPropertyNames","EmptyObject","publicProps","reduce","propsHash","publicMethods","methodsHash","observedAttributes","CtorToDefMap","createComponentDef","membrane","replicaOrAny","isReplicable","cache","GetTarget","cells","r","replica","piercing","result_1","next_1","isScheduled","cmpState","cmpClasses","cmpRoot","classListObj","createComponent","patch","vms","rehydrateQueue","sort","a","b","flushRehydrationQueue","OwnerKey","ownerUid","Membrane","relinkVM","createVM","oldProps","newProps","cur","resetComponentProp","updateComponentProp","oldAttrs","newAttrs","listener","removeEventListener","oldVm","oldOn","oldElm","oldClass","klass","ownerClass","remove","oldSlots","newSlots","removeComponentSlot","addComponentSlot","renderComponent","old","isRoot","s","tagName","document","createElement","namespaceURI","qualifiedName","createElementNS","createTextNode","createComment","parentNode","newNode","referenceNode","insertBefore","removeChild","appendChild","nextSibling","nodeValue","nodeType","splitText","vnode1","vnode2","beginIdx","endIdx","ch","setAttribute","removeAttribute","XCharCode","ColonCharCode","setAttributeNS","xmlNS","xlinkNS","oldStyle","style","removeProperty","DashCharCode","setProperty","innerClass","handleEvent","createListener","oldUid","element","propsConfig","getAttribute","toLocaleLowerCase","getPropNameFromAttrName","config","TypeError","getInitialProps","getInitialSlots","c","linkAttributes","linkProperties","options","is","HTMLElement","upgradeElement","freeze","seal","Array","ArrayMap","forEach","HTMLPropertyNamesWithLowercasedReflectiveAttributes","ClassList","index","filter","toggle","force","contains","toString","join","topLevelContextSymbol","Symbol","htmlFor","lifeCycleHooks","destroy","postpatch","WeakMap","WeakSet","propertyGetter","propertySetter","deleteProperty","propertyDelete","EmptySlots","slotsetProxyHandler","getSlotsetValue","cmpProxyHandler","Root","mode","host","shadowRootQuerySelector","shadowRootQuerySelectorAll","register","getFirstMatch","getAllMatches","isParentNodeKeyword","ComponentElement","dispatchEvent","addComponentEventListener","removeComponentEventListener","toAttributeValue","getBoundingClientRect","querySelectorAllFromComponent","wasNodePassedIntoVM","state","newState","piercingHook","getReplica","targetFn","thisArg","argumentsList","getTarget","_this","initializeComponent","update","syncProps","observeAttributes","eventListenersModule","updateCmpEventListeners","removeAllCmpEventListeners","syncClassNames","rerender","array","htmlDomApi","setTextContent","getTextContent","isElement","isText","isComment","emptyNode","attributesModule","updateAttrs","styleModule","updateStyle","updateClass","updateEventListeners","removeAllEventListeners","uidModule","updateUID","modules","domApi","id","split","childElm","listeners","parent_1","insertedVnodeQueue","isDef","init","isUndef","hashIdx","indexOf","dotIdx","hash","dot","tag","Math","min","is.array","createElm","is.primitive","parentElm","before","startIdx","j","invokeDestroyHook","rm","createRmCb","oldCh","newCh","oldKeyToIdx","idxInOld","elmToMove","oldStartIdx","newStartIdx","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","sameVnode","patchVnode","createKeyToOldIdx","addVnodes","removeVnodes","prepatch","updateChildren","parent","pre","isVnode","emptyNodeAt","post","componentInit","componentSlotset","componentProps","componentAttrs","componentEvents","componentClasses","componentChildren","classes","styles","events"],"mappings":"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"}